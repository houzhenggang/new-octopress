<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2014-06-23T09:31:26+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[中级品牌机和组装机比较]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/06/22/zhong-ji-pin-pai-ji-tai-shi-ji-bi-jiao/"/>
    <updated>2014-06-22T22:12:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/06/22/zhong-ji-pin-pai-ji-tai-shi-ji-bi-jiao</id>
    <content type="html"><![CDATA[<p>近日帮一个打算用品牌机的亲戚换机器，因为他之前用的品牌机感觉还不错。并且提出最好要联想的机器。
原因么依然是目前的一台机器就是联想，但又不想更换显示器，同时希望主机在两三千搞定。
不换显示器，对于自己组装机器来讲，
是很轻松可以办到的。碰到品牌机，就有些费周折了。</p>

<p>因为一来品牌机很多都是一体机了已经，分离式的品种本来也不多。看下来，HP的主机单卖最多，
dell其次，而联想无疑是比较少的。联想主推的是带显示器或者一体机。但好在还是找到了一些。
以下价格来自京东今天的报价。内存都是4GB，硬盘都500GB。</p>

<table><thead>
<tr>
<th align="left">机器型号</th>
<th align="center">CPU</th>
<th>内存插槽</th>
<th>操作系统</th>
<th>价格</th>
</tr>
</thead><tbody>
<tr>
<td align="left">S520</td>
<td align="center">奔腾双核</td>
<td>2</td>
<td>DOS</td>
<td>2149</td>
</tr>
<tr>
<td align="left">S520</td>
<td align="center">同上</td>
<td>2</td>
<td>Win8</td>
<td>2399</td>
</tr>
<tr>
<td align="left">H520e</td>
<td align="center">酷睿三代i3-3240T</td>
<td>1</td>
<td>DOS</td>
<td>2799</td>
</tr>
<tr>
<td align="left">S530</td>
<td align="center">i3-4150 ，独显</td>
<td>2</td>
<td>Win8</td>
<td>3199</td>
</tr>
</tbody></table>

<ul>
<li>组装(通过京东)：

<ul>
<li>CPU: i3-4150 , 809元</li>
<li>内存： 4G， 269元</li>
<li>主板： 技嘉B85, 499元</li>
<li>硬盘： 500GB， 349元，其实1T也只要300多</li>
<li>机箱和电源合计400元</li>
<li>键鼠100元</li>
<li>dvd</li>
<li>合计在2500左右</li>
</ul></li>
</ul>

<p>将京东组装和S530相比的话，品牌机大约贵了700元。考虑到一个Win8的oem也要值400左右，
对比起来会发现实际上品牌机并没有贵多少，还多了2年的免费服务和独显。以实际差价300元而言，组装机
在价格方面并没有明显的优势。</p>

<p>然而，在自由度和合理性方面，就强太多了。比如上述的内存自己可以轻易加到8GB，而联想有些机器都只有一根内存槽。
所以对熟悉的人来讲，还是情愿自己装机的。</p>

<p>此外，也说明现在京东的价格并不便宜了。但和线下比较起来，最大的优势是不会黑人随意开价。而柜台的话，
瞎开价钱的情况就很多了。所以同柜台JS交易，也是一件沟通成本很高的事情。京东至少把钱赚在了明处。</p>

<p>对比淘宝的价格：</p>

<ul>
<li>组装(通过淘宝)：

<ul>
<li>CPU: i3-4150 , 749元， -60</li>
<li>内存： 4G， 249元， -20</li>
<li>主板： 技嘉B85, 499元， -0</li>
<li>硬盘： 500GB， 300元，其实1T也只要300多， -49</li>
<li>机箱和电源合计400元</li>
<li>键鼠100元</li>
<li>dvd</li>
<li>合计在2380左右</li>
</ul></li>
</ul>

<p>可以发现在淘宝上攒机还是可以进一步便宜不少的。但就这个价位来讲，品牌机和兼容机的价格差异实在已经不是很重要了。
组装的优势是更灵活、更自由也可以更合理。不过，任何东西都有一个中国国情，就是组装机确实
绝大部分情况下都不会去安装正版购买的微软软件，所以diy到最实惠的价格，算上这种不正当的逃帐行为，差价还是很有吸引力的。</p>

<p>对于亲戚的需求，最后决定购买S530。联想的服务是他需要的，也能给我挡下不少事情，另外机箱和电源还是品牌机更漂亮和有保障，而多出的钱还是完全可以接受的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[08年至今我眼中的西班牙]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/06/14/08nian-zhi-jin-wo-yan-zhong-de-xi-ban-ya/"/>
    <updated>2014-06-14T14:48:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/06/14/08nian-zhi-jin-wo-yan-zhong-de-xi-ban-ya</id>
    <content type="html"><![CDATA[<p>看见板鸭输给荷兰1：5，说说我眼中这几年的西班牙队。</p>

<p>在我看来，08年的板鸭是完美的。那支球队可以用要啥有啥，随要随到来形容。
从锋线到门将都相当完美，基本没什么瑕疵。</p>

<p>但10年的时候，板鸭的锋线已经挺烂了，比今年的德国锋线都差的远。所以碰上蟋蟀那样的战术大师，被偷一个后就输掉了比赛。但靠着优秀的反抢和催眠控球流，确实是当届最优秀的队伍，只是比起德国的优势已经不大了。德国队08年输的没有话讲，10年输的是有点太尊重板鸭了，当然和穆勒缺席也有关系，那一届比赛穆勒是全队的触点。</p>

<p>而12年的板鸭和10年挺类似的，锋线继续无力，中场和后防开始了老化，只是还不明显。我一直觉得12年的德国，实力已经超过了当时的板鸭。要不是勒夫自毁长城、拜仁欧冠功败垂成影响备战、外加被有伤的小猪坑了一把，赢下板鸭的希望是很大的。</p>

<p>至于今年的板鸭，没想到会输给荷兰那么多，毕竟荷兰我印象中也是处于新老交替的一只队伍。罗本范佩西自然是顶级的，但其他的基本就拿不出什么像样的来了。而对板鸭本身，我依然认为他们在继续老化中，哈维小白阿隆索都是老爷车级别的了，后防又没了普约尔，锋线托妞可以继续入选，整个队伍除了拉莫斯，其他人的状态都不可能再达到08年的水准。</p>

<p>板鸭的下滑主要还是运动员年龄的客观原因。就像穆帅带的皇马，和巴萨左比右比都觉得主教练已经没什么事情好做了，只有等这些球员继续成长。而巴萨的球员则在老去。
他们都是顶尖的球员，彼此之间的胜负关键在状态，而状态的关键又是年纪和备战。</p>

<p>板鸭确实还是一支优秀的队伍，但他们也必须承认，在足球场上，他们已经老了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSP中的EL表达式和Helper]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/06/12/jspzhong-de-elbiao-da-shi-he-helper/"/>
    <updated>2014-06-12T19:05:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/06/12/jspzhong-de-elbiao-da-shi-he-helper</id>
    <content type="html"><![CDATA[<h2 id="toc_463">JSP中的代码</h2>

<h3 id="toc_464">传统的老三样</h3>

<p>长久以来的Java Web开发，在jsp层面进行读取或逻辑控制等行为时主要有<strong>Scriptlet</strong>、<strong>Helper</strong>和<strong>标签</strong>三种方式。</p>

<p>其中，Scriptlet是最不受推荐的方式，最为推荐的是用 <strong>标签</strong> 的方式，而Helper因为免不了会使用Scriptlet，所以流传的也不广。而标签方式中，不单有相对通用的JSTL（JSP Standard Tag Library，JSP标准标签库)，每个框架往往还有自己的标签库。</p>

<p>如struts1的：</p>

<p><code>&lt;bean:write name=&quot;spRinglib&quot; property=&quot;down_cnt&quot;/&gt;</code></p>

<p>struts2的：</p>

<p><code>&lt;s:property value=&quot;r.department&quot; /&gt;</code></p>

<p>jstl的：</p>

<p><code>&lt;c:out value=&quot;${user.company}&quot; escapeXml==&quot;false&quot;/&gt;</code></p>

<p>这种方式的一大特点就是冗长和啰嗦。信息的表达力很差。上述还只是用于输出的，一旦碰到条件判断等，标签的表现更是只能用拙劣二字来加以形容。同时，每个框架各搞一套，给程序员也会带来很大的负担，对项目维护也带来更多的成本。</p>

<p>然而，对于程序员而言，输出内容、流程控制等原本有着更直接和通用的描述方式： 编写代码。比如Java程序员自然用Java编写代码，Ruby的则自然用Ruby。
如果这些重新发明的标签，具有比语言更好的表达和组织能力，那么显然大家应该放弃语言本身，比如不使用java，而在MVC的各个部分都
使用标签。但既然这个没有发生，说明标签在大部分时候并不合适。</p>

<h3 id="toc_465">新的变化-EL表达式的出现</h3>

<p>好在随着EL表达式的推出，情况逐步有所改观。比如同样是上面的输出，EL的写法可以是 <code>${r.department}</code>，调用数组也可以是<code>${list[0].name}</code> 。不过EL目前还没有支持逻辑控制，所以逻辑控制还是要用jstl的标签。</p>

<p>但至少在老三样之外提供了新的一种方式，并且使得使用<strong>Helper</strong>模式可以不需要必须用Scriptlet。</p>

<h2 id="toc_466">EL中使用Helper</h2>

<p>说的简单点，其实就是在jsp页面中，通过EL表达式可以调用Java实现的方法。获得类似<code>${helper.getflow(userInfo.bendiAndNationFlux[2][0])}</code> 。 其中，getflow是一个用Java写的静态方法。</p>

<p>而使用Scriptlet配合helper，则会出现下面的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;%</span>
</span><span class='line'><span class="n">UserInfo</span> <span class="n">userInfo</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserInfo</span><span class="o">)</span> <span class="n">request</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;userInfo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="kt">long</span> <span class="n">flow</span> <span class="o">=</span> <span class="o">(</span><span class="kt">long</span><span class="o">[]</span> <span class="o">)(</span><span class="n">userInfo</span><span class="o">.</span><span class="na">getBendiAndNationFlux</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="mi">2</span><span class="o">))[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'><span class="n">SheetAttendAction</span> <span class="n">helper</span> <span class="o">=</span> <span class="o">(</span><span class="n">com</span><span class="o">.</span><span class="na">sanss</span><span class="o">.</span><span class="na">richtone</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">action</span><span class="o">.</span><span class="na">request</span><span class="o">.</span><span class="na">SheetAttendAction</span> <span class="o">)</span><span class="n">request</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;helper&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;%=</span>  <span class="n">helper</span><span class="o">.</span><span class="na">cpSelectHelper</span><span class="o">(</span><span class="n">requestSheetForm</span><span class="o">.</span><span class="na">getManager</span><span class="o">(),</span> <span class="n">spInfo</span><span class="o">.</span><span class="na">getCpCode</span><span class="o">(),</span> <span class="n">spInfo</span><span class="o">.</span><span class="na">getCpName</span><span class="o">())</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>光写出来的代码方面，不使用EL时已经要长很多了，明明只是一个调用取值显示的操作，却要先声明一系列的东西。同时，这些类型还要在jsp
的头上import进来。而IDE对jsp的import Class支持的并不好。所以确实相当麻烦。</p>

<p>对比一下可以发现，EL能够调用方法的话，可以带来多大的方便。使用Helper方法时，无论是Scriptlet还是EL表达式，在Controller层面，做
的事情都是类似的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//在controller里定义方法</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getflow</span><span class="o">(</span><span class="kt">long</span> <span class="n">flow</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">DecimalFormat</span> <span class="n">format</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DecimalFormat</span><span class="o">(</span><span class="s">&quot;###0.0&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">tmpFlow</span> <span class="o">=</span> <span class="n">flow</span> <span class="o">/</span> <span class="mi">1024</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">df</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">tmpFlow</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">flow</span> <span class="o">+</span> <span class="s">&quot;K&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">tmpFlow</span> <span class="o">&lt;</span> <span class="mf">1024.0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">df</span> <span class="o">=</span> <span class="n">flow</span> <span class="o">/</span> <span class="mf">1024.0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">format</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">df</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;M&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">df</span> <span class="o">=</span> <span class="n">flow</span> <span class="o">/</span> <span class="mf">1024.0</span> <span class="o">/</span> <span class="mi">1024</span><span class="o">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">format</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">df</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;G&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//在action中，注入属性</span>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;myflow&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">myflow</span><span class="o">(</span><span class="n">Model</span> <span class="n">model</span><span class="o">,</span> <span class="nd">@ModelAttribute</span><span class="o">(</span><span class="s">&quot;mdn&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">mdn</span><span class="o">,</span> <span class="nd">@ModelAttribute</span><span class="o">(</span><span class="s">&quot;userInfo&quot;</span><span class="o">)</span> <span class="n">UserInfo</span> <span class="n">userInfo</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;helper&quot;</span><span class="o">,</span> <span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;nubia/myflow&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>这样一来，定义自己的方法和使用这个方法就极为简便了。需要指出的是，EL表达式里面可以调用方法，即支持el里面带()调用，是<strong>直到
servlet3.0标</strong>准出现才成形的，只有在tomcat7使用，即便是<del>tomcat6也不支持</del>这种调用方式。从中，可以看出EL越来越强大趋势。
但也反过来可以证明过去方法之错误。</p>

<h2 id="toc_467">EL难道就不是Scriptlet？</h2>

<p>如果使用过其他Web开发语言的话，可以发现EL表达式和在页面模板里写脚本语言很类似。比如 <code>${r.department}</code> 和 <code>&lt;%= r.department%&gt;</code> 
除了把${}换成了&lt;%=%&gt;实在没有其他区别， <code>${helper.getflow(userInfo.bendiAndNationFlux[2][0])}</code> 可能是写成了 <code>&lt;%= getflow(userInfo.bendiAndNationFlux[2][0])%&gt;</code> 。</p>

<p>实际上，目前的EL，除了没有逻辑判断的能力之外，已经具备了很多Scriptlet的特性。那么区别在哪里呢？</p>

<p>我觉得最关键的区别在于语言本身。所谓Scriptlet其实是Java Scriptlet，需要一系列的声明才能使用。强类型编译语言有很多的好处，但在页面
显示方面，并非其所长。所以，不得不发明一套新语言来走Scriptlet的路子。 而对于另外一些本身就是脚本的语言，重新发明一套EL就显得没有必要了。 </p>

<p>EL的Scriptlet和Java的Scriptlet完全是两码事情，倒是和ruby的Scriptlet几乎没有区别。
EL的支持来的有点慢，但好歹还是来了！</p>

<h3 id="toc_468">对EL未来的期盼</h3>

<p>作为一个开发者，十分期望未来的EL能够再走一步，增加对 <code>if</code> <code>for</code>的原生支持，而不再需要使用麻烦的标签。能否发生这样的变化，就只有
再看发展了。</p>

<h3 id="toc_469">标签适用的情况</h3>

<p>标签其实也有其存在的价值，至少包括：</p>

<ol>
<li>分页等相对组件化的元素；</li>
<li>风格一致的表单。</li>
</ol>

<p>对于那些有组件化特征的东西，标签还是很适用的。</p>

<p>而在EL有了调用method的能力后，helper模式可以做的更多，很多页面逻辑可以放到helper中去完成，即把<code>if</code> <code>for</code>封装在helper里面。
这应该是目前最值得推崇的一种页面代码模式了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[士别三日 Jave Web非复昔日阿蒙]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/05/31/shi-bie-san-ri-jave-webfei-fu-xi-ri-a-meng/"/>
    <updated>2014-05-31T10:16:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/05/31/shi-bie-san-ri-jave-webfei-fu-xi-ri-a-meng</id>
    <content type="html"><![CDATA[<p>六七年来，小组的Java Web开发是用SSH（Struts2+Spring+Hibernate）的框架。
Struts2充当胶水层，完成request参数的封装、controller的映射以及视图和控制层之间的参数传递。
Spring在其中充当了注入的角色。Hibernate负责数据持久化。
这个架构稳定使用了五年以上。</p>

<p>之所以一直使用，一方面在于对Webwork(Struts2)的感情，
毕竟曾经这个东西在替换struts1时让人映像深刻。其次，
一个开发架构的迁移牵涉到整个小组，引入、推广和维护都有成本的，
一成不变固然不行，一直切换也难免开销过大。同时，SSH招收熟手也相对容易些。</p>

<p>然而，Struts2毕竟多年已经没什么发展，
同时它的安全漏洞始终没能很好地解决，加上老架构也确实使用的时间有点长了。
因此开始尝试新的方案。主要目标就是替换掉Struts2，也就是选用其他的Controller组件。
而考察的对象就是Spring，确切地说是Spring MVC。</p>

<p>而在了解的过程中，又仔细学习了一下Spring JPA。当MVC+JPA结合在一起后，
发现Java Web的进步已然很大。而Spring MVC可以说是Rails的山寨版，
或者可以称之为 Java on Rails with Java Style。Spring MVC的设计者
可以说从Rails中借鉴了很多东西，但又最终使用Java的方式实现了出来。</p>

<p>在初学Rails的时候，彼时的版本是1.2.6，一直有个疑问，就是Java能否也有一个
像Ruby on Rails那样好的Web开发框架？当时有的牛人给出的答案是不依赖Ruby，
DHH变不出那么多魔术。但是，如今的Spring MVC至少已经赶上了Rails 2的开发便利程度，
虽然还逊于最新的Rails版本。所以，确切地说，Java至少也可以拥有和Rails 2 <strong>一样方便</strong>的Web框架，
只是需要投入<strong>更多</strong>的人力，也需要等待长的多的时间。而最后出来的东西肯定还是充满Java味道的。
现在的Rails已经走的更远了，但Java Web提高的程度这几年却更加显著了。</p>

<p>看一下Controller：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;update/{id}&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">updateForm</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">&quot;id&quot;</span><span class="o">)</span> <span class="n">Long</span> <span class="n">id</span><span class="o">,</span> <span class="n">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;user&quot;</span><span class="o">,</span> <span class="n">userService</span><span class="o">.</span><span class="na">getUser</span><span class="o">(</span><span class="n">id</span><span class="o">));</span>
</span><span class='line'>  <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;action&quot;</span><span class="o">,</span> <span class="s">&quot;update&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">&quot;user/userForm&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;update/{id}&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">update</span><span class="o">(</span><span class="nd">@Valid</span> <span class="nd">@ModelAttribute</span><span class="o">(</span><span class="s">&quot;user&quot;</span><span class="o">)</span> <span class="n">User</span> <span class="n">user</span><span class="o">,</span> <span class="n">RedirectAttributes</span> <span class="n">redirectAttributes</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">userService</span><span class="o">.</span><span class="na">updateUser</span><span class="o">(</span><span class="n">user</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getNumber2</span><span class="o">(),</span> <span class="n">user</span><span class="o">.</span><span class="na">getCurrentshownumber</span><span class="o">());</span>
</span><span class='line'>  <span class="n">redirectAttributes</span><span class="o">.</span><span class="na">addFlashAttribute</span><span class="o">(</span><span class="s">&quot;message&quot;</span><span class="o">,</span> <span class="s">&quot;更新任务成功&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">&quot;redirect:/simuser/&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Restful风格的Url，通过声明<code>@ModelAttribute</code>可以注入参数到模型中，
<code>@PathVariable</code>可以实现从url路径中获取参数，
<code>userService</code>是注入的服务组件，<code>model.addAttribute</code>则将controller的内容注入给页面模板。
整个风格已经十分简洁。如果需要其他组件，如<code>session</code>或者<code>request</code>，
只要在类或者方法的参数中声明即可。<code>return &quot;user/userForm&quot;</code>则通知渲染user目录下的userForm.jsp模板</p>

<p>Spring JPA则是最方便的Java ORM描述工具。寻找多年的Java版ActiveRecord终于有了着落。
需要定义两个文件：1：model本身，2：一个dao文件（reposity）</p>

<ul>
<li>model：</li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//JPA标识</span>
</span><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;users&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="kd">extends</span> <span class="n">IdEntity</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">login</span><span class="o">;</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Phonenumber</span><span class="o">&gt;</span> <span class="n">phonenumbers</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Useroperlog</span><span class="o">&gt;</span> <span class="n">useroperlogs</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@NotBlank</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getNumber1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">number1</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setNumber1</span><span class="o">(</span><span class="n">String</span> <span class="n">number1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">number1</span> <span class="o">=</span> <span class="n">number1</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Transient</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getNumber2</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">number2</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setNumber2</span><span class="o">(</span><span class="n">String</span> <span class="n">number2</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">number2</span> <span class="o">=</span> <span class="n">number2</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Transient</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getCurrentshownumber</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">currentshownumber</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCurrentshownumber</span><span class="o">(</span><span class="n">String</span> <span class="n">currentshownumber</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">currentshownumber</span> <span class="o">=</span> <span class="n">currentshownumber</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="c1">// join column is in table for Phonenumber</span>
</span><span class='line'>  <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">fetch</span><span class="o">=</span><span class="n">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">,</span><span class="n">orphanRemoval</span><span class="o">=</span><span class="kc">true</span><span class="o">,</span><span class="n">cascade</span><span class="o">=</span><span class="n">CascadeType</span><span class="o">.</span><span class="na">ALL</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;userid&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Phonenumber</span><span class="o">&gt;</span> <span class="nf">getPhonenumbers</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">phonenumbers</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPhonenumbers</span><span class="o">(</span><span class="n">Set</span><span class="o">&lt;</span><span class="n">Phonenumber</span><span class="o">&gt;</span> <span class="n">phonenumbers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">phonenumbers</span> <span class="o">=</span> <span class="n">phonenumbers</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">fetch</span><span class="o">=</span><span class="n">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;userid&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Useroperlog</span><span class="o">&gt;</span> <span class="nf">getUseroperlogs</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">useroperlogs</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUseroperlogs</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Useroperlog</span><span class="o">&gt;</span> <span class="n">useroperlogs</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">useroperlogs</span> <span class="o">=</span> <span class="n">useroperlogs</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ToStringBuilder</span><span class="o">.</span><span class="na">reflectionToString</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>啰嗦是还是有点啰嗦，这个毕竟是java。DAO相对代码少一些。</p>

<ul>
<li>DAO文件：</li>
</ul>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserDao</span> <span class="kd">extends</span> <span class="n">PagingAndSortingRepository</span><span class="o">&lt;</span><span class="n">User</span><span class="o">,</span> <span class="n">Long</span><span class="o">&gt;,</span> <span class="n">JpaSpecificationExecutor</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Page&lt;User&gt; findByUserId(Long id, Pageable pageRequest);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">User</span> <span class="nf">findByNumber1</span><span class="o">(</span><span class="n">String</span> <span class="n">number1</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
这个dao提供了很多默认的方法，包括`findAll`, `findOne`, `save`，底层的
实现还有很多内容，但使用的话确实只需要声明这些就行了。

- 在Service文件中可这样使用:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateUser</span><span class="o">(</span><span class="n">User</span> <span class="n">entity</span><span class="o">,</span> <span class="n">String</span> <span class="n">number2</span><span class="o">,</span> <span class="n">String</span> <span class="n">showNumber</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">loadNumber2</span><span class="o">(</span><span class="n">entity</span><span class="o">);</span>
</span><span class='line'>  <span class="n">resetCurrentshownumber</span><span class="o">(</span><span class="n">entity</span><span class="o">,</span> <span class="n">showNumber</span><span class="o">);</span>
</span><span class='line'>  <span class="n">resetNumber2</span><span class="o">(</span><span class="n">entity</span><span class="o">,</span> <span class="n">number2</span><span class="o">);</span>
</span><span class='line'>  <span class="n">userDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">entity</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteUser</span><span class="o">(</span><span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">userDao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>而在页面处理上，几年前的Servlet 2.5开始，EL表达式取得了首要被支持的地位。</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">$</span><span class="o">{</span><span class="n">user</span><span class="o">.</span><span class="na">name</span><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
对比ruby在erb里常用的</p>

<p><code>&lt;%=user.name%&gt;</code></p>

<p>EL表达式其实就是代码了。Java不具备动态语言的特性，所以需要另外造一套表达式。
ruby的话，直接使用scriptlet其实效果更好也更直白。个人其实认为，逻辑判断、
取值等都应该使用语言本身，而不是要借助标签。EL表达式是对Java语言的一种很好的补充。
对Java Web的开发状况改善许多。但在迭代、逻辑判断方面，
标签使用的机会还是满多的，这个只能再等发展的变化了。</p>

<p>以上是已经进步显著的几个方面。但在布局、分页以及整合上，Spring并没有提供
一步到位的东西。所以需要进一步参考<a href="https://github.com/springside/springside4">SpringSide</a>。
这是一个中国人主推的Java Web开发实践整合的开源项目。里面提供了整合的样例，
其实本身也可以当做一个开发模板来对待。</p>

<p>从<a href="https://github.com/springside/springside4">SpringSide</a>上也可以追踪
Java Web开发历史的变迁，看了几年前的版本也是主要基于SSH的，最近一两年切换到了Spring MVC。
同时它也是使用的JPA来做ORM的描述。在各方面都很贴合我的需求和口味。考虑到这个项目维护多年，
且始终保持着很不错的实践，在此推荐一下。</p>

<p>花费多年时间，Jave Web非复昔日阿蒙。开发中的痛苦状况已经得到了极大的改善。
值得刮目相待。Spring确实极大地改变了Java Web开发，而Rails则影响了十年来的Web开发。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[车牌原来也是一种投资和筹资]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/05/24/che-pai-yuan-lai-ye-shi-%5B%3F%5D-chong-tou-zi-he-chou-zi/"/>
    <updated>2014-05-24T08:52:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/05/24/che-pai-yuan-lai-ye-shi-[?]-chong-tou-zi-he-chou-zi</id>
    <content type="html"><![CDATA[<p>随着虎牌一级市场和二级市场的价格越拉越大，获利空间越来越多，
整个车牌市场渐渐有了融资市场的味道。</p>

<p>不是么，没花什么资源，政府就得到了钞票，这属于筹资；拍牌人
就是投资者，手里的钱得到了保值。政府筹资成功后，和一切筹资者一样，
拿这笔钱去做事情去了。基建和公共交通又确实都是当前中国还需要的动作。
这样一来，实质的财富在此过程中确实创造了出来。</p>

<p>现代金融市场的功能不过如此吧！</p>

<p>而随着一级市场执行限价，手里拥有车牌这一金融产品属性产品的人们，开始纷纷谋求流动套利。
政府现在的做法等于是给老投资者派发红利。只是这个派发并不是平均的。
但大部分投资者还是可以参与的。就参与的角度而言，也算公平公正。唯独对新投资者有点不太公平了。
但新投资者也不是被逼进来的，所以还是比较自由的一种个人行为。</p>

<p>上海拍牌比新加坡强大的一点就在于这个牌照是一种较特殊的投资品种，
而新加坡的就完全属于消耗品。上海的车牌有投资和理财的价值。自己可以使用，同时筹资者也可以利用这笔资金创造财富。</p>

<p>不得不说一句，上海政府是目前中国最佳的金融衍生品创造者。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[车位]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/05/18/che-wei/"/>
    <updated>2014-05-18T10:03:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/05/18/che-wei</id>
    <content type="html"><![CDATA[<p>自从要开始开车，车位始终是一个问题。目前小区地面是无固定车位，先来先得，抢到了可以用到开走的时候。好处是价格便宜，150/月。很早就申请并开始付钱了，
但现在发现申请的有点早了，因为小区根本没有控制车辆总数的意思。现在申请也是同样可以的。当然，每月本来开销也不大，这个就只能当小赌赌输了。真的让人头疼的还是每天要停车的现实，特别是以后每天开起来。</p>

<p>小区里面另一种车位就是地下车库了。大概2011年上半年的时候，当时的物业撤离前，把开发商保留的最后一批地下车库卖了出来。
彼时是20w元一个，且已经租用者可优先购买。我当时还没买车，自然也不是租用者，肯花钱也不一定轮得到。
如今，再一打听，地下车位已经有人在卖40w了。这个价位有点偏高，很长时间无人问津。</p>

<p>既然卖了这个价，那就更不乐意买了。毕竟现在的理财产品，妥妥的一年有5-6%的收益，40w就意味着每年可以多出来2w。
这笔增值都可以出国旅游一趟了。何苦变成车位的死投资。地下固定车位尽管长期看涨，但除了停停车也确实没其他用处。
而其替代品还是有一些的。如现在的小区地面，甚至可能会被贴罚单的小马路上。虽然不方便虽然有风险，但是后二者都很难迅速涨价。
一般情况下，凑合着停停也就算了。</p>

<p>让人欣慰的是，上海政府至少规定了新造的楼盘车位要达到将近1:1的比例。
虽说不解决老小区的问题，但好歹也算以后换房多了一些选择。总体而言还是增加了地下车库的供给，而一套房子毕竟也不一定待一辈子。</p>

<p>长远来看，有个固定的地下车位还是很有必要的。只是碍于目前的身价，不舍得花那么一大笔钱。
真能解决这个问题的唯一办法，还真的只有自己努力赚钱吧。现在固定车位的意义对我而言大于40w，当然只是比如说，那肯定毫不犹豫就会出手了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[老板和技术骨干]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/05/17/lao-ban-he-ji-zhu-gu-gan/"/>
    <updated>2014-05-17T09:00:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/05/17/lao-ban-he-ji-zhu-gu-gan</id>
    <content type="html"><![CDATA[<p>蔡文胜和caoz的事情是这一阵网上讨论的比较多的一个话题。原本
也不想多说什么，毕竟这种事情也挺司空见惯的。到了这个层面，
主要已经是看老板的rp以及骨干成员和老板的关系了。</p>

<p>只是看了寻路中国乡村，发现农村和城市的老板也真的挺类似的。
比如说，说好的该给的待遇不兑现，说的和做的完全可以分离。
当然，城市的老板一般不给钱只是不给钱了，而乡村企业家拖欠
工资可能还是想留住员工。</p>

<p>如果真要总结，只有一条最重要：<strong>跟对老板</strong>。其他确实都是其次的。
至于说保持自己的竞争力，保持自己的核心地位，这些是做任何事情的
本分。毕竟公司不是家庭，个人的存在是必须有价值才行的。</p>

<p>说回caoz本身，他的博客也是我比较喜欢的一类，尽管更新频率确实很低。
当然，他所判断的也不全对，比如在房价、在历史方面就挺离谱的。
但他的文章确实有干货，更重要的打鸡血的效果确实很棒。
<strong>保持乐观可能比<del>跟对老板</del>更加重要</strong>。</p>

<p>如果完全翻版寻路中国里面的大师傅，也就是IT业界所谓的CTO吧，最把握的
了的可能还是自己直接创业。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails2.3老版本的迁移安装手记]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/05/08/rails2-dot-3lao-ban-ben-de-qian-yi-an-zhuang-shou-ji/"/>
    <updated>2014-05-08T22:08:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/05/08/rails2-dot-3lao-ban-ben-de-qian-yi-an-zhuang-shou-ji</id>
    <content type="html"><![CDATA[<p>一个五六年前开发的Rails应用更换主机需要重新部署。这个Rails的版本还是2.3.5，Ruby版本只是1.8.7. 因为是内部的一个小应用，所以一直也没翻新升级。彼时还没有bundle，而现在对版本依赖的管理已经离不开bundle了。
下面就是记录一下如何用bundle来安装Rails 2.3的应用。</p>

<h3 id="toc_459">下载ruby 1.8.7</h3>

<p>减少麻烦，还是保持一致的版本迁移。新机器暂时没有安装其他ruby版本的需求，所以暂不考虑rbenv。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>wget http://ruby.taobao.org/mirrors/ruby/ruby-1.8.7-p358.tar.gz
</span><span class='line'>tar -zxvf ruby-1.8.7-p358.tar.gz
</span><span class='line'><span class="nb">cd </span>ruby-1.8.7-p358
</span><span class='line'>./configure --prefix<span class="o">=</span>/usr/local/ruby187
</span><span class='line'>make
</span><span class='line'>make install
</span><span class='line'>/usr/local/ruby187/bin/ruby -ropenssl -rzlib -rreadline -e <span class="s2">&quot;puts :success&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>看到输出<code>success</code>后，证明ruby各安装库已全部编译进去。主机是一台CentOS 6.4，所以安装1.8.7相当之顺利。
安装完毕后，把ruby的运行路径加到环境变量PATH的最前面。</p>

<h3 id="toc_460">安装rubygems</h3>

<p>这个已经很久没有手动安装了，ree和ruby1.9之后rubygems都集成到ruby里面去了，1.8.7还是需要手工安装的。为了减少麻烦，比如能安装thin、能使用bundle、又尽量满足五年前的gem环境，选择了1.4.0.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>wget http://rubyforge.org/frs/download.php/73763/rubygems-1.4.0.tgz
</span><span class='line'>tar -zxvf rubygems-1.4.0.tgz
</span><span class='line'><span class="nb">cd </span>rubygems-1.4.0
</span><span class='line'>ruby setup.rb
</span></code></pre></td></tr></table></div></figure>

<h3 id="toc_461">安装Oracle即时客户端和ruby-oci8</h3>

<p>这个东西现在安装倒比以前简单些了。具体可以参考ruby-oci8的官方帮助，关键是要下载3个instant相关的客户端。其实sdk等两个包是很小的，最后都解压到一个目录下。随后，就是设置<code>LD_LIBRARY_PATH</code>的值。关键一点是注意不要配错这个环境变量指向的路径。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span>/opt/instantclient_10_2:/usr/local/lib:/usr/lib
</span><span class='line'>wget http://dl.bintray.com/kubo/generic/ruby-oci8-2.0.6.tar.gz
</span><span class='line'>tar -zxvf ruby-oci8-2.0.6.tar.gz
</span><span class='line'><span class="nb">cd </span>ruby-oci8-2.0.6
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>

<h3 id="toc_462">Gemfile和bundle</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;http://ruby.taobao.org&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;2.3.5&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;activeresource&#39;</span><span class="p">,</span> <span class="s1">&#39;2.3.5&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;activesupport&#39;</span><span class="p">,</span> <span class="s1">&#39;2.3.5&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;capistrano&#39;</span><span class="p">,</span> <span class="s1">&#39;2.5.17&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;fastthread&#39;</span><span class="p">,</span> <span class="s1">&#39;1.0.7&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;highline&#39;</span><span class="p">,</span> <span class="s1">&#39;1.5.2&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;json_pure&#39;</span><span class="p">,</span> <span class="s1">&#39;1.4.3&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span><span class="p">,</span> <span class="s1">&#39;1.4.1&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rack&#39;</span><span class="p">,</span> <span class="s1">&#39;1.0.1&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rake&#39;</span><span class="p">,</span> <span class="s1">&#39;0.8.7&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;RedCloth&#39;</span><span class="p">,</span> <span class="s1">&#39;4.2.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rubyforge&#39;</span><span class="p">,</span> <span class="s1">&#39;2.0.4&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;haml&quot;</span><span class="p">,</span>  <span class="s1">&#39;3.0.12&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;will_paginate&#39;</span><span class="p">,</span> <span class="s1">&#39;2.2.2&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;paperclip&#39;</span><span class="p">,</span> <span class="s1">&#39;2.3.1&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;formtastic&#39;</span><span class="p">,</span> <span class="s1">&#39;0.9.8&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;jintastic&#39;</span><span class="p">,</span> <span class="s1">&#39;1.1.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;ruby-mp3info&#39;</span><span class="p">,</span> <span class="s1">&#39;0.6.13&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;mime-types&#39;</span><span class="p">,</span> <span class="s1">&#39;1.16&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;authlogic&quot;</span><span class="p">,</span> <span class="s1">&#39;2.1.5&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;acl9&quot;</span><span class="p">,</span> <span class="s1">&#39;0.12.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;paginator&quot;</span><span class="p">,</span> <span class="s1">&#39;1.1.1&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;spreadsheet&quot;</span><span class="p">,</span> <span class="s1">&#39;0.6.4.1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;thin&quot;</span><span class="p">,</span> <span class="s2">&quot;0.5.2&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;activerecord-oracle_enhanced-adapter&#39;</span><span class="p">,</span> <span class="s1">&#39;1.2.4&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sqlite3-ruby&#39;</span>
</span><span class='line'><span class="n">gem</span>  <span class="s1">&#39;rest-client&#39;</span><span class="p">,</span>  <span class="s1">&#39;1.6.7&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>然后执行<code>bundle install</code> , 相关的Gem就可以安装到位了。 <code>thin start -e production</code> ， 通过这个命令应用就能在生产环境下启动了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atom和Node-Webkit]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/05/07/atomhe-node-webkit/"/>
    <updated>2014-05-07T16:21:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/05/07/atomhe-node-webkit</id>
    <content type="html"><![CDATA[<p><a href="http://atom.io">Atom</a>是Github投入开发的一个<strong>新编辑器</strong>。 目前只有Mac版，我在mbp上使用之后感觉还可以。基本可以认为是一个结合了Textmate和Vi插件的产物。
比如，看界面很像Textmate，但又有Textmat始终也没有支持的Ctrl-P插件。初步使用下来唯一不满的就是软件包太大，170MB对于一个文本编辑器而言是很大了。毕竟Eclipse这样的IDE也只在200MB的规模。</p>

<p>在使用体验方面，比较起来，和Textmate更接近些，但扩展应该方便很多。而比起vi的话，主要优势在于是GUI的，支持command+s保存，也支持鼠标选取文本，对中文输入而言明显要比
vi更合适。高亮、快捷等简单用用差别并不大，美观度当然都可以配置的不错。</p>

<p>而在昨天，Atom进一步把他们的核心模块开源了，另外提到了他们是基于<a href="https://github.com/rogerwang/node-webkit/wiki">Node-Webkit</a> 开发的这款工具。</p>

<p>这个组合就让我有点费解了。因为webkit是一个当代浏览器的引擎，safari chrome chromium等都使用了webkit，可以理解webkit就是一个浏览器。而node是指的
Node.js，一个可以在服务器端编写javascript的平台，提供了很多的js库。而这么一个组合，干文本编辑器什么事情？在我开来，文本编辑器应该是很原生的一种应用软件。</p>

<p>仔细阅读了一下Node-Webkit的官方介绍以及一些其他材料，尤其是这篇<a href="http://blog.whattoc.com/2013/12/16/node-webkit01/">你所不知道的Node-webkit</a>
，忽然明白了所谓跑起来的Atom，其实就是运行了一个浏览器。只是这个浏览器里面的输入元素都是用HTML5编写的，而这个浏览器就是chromium，chrome的免安装的一个分支的名称。然后Atom又加了很多事件响应处理的注册代码段在里面。整个编辑类似于在线编辑，只是保存是在本地的。也因此，这个东西要往Linux和Windows迁移是轻而易举的。因为chromium和Node.js本来就是跨平台的。</p>

<p>然而，一旦有那么美好的事情，这个世界上就有银弹了。而历史的经验告诉我们，世上是没有银弹的。</p>

<p>Atom之所以在mbp上使用的体验还不错，主要是因为mbp搭载了大内存、ssd硬盘以及性能走在前列的x86处理器，所以并没有<strong>卡</strong>。而一旦这些条件不具备，情况就不是那么回事情了。这种类似phonegap，用浏览器来模拟原生应用的最大<strong>弱点</strong>无疑是性能差以及开销大。因此会有人提出打开大文件的效果不堪想象。<br>
从口味上来讲，个人不太喜欢编辑器也Web化。虽然内存cpu的发展依然迅速，Atom的性能问题可能是可以被硬件性能的提升弥补的，但这种做法还是有其先天的缺陷。</p>

<p>所以，如果是脚本的开发，可能还是要继续用vi编写。如果是输入大量中文的话，Atom可以优先考虑。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openssl and fIPC]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/05/06/openssl-and-fipc/"/>
    <updated>2014-05-06T14:27:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/05/06/openssl-and-fipc</id>
    <content type="html"><![CDATA[<p>Openssl还是一个关联很多的基础组件。自从爆出心血漏洞后，给自己的虚机也重新编译了一个新的openssl，
但是在编译ruby 2.1.1时却发现了新的问题。</p>

<p>第一个问题，是编译时老是认不出已经安装的openssl。可能因为openssl是从源码手工安装，而没有使用
apt-get intall，原因在于apt-get是失败的。</p>

<p>为解决这个问题，就在<code>/usr/loca/openssl-1.0.1g</code> 下独立编译生成了一个openssl。然后ruby再编译时可以识别openssl组件了。
但是，编译到一半，会报错</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>linking shared-object digest/md5.solibcrypto.a(md5_dgst.o): relocation R_X86_64_PC32 against undefined symbol</span></code></pre></td></tr></table></div></figure>

<p>错误具体是连接报错。建议是要编译时加上 <code>-fIPC</code> 的选项。初看起来有点摸不着头脑，到底是给ruby编译时加上还是给openssl加上呢？</p>

<p>这里就是遇到的第二个问题，连接共享库失败。</p>

<p>于是检查这个选项是什么意思。查下来后，我大致的理解是：</p>

<ol>
<li><code>fIPC</code>使得编译出来的库文件(.a, .so等)地址都是相对地址；</li>
<li>相对地址的好处是适合共享使用，但在装载时不同的进程可能会装载多次这个共享库；</li>
<li>如果没有此选项，则是按绝地地址来编译，好处是内存中只有一份。</li>
</ol>

<p>了解了fIPC是什么东西，上述报错就好理解了，是需要在openssl编译时加上此选项。</p>

<p><code>./config --prefix=/usr/local/openssl-1.0.1g -shared -fPIC</code> 然后<code>make &amp;&amp; make install</code></p>

<p>再在ruby安装包里执行</p>

<p><code>./configure --prefix=/home/user/.rbenv/versions/ruby-2.1.1 --disable-install-doc --with-openssl-dir=/usr/local/openssl-1.0.1g</code> , 然后 <code>make &amp;&amp; make install &amp;&amp; rbenv rehash</code> </p>

<p>这样就装好了。</p>

<p>其实，我还有一点疑问，就是如何让openssl静态且又能找到。
估计又是一个属于和ubuntu紧密相关的问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[普鲁士不含传说]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/05/03/pu-lu-shi-bu-han-chuan-shuo/"/>
    <updated>2014-05-03T15:47:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/05/03/pu-lu-shi-bu-han-chuan-shuo</id>
    <content type="html"><![CDATA[<p>哈夫纳的名著之一，篇幅很短但内容很丰富，只读一遍肯定是不够的。
此书出版于2012年，国内的图书馆基本都还没货，所以是购买的台湾纸版书。
印刷和包装相对一般，价格倒是还好，折扣下来只有
300台币，折合60元人民币。</p>

<p>本书一如哈夫纳的风格，逻辑清晰、还原事实。去除了那些覆盖在普鲁士
身上的传说，而把普鲁士的崛起与特性追根溯源，来龙去脉介绍的十分
清晰。作为后天形成的理性国家，普鲁士有其巨大的优势，即人为组合而成，
因此其本身必须有许多的优点才能存活下来。为了生存，他具备了很多
先进的东西。比如法治、自由、不在乎以及最重要的&#8211;责任。国家对
公民尽责，公民对国家尽责，除此之外则公民爱干嘛就干嘛。这为他吸引
了大量的移民，使得这个国家在经济、军事上都保持了高于同时代国家的
活力。这也是普鲁士最吸引人的地方。</p>

<p>但是，普鲁士的弱点也在于此。因为他本身就是一个人为组合的国家，没有
民族和地理的基础，过的好时大家可以在一起，而过的不好或者可以用其他
方式过的更好时，他似乎就没有存在的必要了。这方面完全不如有民族或者
部族基础的国家。普鲁士作为一个国家，其结合点主要是霍恩佐伦家族，当
这个家族融入德意志之后，整个普鲁士也只能溶解于德意志了。</p>

<p>普鲁士的名称在历史上主要指向3个事物：</p>

<ol>
<li>生活在这片地区，丹泽到波罗的海沿岸，<strong>原始</strong>的部族。这部分人很早就被
灭族了。<br></li>
<li>原始部族是被<strong>条顿骑士</strong>殖民征服，并逐渐与西斯拉夫人融合，而征服者使用了被征服者的称呼。<br></li>
<li>由<strong>霍恩佐伦家族</strong>夹起来的地区性强权国家，条顿骑士团的最后一任大团长出自霍恩佐伦。第3个普鲁士即教科书里出现的普鲁士。</li>
</ol>

<p>其崛起充满了偶然性，也需要极大的运气，中间有着数个优秀但又性格迥异的君主。
比如，士兵国王，腓特烈大帝，以及他们的先辈和后代。其中，有的热衷于文化事业，
喜欢排场，有的则很节俭，有的则是军事天才。无论如何，他们都很有责任感，也
往往具备了坚强的毅力。</p>

<p>普鲁士其实打仗的时候并不多，即使是腓特烈大帝，所谓的欧洲最杰出的统帅之一，一生
大部分时间也是处理内政为主的，即便打也只是<strong>内阁战争</strong>。但普鲁士以善战闻名主要还是因为
不打则已，一打则往往是轰轰烈烈，而且常常伴随着惊人的胜利，交战双方也往往都要付出
极其惨重的代价。</p>

<p>普鲁士的崛起，离不开同<strong>俄罗斯</strong>的良好关系。这类似于近代东德和苏俄的关系。
腓特烈时代，普鲁士成为了一个<strong>双民族</strong>的<strong>大</strong>国家，国土的一半属于波兰并生活着
波兰人。但随着拿破仑横扫欧洲，普鲁士经历了巨大的考验。在反法同盟胜利后，其波兰
部分被去除，而得到了鲁尔区作为补贴。但在当时，这并不是一个划算的买卖。但也因祸得福，
普鲁士变成了德意志的单民族国家，鲁尔区后来成为最重要的煤产区和工业基地。反而摆脱了日后奥地利的命运。</p>

<p>三只老鹰即指，俄罗斯，普鲁士和奥地利。欧洲在德国崛起前，其实是波旁王朝（法国）和
哈夫斯堡王朝（奥地利）双雄争霸的格局。其后，才是俄罗斯和普鲁士崛起。普俄的关系在
1877年前都很好，之后因为土耳其退出了巴尔干，其遗产在英法奥俄间引起了巨大冲突，
才使得德俄关系进入了不良的阶段。直到现在也是如此。</p>

<p>随后，就是三场战争建立了一个国家，真正的日尔曼大国德意志。三场战争是普丹、普奥、普法，
杰出的政治家则是俾斯麦。而普鲁士军队的改革则是俾斯麦的领导，普鲁士国王完成的。国王
60多才即位，90高龄才离世。俾斯麦 毛奇均是他的选择。当然，他选择俾斯麦也多少有点无奈。</p>

<p>普鲁士的崛起也是符合顺应时代精神的结果。从腓特烈时代起，流行的是<strong>国家主义</strong>、<strong>民族主义</strong>,
这些东西塑造了整个近现代史。也有失败的主义运动，如<strong>种族主义</strong>。如果不符合时代精神，那么人为
怎么努力其结果必然还是要失败的。但这也意味着，爱国主义和爱民族主义其实并不是天经地义的。
实际上更早流行的是<strong>国王主义</strong>，国家只要有个国王就好了，曾经这个比民主二字还要吸引人。
我国其实一直是为<strong>国王</strong>服务的思想长期占据统治地位，现代化后逐步引入了国家、民族和民主，也算
一种进步吧。</p>

<p>普鲁士是一个伟大的国家，最后溶解于德国了。但普鲁士毕竟不是德国，溶解于德国未必是
他的领导人所希望的。只是普鲁士太人工合成了，所以一旦遇到德意志，就立马水乳交融了。
但有一点，普鲁士并不是一个扩张成性的国家，真的有着欧洲大国梦和传统的是奥地利，希特勒其实
是奥地利的传人，而绝不是腓特烈大帝、俾斯麦的继承者。</p>

<p>一国的崛起有其必然性，但运气的成分也是举足轻重的。普鲁士的辉煌绝对也离不开腓特烈的冒险。
做其他事情的道理也是类似的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Macbook Pro]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/05/02/macbook-pro/"/>
    <updated>2014-05-02T11:24:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/05/02/macbook-pro</id>
    <content type="html"><![CDATA[<p>日本之旅买了很多东西，其中就包括了一台Macbook Pro。主要的参数如下：</p>

<p>屏幕: 13寸Retina<br>
CPU: Intel Core i5 2.4GHz<br>
Mem: 8GB 1600MHz<br>
硬盘: 256GB SSD<br>
显卡: Intel Iris Graphics<br>
售价: 147800 日元，折合人民币9060  </p>

<p>售价比中国便宜了许多主要是受汇率的影响。如果2月份去的话，会更便宜，现在
的汇率已经到0.061以上了。而最便宜的时候有几个礼拜都是在0.058左右浮动的。
当然，考虑到国内的售价是10788，所以便宜的幅度还是不小的。而且，Macbook是
可以在国内的苹果门店得到全球保修的。实际上除了iphone，苹果的所有产品均有
此项服务。</p>

<p>由于需要us版的键盘，所以只能放弃在<del>biccamera</del>之类的电器店购买mac。因为那边
只有日文键盘版的。太多的片假名让人不太喜欢，而且有些按键也和通常的布局不太一样。
而苹果店是同时有日文版和美国键盘版供应的。坏处有二：</p>

<ol>
<li>只能用visa，不能用银联；</li>
<li>电器店有5%的折扣+退税8%，而苹果店一般只有后者一个优惠，所以要贵5%。<br></li>
</ol>

<p>但为了完美一些，只能放弃5%的优惠了。这里还要再吐槽一下visa。用的卡是多币种的
信用卡，免去了1.5%的中间手续费，但visa的结算日期是按他们自己的节奏来的，不像
银联是当日汇率直接折算成人民币。而到visa的结算日，往往汇率对我们是不利的。所以，
对赚取人民币的人而言，用visa比银联要差的多。</p>

<p>严格说起来，这也是我人生中<strong>第一台笔记本</strong>。之前用过的主要是dell和ibm的
商务本，全部都是公司配的。这些机器虽然吐槽的人很多，我用下来一直感觉还算凑合。家里的一个sony本子是老婆婚前就
买的。所以，这台mac确实是我第一台自己购买的笔记本。</p>

<p>公司的电脑也很新，而且我目前也不考虑在工作中改用mac。家里有台式机也有一台昂贵的sony笔记本。
表面上看，我并不缺机器用。但有了孩子以后，能正经坐在台式机前的时间很少。而那台sony是
配ssd的，性能不错，但空间实在有限，装个虚机和基本的系统后，就没多少硬盘了。而且，我尤其
讨厌这台sony的屏幕，挺贵的机器，屏幕却配了一个永远想继续增加亮度的屏。也略微有点小重，
放在床上用并不舒服。<br>
而mac就可以较好地解决这些问题了。为了写博客或者浏览信息基本不需要再装虚拟机。而mac的retina
屏幕实属人间尤物，细腻且亮度极高，一看就喜欢，越用越喜欢。机器本身只有1.5kg，比sony的小本子
还要轻一些。电池续航能力就更强了，号称可以有9个小时，而一般的本子能有4小时的已经算很强大了。
基于以上几个优点，轻、亮、长、匹配，使我相信macbook可以给我更多的在家使用电脑的机会。
而mac本身就是一个unix，意味着我在linux上常用的东西可以直接转到mac使用。实际上这台
mac竟然预装了ruby，而且还是2.0版本的ruby。尽管我还是会用rbenv，但对说明mac对开发人员
天生的友好支持则是足够了。</p>

<p>买回来之后，先注册一个apple id，登录好icloud, app store之后，就都是中文的东西了。
随后安卓xcode，安装homebrew(应该就是yehuda大神搞的那个东西吧)，基本上一个开发环境
就ok了。xcode里会自带git，brew则可以像yum apt-get一样安装各式的软件包。</p>

<p>随后，安装rbenv，ruby从1.8.7 1.9.3 2.1.1全部都装上，再装一个github的atom或者textmate
做编辑器，一个开发环境就绪了。输入法换成百度for mac。</p>

<p>（未完待续）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日本之旅]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/05/01/ri-ben-zhi-lu/"/>
    <updated>2014-05-01T14:52:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/05/01/ri-ben-zhi-lu</id>
    <content type="html"><![CDATA[<p>时隔2年多又出国旅游了一次。这次旅行的地点是日本。</p>

<p>尽管中日关系略显紧张，但经济因素使得日本旅游方兴未艾。这次旅行同上次去意大利不同，
之前是跟团，这次因为准备的时间较充裕，所以选择了自己做攻略自由行的方式去游玩。
必须得感谢老婆，整个旅行的计划主要是她做的功课并成形的。</p>

<p>先说说对日本的总体感觉。其实应该说也只是局部的感觉，毕竟这次只是去了大阪 京都 奈良 东京几个地方，
但管中窥豹，形成印象已经足够了。概括起来，可以简要地变成下面几个关键词：</p>

<ol>
<li>干净</li>
<li>秩序</li>
<li>精细精确</li>
<li>先进</li>
<li>昂贵</li>
<li>物有所值</li>
</ol>

<p>整个日本是相当<strong>干净</strong>的，除了在奈良公园的土路上，我在那里呆了八九天，基本鞋子都是不沾灰的。衣服穿
2-3天依然还是相当的干净。在上海动不动就脏了，曾经以为是自己脏了，现在看来主要还是环境不干净。</p>

<p>日本的人很多，但并不让人觉得乱哄哄。整个社会极其有 <strong>秩序Â</strong> 和条理，也因此让人感觉足够的 <strong>安全</strong> 。
走在路上不用担心有人偷包，他们的超市或者药妆店也似乎根本不担心有贼的样子，马路上也没什么乱七八糟的
不稳定因素，十几年前的上海的治安也是远远不如的。至于各式的排队则更加有序了。顾客一般很自觉，即便
碰到不自觉的客户，服务人员也会坚持维护秩序，所以当地人基本没有破坏秩序的习惯，外来人员试了几次也就
习惯按日式规矩行事了。不像我们这边，客人就不说了，服务人员也不懂得在有人破坏秩序的时候他们是有义务
维护的，不然以后他们的工作只会越来越难越来越做的差。</p>

<p>受制于国土面积狭小同时又人口众多，日本人对任何东西控制的很  <strong>精细</strong>  可以说是被逼出来的。他们没有浪费的余地。
很多所谓的大寺，在中国可能只能被称作小庙了。但也因此，他们可以把小做精乃至做到极致，在服务水平方面，
这点尤其突出。同样的，在列车时间的精确性方面相信也很难有第二个国家能做到日本人的地步。</p>

<p>至于 <strong>先进性</strong> 则更是全方面的。从交通到建筑，到人的素质，到产品的品质，这个只有亲临过了
才能感受到。</p>

<p>所有的东西都是有代价的，日本达到上述优点同时也伴随着高物价。 <strong>昂贵</strong> 的物价是很令人震惊的。
尤其是谷物类和蔬菜类。那是上海的2-6倍了。而且味道并不怎么灵。同样是吃的，奶制品和巧克力等就和
我们很接近了。 日本的交通费也是很让中国人发指的。新干线500km要800元人民币了，速度还比我国的
高铁慢，而同样的距离我国只要200元左右就行了。整个高物价的代价就是他们的生活压力也很大，当然收
入肯定也很高，这样就更进一步会推高物价。</p>

<p>虽然东西很贵很贵，但一分价钱一分货，日本的东西倒也充分应验了这句话。最后让你觉得这一切还是物有所值的。
尤其是在上海的物价已经上升了很多之后。</p>

<h2 id="toc_458">主要的行程</h2>

<p>第1天<br>
大阪<br>
关西机场、难波、海游馆</p>

<p>第2天<br>
大阪<br>
天守阁，历史博物馆，心斋桥、biccamer、苹果专卖店</p>

<p>第3天<br>
大阪<br>
环球影城、道顿崛</p>

<p>第4天<br>
京都<br>
京都站、清水寺、二年坂、三年坂</p>

<p>第5天<br>
京都<br>
岚山、嵯峨野观光小火车、天龙寺、锦市场、蟹道乐</p>

<p>第6天<br>
奈良<br>
近铁交通、春日大社、奈良公园</p>

<p>第7天<br>
京都 东京<br>
伏见稻荷大社、新干线、鸟元</p>

<p>第8天<br>
东京<br>
川崎、藤子F不二雄博物馆、三鹰吉卜力美术馆</p>

<p>第9天<br>
东京<br>
羽田机场、利木津机场巴士</p>

<p><a href="http://bbs.qyer.com/viewthread.php?tid=931893&amp;page=1&amp;extra=#pid9177702">旅游的详细链接</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IT系统架构的模式]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/04/12/itxi-tong-jia-gou-de-mo-shi/"/>
    <updated>2014-04-12T16:18:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/04/12/itxi-tong-jia-gou-de-mo-shi</id>
    <content type="html"><![CDATA[<p>近日终于得以拜读了Martin Fowler的大作《The Patterns of Enterprise Application Architecture》。</p>

<p>最早了解这本书是从robbin那里，在距今很多年前的一个Java书单里。彼时他对这本书的评价大意是适合要自己动手开发框架的人看，对应用开发没什么直接的帮助。同时，他认为读下来并没有太多感觉。而回过头来看，读过这本书的中国程序员应该是不少的，但真的从中汲取营养做出东西来的人几乎没有。从这也可以看出中国工程师在动手和创新方面确实有些先天不足。</p>

<p>然而，这本书对于DHH、对于Rails则可以说是一切的开端。对这本书贯彻的最到位、突破的最有力的，非DHH用Ruby开创Rails莫属。本书成书于2002年，彼时企业应用这个称呼比较时髦，按作者的说法，他的本意是IT系统的架构，而这也符合后来软件架构所适用的范围。如病人记录、订单跟踪、信用系统、保险、汇率兑换，这些都是IT系统，也就是企业应用。而文字处理、电梯控制、交换机、编译器、操作系统、游戏则基本不能算作企业应用。只是，2002年之后，企业应用这个名字被用的烂了，反而成了大慢笨的代表，导致07/08年的时候，甚至有不少人认为Rails不适合做企业应用。但彼时我感觉Rails对这些简单的所谓企业应用才是大杀器，毕竟大部分企业应用其实就是重度的CRUD应用，而这方面Rails堪比马克沁机枪对单兵的作战效果。至于互联网类的Web应用，交互、设计是占大头的，Rails投入使用的实际效果反而不如企业应用那么明显。</p>

<p>这本书确实是rails的设计指南，或者说是rails的设计文档。但DHH的突破和创新之处还是很明显的：</p>

<ol>
<li>本书是基于.Net 和 Java的，但提及了Python和Ruby，而作者更多的应该只是一种不抱希望的假设罢了，然而DHH真的用Ruby把这本书实作了出来。</li>
<li>虽然ActiveRecord取自于本书，然而作者本身并不是把这种模式看成一种自动化的ORM方案。广义的ORM，可以包含Dao(Table Gateway)、Data Transfer Object（json，xml）以及datamapper这些把记录化作内存对象所有模式，但狭义来看ORM是仅包含datamapper的。ActiveRecord在Fowler处其实只是一种Dao的变种。而DHH直接将ActiveRecord升格成了更高度自动化的ORM模式。</li>
<li>在视图层，坚决使用了Helper模式，未加入标签也未停留在scriplet阶段。</li>
</ol>

<p>对我而言，遗憾的一点是很晚才真的读了这本书，不知是喜是优的是因为晚读所以对这本书的内容很认可，而聊以自我安慰的是如果早读了说不定我也能
创造点什么东西，当然，最后一点纯属自娱自乐。<br>
不过，这本书以及Rails，确实定义了过去10年Web开发的发展方向。因为Rails框架实际上已经成为了Web后台框架的一个标杆，
例如Spring MVC现在走的也是类似的道路。所以，这本书确实深深影响了Web应用的开发。</p>

<p>还有一点值得一提，就是这本书是真的基于Web总结的。很多模式的书籍，其实来源于客户端界面程序，比如从做菜单中提取出来的那些模式，而本书
是基于Web的，这就使得它和很多模式的书籍很不一样了。也因此，它才可以作为Rails的设计蓝图。而所有这些模式，大都来自于实践。实际上，
至今Rails也是Web开发优秀实践的最佳代表。而且Web开发的实践模式也不止书中提到的这些，实际上了解这些模式最好的方法就是接触Rails。虽然现在的模式比本书包含的更多了，本书依然很值得推荐阅读。</p>

<h2 id="toc_451">笔记整理</h2>

<p>业务逻辑其实是业务反逻辑： complex business illogic </p>

<h3 id="toc_452">分层的坏处</h3>

<ol>
<li>级联变更（Cascading Changes），就是改了一个地方往往要改n个地方</li>
<li>性能损害</li>
</ol>

<p>三层模型之所以能够流行，也是因为Web的流行。Client-Server工具中，是很难实现三层配置使用的。不过如今的App开发，好像也是三层模式。<br>
但总体而言三层模型的流行是Web和Java等崛起的后果。</p>

<h3 id="toc_453">常见的业务代码组织形式</h3>

<ul>
<li>Transaction Script<br></li>
<li>Domain Module , OO对TS的改变<br></li>
<li>Service层</li>
</ul>

<h3 id="toc_454">会话状态</h3>

<ul>
<li>客户端 Cookie</li>
<li>服务端（内存）</li>
<li>共享服务端（数据库 Redis Memcache 共享文件夹）</li>
</ul>

<h3 id="toc_455">分布式</h3>

<p>i
* 不要把不同的功能（对象）组件放在不同的服务器上，这样性能有问题
* 进程间只能尽量使用粗粒度接口，如N+1一次性读取同时返回很多信息
* 同一台服务器内部使用细粒度调用，远程外观模式<br>
* Data Transfer Object ，传输对象，上面的那种是调用方法
* 同步的接口为主
* 异步的基于消息的处理方式
* 推动你思考而不是代替你思考，最终享受乐趣的是你，承担痛苦的也是你</p>

<h3 id="toc_456">锁的种类</h3>

<ol>
<li>乐观锁，比如自己建立版本号；</li>
<li>悲观锁，就是常见的for lock；</li>
<li>粗颗粒（coarse-grainned)锁，就是一堆对象映射成一个入口，在入口处实施加锁；</li>
<li>隐含锁，把锁加到框架里，由Lock Manager和Lock Mapper来实现<strong>模板方法</strong>。</li>
</ol>

<h3 id="toc_457">Stub和Mock</h3>

<p>Stub：用一个类直接替换某接口的实现，在测试或开发过程中使用这个替换类<br>
Mock：用一个服务的重写来模拟某服务  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IBM的Linux和Google的Android]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/04/12/ibmde-linuxhe-googlede-android/"/>
    <updated>2014-04-12T16:18:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/04/12/ibmde-linuxhe-googlede-android</id>
    <content type="html"><![CDATA[<p>琢磨了一下Google当初为什么要推安卓，随手记之。起初感觉Google正在成为一个类似SUN的角色，而安卓就是Java。<br>
二者的相似之处在于，java和安卓都给世界带来了很大的改变，借助这两样神器都出现了新的行业分支，如Java的企业应用、电商、网银等，安卓的出现才使得中国国产手机大幅度地进步，并在全球化的体系里占据更有优势的地位。但与此同时，不可否认的是，Google和SUN并未从中获得多少直接的收益。还有一点类似的地方，就是这两样神器也并不占用这两个巨头多少成本。相对于整个规模而言，无论是java还是安卓，对SUN或Google的成本比例都是有限的。</p>

<p>然而，转念一想，Google和SUN其实又是完全不一样的。SUN推广Java是希望卖更多的自己的硬件服务器，而且这个思路在90年代中期基本是可行的。而Google的服务现在如日中天，推广安卓确保了他在移动互联网时代（我更愿意称之为终端和使用人群进一步扩大的互联网时代）依然是搜索业务的王者。所以，仅就结果而言，Google是成功的，而SUN确实是被釜底抽薪了。</p>

<p>相比较而言，Google推安卓的动机和效果都更类似于90年代末IBM对Linux的扶持与推广。所欠缺的可能就是IBM没有收购Linux, Linus也没成立一个Linux的公司。<br>
IBM借助Linux，抵挡的目标是M$，使得Windows难以在低端的PC服务器上一统江湖。而Google的安卓，则让智能手机避免了被Apple一家独占。而在此成功狙击的基础上，IBM和Google都继续卖着自己已经处于优势地位的服务。而再看SUN的话，当时的Java并无直接的竞争对手，后来的J2EE也是如此。SUN的目标比较单纯，推广Java只是为了可以让更多的公司做互联网的网络服务，而这必然需要更多的服务器。在PC Server+ Linux未流行的年代，Solaris是较低成本的一种选择。这个算盘其实打的还是不错的。但是，IBM大神对Linux的扶持，彻底让Sun的硬件找到了更廉价也更类似的替代品。当大部分用Java的企业，不去问Sun买Solaris服务器而是选择问IBM HP Dell买硬件、软件则直接使用Linux时，SUN的Java就真的只是当活雷锋了。可能IBM的本意未必是干掉SUN，只是希望M$不要也在服务器市场形成垄断，如同Google只是希望不要苹果在智能小型终端一统天下，但不可避免地误伤了SUN。当然，SUN的倒掉肯定还有其他更重要的因素，毕竟竞争和替代品是市场经济下每个个体和公司都面临的现实。</p>

<p>而IBM和Google的举动，毫无疑问都是成功了。IBM的PC服务器业务虽然卖给了联想，但至少也风光了十几年，而服务则继续在大卖。如果当初M$用windows统一了PC Server，那恐怕IBM现在也没服务好卖了。Google则在移动互联网时代，继续当着搜索的领袖，苹果在无法一统江山的情况下，也只能让Google继续保持是最重要的终端搜索引擎。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小米的红米]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/04/07/xiao-mi-de-hong-mi/"/>
    <updated>2014-04-07T16:17:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/04/07/xiao-mi-de-hong-mi</id>
    <content type="html"><![CDATA[<p>尽管红米电信版在小米网站是一直没抢到，但在电商的站点倒有不少已经上市的，只是贵200左右，为了赶上老妈的生日，还是直接去电商渠道购买了。</p>

<p>中间还有个插曲。原本是想在京东定的，然后要定了京东告知上海缺货。而在苏宁，反而发现还比京东便宜100，只要899. 当然，比小米官方的原价却又贵了100.但这个不用抢，就不是期货更不是神话了。</p>

<p>机器确实很新，3月底才新鲜出炉的。但拿到手后不得不有下面一些吐槽：</p>

<ol>
<li>cdma卡槽标记不明显。打开机盖后，只在很不显眼的地方能看见很小的cdma和gsm字样，除非凑到10公分以内，不然很难看清楚哪个是gsm哪个是cdma的卡槽。而且，在说明书上是完全没有标识的。</li>
<li>部分卡识别不出来，虽然是标准卡但可能还是要换卡。手头两张大卡uim，只能识别一张，于是不得不去营业厅花20换卡。要知道，我之前用努比亚z5s，虽然只能插小卡，但自己剪了一下就能用。而这个虽然也是大卡，但却不能用。想想也挺讽刺的。网上查了一下，这个也不是个案。可能只能说uim卡的标准比较古怪吧。好在换了2014版的uim卡也能认。</li>
<li>后盖很难开。这个可能习惯了就好。不过对于一个可以更换电池板的手机而言，确实不太方便。</li>
</ol>

<p>其他其实还有一些细节方面还是可以改进的。往好处想，小米其实还有提升的余地，毕竟这些是我这个不太挑剔的人都能直接发现的毛病。</p>

<p>整个手机的质感比较一般，很类似于多年前买的台电的mp3，从塑料到面板都很像，中国制造还需努力。当然，这也是一分价钱一分货，努比亚Z5S的接触材料的质感就比红米好多了。</p>

<p>此外，也用了下小米的rom软件，因为用的时间也不算长，主要只是教会老妈使用，感觉并不比中兴的强，可选的主题倒是比较多，但这个对我来讲确实不重要。</p>

<p>说了那么多不足，其实我还是很喜欢这个红米手机的。毕竟好处更多。只是说小米的好已经铺天盖地了，对于安卓的好处我也很认可，所以也就不再多说了。虽然是借助安卓和高通，但小米好歹是开创了属于中国的智能手机制造时代。还是很令人钦佩的。</p>

<p>最后，感概一下，形势还是比人强。我一直很讨厌双模双待，认为除了费电没有半分好处。然而，现在c网适合数据、gsm只适合电话的现实、以及有宽带必有c网流量，使得使用双卡已经变成一种很平常的行为。和我讨厌双网双待有一个最大的区别，彼时所谓双模只能用来打电话，而如今数据和电话确实已经是两种需求了。而且，数据业务确实基本不需要你告诉别人你的手机号。所以，c网数据、g网维持语音业务，也是当前比较合适的一种模式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[当代中国和威廉德国的一个相似点]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/03/16/dang-dai-zhong-guo-he-wei-lian-de-guo-de-ge-xiang-si-dian/"/>
    <updated>2014-03-16T15:15:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/03/16/dang-dai-zhong-guo-he-wei-lian-de-guo-de-ge-xiang-si-dian</id>
    <content type="html"><![CDATA[<p>前一阵子有些媒体把崛起的中国比作同样是100多年前崛起的威廉德国。起初听到这种比喻，只觉得有点好笑。别的不说，如今风靡中国的BBA（奔驰 宝马 奥迪）都是威廉德国时代诞生的，就这几个跨世纪的杰出企业就是中国目前根本连门都摸不着的。至于发明家、工程师、企业家、科学家方面，那差距就不是一般的大了。中国可没有那么领先和尖端的人物和组织啊。而在军队方面，威廉拥有的德意志基石，普鲁士军队，恐怕我国能有一个营那样的队伍都很难。</p>

<p>但是，在看完了哈夫纳对俾斯麦德国和威廉德国的对比后，发现现在的中国有一点还真的和那时候的德国很类似。即国民的心态。</p>

<p>俾斯麦时期的德国人，并不认为自己的国家有多么先进。反而是崇拜法国人的东西。然而随着威廉时代的技术发展，尤其是内燃机取代蒸汽机时代的到来，诸如BBA、博世、西门子、克虏伯这些企业，他们在科学、技术、经济上都成为当时的领先者。而此时，整个国民的心态就一直水涨船高。民族的自信心由此加强。在这一点上，如今的中国和中国人确实走在相同的道路上。当然，我们相对于德国并非是有多么先进，而是在多上面做文章。虽然各方面均算不上最先进的，也无法领导潮流，但依靠体量和低成本的优势，在经济总量上确实实现了崛起。加之08年以来的欧美金融危机，使得中国式的东西一下子找回了曾经失去的信心。</p>

<p>就因为这种心态的变化，我们不再否认自己固有的一些东西，不管是好的还是坏的。也意识到老外的一套其实也并不那么先进，更不一定就是对我们的发展是好的。究竟是好是坏还很难讲，不过自信心的提高肯定是好事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nubia Z5S]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/03/10/nubia-z5s/"/>
    <updated>2014-03-10T18:03:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/03/10/nubia-z5s</id>
    <content type="html"><![CDATA[<p>作为多年电信号码的手机用户，现在用的手机也有一年半了，实在等不起LTE上市，所以决定还是继续买3G的手机。</p>

<p>电信版手机的选择限制还是比较多的。目标最后定在2k以内的国产手机，这样的选择无非是小米3 华为p6 努比亚等几种。一开始，想买小米3.正好过完年，米3的电信版也出来了。无奈抢了两次都没抢到，于是最后还是选到中兴华为的机型里面。</p>

<p>尽管p6的样子更好一些，但海思的芯片实在不讨人喜欢；而努比亚z5s的芯片倒是高通的旗舰，品质绝对有保障。最终，还是重视内在胜过了外观，选择买了z5s。</p>

<p>包装红白配，手机红黑配，设计倒是挺简洁的。
配件很节约，只有一个充电电源和一根充电线。但安卓好歹这么些年来，usb的接口都是一致的，所有的线都可以通用。比起水果一两年换个接口，明显更符合我的口味。
这个取卡针，不得不说和苹果真的很像。
单手持机的话，手感还是很轻巧的，整个重心控制的感觉很好。当然，5寸的屏幕还是大了些，操作起来就要双手了。响应等确实很快，顶配的CPU和大内存确实使得系统很流畅。</p>

<p>手机的背面。摄像头确实突起来一些，我个人倒不是很敏感这一点。贴纸有点山寨，过一阵打算揭掉。顺便提一下，这个贴纸写的cdma2000和wcdma手机，但手机本身又是所谓支持td-scdma的，所以显然写的有问题。</p>

<p>不想买micro-sim就是不想剪卡，但买了之后，发现其实剪卡只要掌握一定的门道就很简单。尤其是我这张3对6接触点的sim卡，那是相当的好剪。上面这个是要剪的卡，芯片所占面积本身就极小。</p>

<p>只要判断准自己的卡是3对6触点还是4对8触点，然后找相应的尺寸攻略，打好样后照着剪就万无一失了。
用铅笔打好样，直接剪好放进插槽即可。</p>

<p>之所以最早看中小米，是由于这3个里面，小米和努比亚都是支持全模，在国外也能用w的数据网络；华为的电信版在国外只能用语音。而华为的特色是双待，这一点和红米类似，但我只有一个号,双待对我而言意义不大。小米支持标准的sim卡（其实是mini-sim）而努比亚和p6都只能是小一点的micro-sim，外加电池好不少，这才让我起初倾向于小米3. 但一直买不到的感觉就不太好了，毕竟一个手机都买的这么累有点被厂商牵着鼻子走了。然而手机的选择还是很多的，所以试了2次之后决定转型，现在发觉nubia确实很不错。</p>

<p>鲁大师的跑分结果很高。高通的CPU果然不让人失望。</p>

<p>自从Google发布了安卓，中国手机厂商的春天就来了。虽然整个模式讲穿了只是之前HTC做过的那种：系统依靠移植，芯片主要也是依赖外部的，国产厂商主要做的还是一个集成加制造的活。但玩的比HTC有声有色的多。中国制造的性价比优势尽情展现。</p>

<p>尽管整体相当满意，但电池确实有点不太经用。这个2000ma出头的电池，如果整个下午都用qq聊天的话，基本上半天电就要用光了。所以，买这个机器移动电源最好是要配一个的。z5s的电池是不能随便更换的。自从用上智能手机后，我以前的手机上两块电板轮流用的机会也不太多了。目前比较方便的还是配个移动电源。</p>

<p>自从改用了C网，或者说自从智能手机开始普及，更换手机的频率一下子提高了。C网之前，老式的手机通常可以稳稳地用2年以上。而用上智能手机尤其是C网的智能手机后，更换频率基本在一年以内了。上一个华为8812还算是使用时间比较长的。不知道Nubia Z5S可以保鲜几年？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书列表2014]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/03/02/to-read-list/"/>
    <updated>2014-03-02T09:39:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/03/02/to-read-list</id>
    <content type="html"><![CDATA[<h3 id="toc_447">技术类</h3>

<ol>
<li>[x] <a href="http://octopresszhangyu.herokuapp.com/blog/2014/04/12/itxi-tong-jia-gou-de-mo-shi/">Flower M. Patterns of Enterprise Application Architecture</a>, Addison-Wesley Professional. Rails诞生的书，<a href="http://signalvnoise.com/posts/3375-the-five-programming-books-that-meant-most-to-me">DHH最爱的五本编程书籍</a>，可以说这本书支撑了rails的诞生，是rails基础架构的功能定义。DHH的突破之处在于他用Ruby实现了里面的很多可选择的模式，甚至他还是为FRW画了草图。</li>
<li>Learning Jquery.</li>
<li>Resig, 精通Javascript.</li>
<li><a href="http://rubyrogues.com/097-rr-book-club-patterns-of-enterprise-architecture-with-martin-fowler/">PoEAA的访谈和DHH</a></li>
<li>曾宪杰. 大型网站系统与Java中间件实践. 2014.</li>
<li>FRW,Beck. Refactoring: Improving the Design of Existing Code,1999.</li>
<li>Eric Evans. Domain-Driven Design.<br></li>
<li>Beck. Smalltalk best practice patterns, 1996.</li>
<li>Donald C. Gause, Are you lights on? 1990.</li>
<li>张昊，Linux Shell编程从入门到精通。<br></li>
<li>Core Java。有必要更新一下。<br></li>
<li>Gourley D, Totty B. HTTP权威指南 O’Reilly<br></li>
<li>Shash D, Lazere. Out of their Minds: The Lives and Discoveries of 15 Great Computer Scientists<br></li>
<li>谭云杰,大象–Thinking in UML，水利水电<br></li>
<li>谢希仁.计算机网络，电工</li>
</ol>

<h3 id="toc_448">经管</h3>

<ol>
<li>[x] 汽车和我 皮耶希自传。伟大的保时捷家族，皮耶希是发明家保时捷的女婿，而作者是皮耶希的后人，后来成为了大众的老总。<br></li>
<li>[x] 汽车文化。<br></li>
<li>[x] 汽车工程学基础。 上面两边都是汽车构造及文化的基本入门读物，可以填补较大的知识空白。明白汽车的基本构造原理和发展脉络。而对汽车人物的描述则很有特色和启发。让人感叹的是，很多德国的发明家，如奔驰、戴姆勒，他们既是优秀的工程师，但同时也是成功的设计师和成功的企业家。这方面德国人确实一枝独秀。另外，其他国家的汽车杰出人物不是发明家就是工程师，至少也是一个企业家。但中国的汽车代表人物却是官员。<br></li>
<li>[x] 海斯勒，寻路中国，上海译文. 十分接地气的一本书，同时也相当的深刻。尤其是当一个中国人读来时，颇印证了横看成岭侧成峰，局外人更容易揭露事实的真相。
可惜出版的还是晚了些。另外，只是country，没有城市，这一点相当遗憾。更确切的名称应该是中国乡村寻路。</li>
<li>余江，韦尔奇，Winning（赢），中信<br></li>
<li>曾志尧, 35岁前要上的33堂理财课,中信<br></li>
<li>李笑来，把时间当做朋友<br></li>
<li>蔡康永，说话之道<br></li>
<li>高盛如何算赢世界<br></li>
<li>The Intelligent Investor<br></li>
</ol>

<h3 id="toc_449">历史文化</h3>

<ol>
<li>[x] 唐德刚，晚晴七十年。幽默的文笔简直就是郭德纲，看问题的深度和广度进一步让人叹为观止，而且联系当代史更是妙趣横生。作者学识、经历造就了这本书。<br></li>
<li>[x] 唐德刚，xxx专政始末。 相对比较一般。<br></li>
<li>[x] 哈夫纳，从俾斯麦到希特勒。又一本颠覆国内常见历史观的作品。作者对普鲁士、德意志以及大德意志进行了十分到位的区分和分析。俾斯麦首先的普鲁士的宰相，其次才是德国的首相。所以，以他的角度而言，德国是为普鲁士服务的，即普鲁士支配整个德国。而彼时德国的版图（第二帝国），他认为已经足够。但是，德意志人则希望借助普鲁士，主要是普鲁士的军队，继续对外扩张。而这在俾斯麦看来其实就是普鲁士去为德国流血了，明显违反了他的初衷和立场。而大德意志的代表非希特勒莫属。首先因为他是一个奥地利人，在俾斯麦规划的德意志中希特勒根本就不是德国人。但希特勒作为德意志人，梦想就是建立大德意志，所以不但“回归”了奥地利，还把周边国家一系列有德意志人的地区，比如苏台德，都并入了德国。而普鲁士的容克们就开始为希特勒服务了。时至今日，德国依然在究竟是让德国支配欧洲还是让德国服务欧洲之间纠结。但像俾斯麦和希特勒这样的杰出人物当今是空白的。</li>
<li>[x] 哈夫纳，<a href="http://octopresszhangyu.herokuapp.com/blog/2014/05/03/pu-lu-shi-bu-han-chuan-shuo/">不含传说的普鲁士</a>。台版书的竖版读起来有点累，不过效果还行。值得反复阅读的图书。</li>
<li>[x] 权戏。</li>
</ol>

<h2 id="toc_450">既往</h2>

<p><a href="http://octopresszhangyu.herokuapp.com/blog/2013/01/11/to-read-list/">2013读书列表</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[锥轮、液压传动和CVT]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/02/15/zhui-lun-ye-ya-chuan-dong-he-cvt/"/>
    <updated>2014-02-15T11:21:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/02/15/zhui-lun-ye-ya-chuan-dong-he-cvt</id>
    <content type="html"><![CDATA[<h3 id="toc_442">锥轮</h3>

<p>锥轮其实就是两个圆锥形的转筒，细细的皮带（钢带）每时刻的转动都类似在做圆周运动，但累计的变化多了，圆形就逐步缩小了。所以这种东西的长处在于可以动态地改变转圈的比例。皮带在哪个部位滚动，则是通过液压圆盘的前后移动来实现，类似于抽取出来。</p>

<p>CVT变速箱就是用了两个锥轮，两个锥轮一个是主动轮，接发动机的输出；另一个是接轮胎传动一头的，由主动轮带动，称为从动轮。主动轮和从动轮的液压盘向一个方向运动，从而使得皮带的长度不会被牵拉或缩短。而锥头到锥底之间的各种圆，就提供了连续的转圈比例。相对AT是跳跃式的，CVT就这样实现连续了。</p>

<p>这个截图很好的说明了他们之间的关系。</p>

<h3 id="toc_443">液压传动</h3>

<p>液压传动则是很多AT包括CVT使用的技术。其特点是化手动的硬结合为软结合。通过液体的流动实现涡轮和导轮之间的动力传递。从而可以实现从静止到低速的平稳起步，因为这本身就是一个软的过程，不像手动的离合器就是直接接上了。在加速过程中，也可以相对平稳地增加输出。</p>

<h3 id="toc_444">行星齿轮和AT</h3>

<p>其实对于AT来讲，核心的东西是行星齿轮，这个东西确实挺酷的，但也是第一次了解有这种神器存在。行星齿轮有点用多项式来模拟锥轮这种连续曲线的转速比的意思，4AT模拟4个点，6AT 8AT一路可以模拟的更多，再多一些就也能实现基本连续的变速了。连续的好处是动力损失小，而AT本身的优势是档位切换快速、技术也成熟。相对而言，锥轮最大的问题就是皮带打滑，不如4AT这样那么成熟了。</p>

<p>AT的技术较CVT成熟，6AT以上的效率损失就不高了。但是，档位越多的AT体积越大、重量也越重、制造成本也高，所以比起8AT，CVT反而是廉价的技术了。另外就是CVT无法适应大功率的发动机。所以3.0以上排量的用的就比较少了。大排量上还用CVT的主要就是日产公司了，CVT也可以说是日产的一张王牌。不过日产现在高级的CVT变速箱里面，也加了行星齿轮，严格的说是行星齿轮和锥轮结合的产物。大众奥迪在A4和A6上使用CVT也挺常见，但高功率版本的就是双离合和手自一体的天下了。</p>

<h3 id="toc_445">变速箱的意义</h3>

<p>说一千道一万，变速箱提供了转速比的灵活，使得油耗、传动能适应多种情况。现实中，起步、低速、高速、倒车时确实需要不同的发动机工作效率和传动比例。如果是定一个转速比的话，额外的开销就有点大了。</p>

<p>从作用上来说，汽车的变速箱就是高级自行车上的飞。其实一般的平车都是不带飞的，链条链接的圈圈的尺寸是固定的。这一来是自行车这么开开也确实够了，而且自行车本身就不需要支持倒档。高档的比赛自行车为了获取最佳的性能，也才增加了变速系统。但汽车的质量和时速都和自行车差别太大，所以变速系统基本是标配的了。</p>

<h3 id="toc_446">为什么超车需要降档</h3>

<p>主观感觉上，要提速应该放在高档。但实际上因为高档的传动比是低的，输出到轮胎上的力矩并不大。而加速主要需要增加加速度，即需要输出更高的力矩。而高速降档后，发动机的转速会迅速提高，比如从1500转提高到3000转，此时输出的力矩增加。而一般情况下要求的降档降速是为了让发动机慢下来。但如果此时反而加大油门，则发动机转速会进一步上升，输出力矩会进一步加大，也就可以获得更高的输出力矩从而获得加速度。</p>

<p>所以，降档有利于增加加速度，缺点是油耗会比高档位提速来的高。</p>
]]></content>
  </entry>
  
</feed>
