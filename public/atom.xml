<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2015-01-10T17:07:07+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[懂驾驶的还是德国人]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/01/10/dong-jia-shi-de-huan-shi-de-guo-ren/"/>
    <updated>2015-01-10T15:09:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/01/10/dong-jia-shi-de-huan-shi-de-guo-ren</id>
    <content type="html"><![CDATA[<p>再次踏上选车路，仔细研究了一下宝马X1，发现真懂驾驶而且为驾驶员造车的还是德国人。</p>

<p>以我开车下来的感觉，比较影响驾驶品质的主要是以下几点：</p>

<ol>
<li>动力： X1搭配是是2.0T的发动机，而日系的很多车还是1.8晃荡。</li>
<li>变速箱： X1搭配的8AT变速箱，其实6AT已经不错了，但日系4AT淘汰后上的是CVT，能用6AT的就谢天谢地了。</li>
<li>底盘： X1搭配的是老3系的底盘，调教功力很不一般，而日系的话，suv配的底盘都是低一级的，就算同级的其水平也是有差距的。</li>
<li>手刹：这方面有脚刹、电子刹车、手刹，但要说驾驶感觉好还属手刹，也就宝马还在坚持手刹了。</li>
<li>后驱：后驱前驱的好坏可能并不能完全说有利于驾驶与否，不过宝马偏执的前后配重50:50，则是后驱以及操控优先指导下才会有的产物。</li>
<li>雷达和倒车影像：宝马是重雷达，而影像很少配或者配了就很贵；用车之后发现影像的用处其实有限，远不如雷达有用。所以雷达配的到位，影像完全是可有可无的。而且X1还能选配前雷达这一我的最爱，这也是真懂驾驶者的表现。而除了天籁，日系其他车搭载前雷达的还真是少见。</li>
<li>胎压监测：宝马和很多德系车一样，胎压监测基本是全系搭配，这个在中国这样一个经常容易被扎胎的地方，那是相当的有作用，这个指标是很有用的。</li>
</ol>


<p>当然，金无足赤车无完车，同尊重驾驶者的需求做的好对比，在家用性等其他方面就有不足了。</p>

<ol>
<li>后驱带来了后座中间必然有一个高高的突起，导致后排实用性下降的很厉害。</li>
<li>防爆胎的使用有好处，比如爆胎之后能继续安全行使一段，从而保证安全。但是防爆胎基本不可补，而在中国实在太容易扎胎了，欧洲9万公里才扎一次，我们这边9千公里就要一次了，所以每次都更换必然导致防爆胎的使用成本那是很高很高的了。</li>
</ol>


<p>所以一比家用性，X1就不太行了。然而若讲对驾驶者的照顾和优待，必须得说还是德国人更懂做的也好的多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[又是新的一年]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/01/01/you-shi-xin-de-%5B%3F%5D-nian/"/>
    <updated>2015-01-01T15:06:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/01/01/you-shi-xin-de-[?]-nian</id>
    <content type="html"><![CDATA[<p>2015年已经到了，上一次回顾总结还是一年半以前，今天抽空总结一下。</p>

<p>这一年半里最重要的事情就是车车了。13年底拍了车牌，14年年初买了车，5月份开始
由岳父带教上路练习，国庆后开始自己开车上下班并接送老婆。既拼了运气，又花费了一笔，
更练习了技能。到现在，开车已经比较熟练了，也加深了对汽车的认识。最重要的是认识到：
汽车确实不是越大越好。小车在城市里，尤其是小区停车中，有着十分重要的灵活性优势。
同时车子大部分时间只是两个人代步的工具，所以很大的车子在95%的情况下并发挥不了作用。
当然，天籁车子本身确实比凯越好多了，光那份静音和舒适性就是凯越不能比拟的。</p>

<p>也因为买车、开车的关系，开始注意起汽车网站，主要就是汽车之家和新车评。这也是几十年来，
第一次认真的关注媒体人。尽管读报的习惯已养成多年，后来上网多了，阅读的报道是很多，但对
媒体人的关注就几乎没有。就像看了那么多年的sina新闻，但没有留意过一个编辑。而车媒则不同。
车媒上的文章往往让人不得不去关注其背后的编辑。原因可能在于车媒的编辑相对数量有限，题材又
往往类似，所以很容易让人记住并且会反复出现。而综合门户网站，引入了很多的内容，主题十分分散，
所以其上的编辑就很难留下印象。这个热度已经持续大半年，不知道什么时候会淡一些，因为现在花在这方面的
时间确实有点多。</p>

<p>除了买车，数码产品方面今年还买了点苹果的东西。Mac，iPad Air2都是今年新购置的。生日时老婆也送了我一个Nubia Z5S，
手机本身还是不错的，用下来也挺好。给台式机增加的浦科特ssd硬盘确实大大缩短了开机时间并减少了运行时的硬盘噪音。
刚入手的同样来自台湾的papago gosafe520则还在熟悉中。</p>

<p>不能忘记的是，这一年半花了不少时间进行手术，花费了很多假期，术后效果则很令人满意，确实舒服多了。只是自己还是没有
恢复体育锻炼，体重依然是个问题。这也是希望明年春天开始能有所突破的吧。</p>

<p>不过今年还是抽出时间，和老婆一起去日本玩了一次。实际上mbp、pad都是在日本购入的。汇率确实使得在那里购买变得很便宜。
而日本也真的是一个值得一去再去的地方。</p>

<p>生活方面另一个重要点就宝宝顺利健康地成长，即便中间去过几次医院，总体还算平顺。</p>

<p>工作方面领导和同事都很给力，我也尽好了自己的本分，对现在的工作成果还是比较满意的。很重要的一点是又
重新对Java Web的开发感兴趣，这主要归功于Spring MVC对开发效率的改善。而Java优秀的性能和广泛的人才基础确实更加强悍。
大规模的并发处理、使用redis的估算计数确实有很多值得玩味的东西。新的一年可能希望在一些平台方面有更多的接触。</p>

<p>2014让人心旷神怡的莫过于勒夫的德国队终于有冠了。作为一个德迷，这几年已经停幸福的。人才不断涌现，成绩也还不错。
勒夫的队伍各方面都没的挑。美中不足只是缺少大赛的冠军。而这次竟然在南美实现了欧洲球队夺冠，绝对令人感到意外。</p>

<p>看书方面则是海斯勒、哈夫纳、唐德刚的历史与现实的书籍。似乎读了哈夫纳之后，阅读能力见长。有些书还是值得反复读的。</p>

<p>至于新年心愿，最大的愿望当然就是宝宝顺利健康地成长，家人亲友都能平平安安。其次希望工作中能有更新的创造。
随后是希望能有一个自己的车位。最后是希望可以经常体育锻炼，体重得到下降。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 上折腾Ruby 2.2]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/12/31/mac-shang-zhe-teng-ruby-2-dot-2/"/>
    <updated>2014-12-31T21:23:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/12/31/mac-shang-zhe-teng-ruby-2-dot-2</id>
    <content type="html"><![CDATA[<p><strong>节日驱动开发</strong>再次发生作用，圣诞前夕，Rails和Ruby分布发布了新版本，4.2.0和2.2.0.
为此又开始了折腾。</p>

<p>先是在Ubuntu上安装了Ruby 2.2.0，一切都很顺利。Rails因为之前已升级到rc3的版本，所以再升上去就很容易了。</p>

<p>然后在mac上从源码安装新版ruby到rbenv下面。一开始也比较顺利，但安装完毕后执行<code>gem install bundle</code>报了
SSL的错误。Google一番，结论是OpenSSL需要升级，而<code>brew</code> 下面已经是最新的OpenSSL版本了，于是又说要更新brew。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew update <span class="c"># 更新brew</span>
</span><span class='line'>brew install openssl <span class="c"># 安装最新的ssl</span>
</span><span class='line'>brew link openssl --force <span class="c">#建立关联</span>
</span><span class='line'>brew install curl-ca-bundle <span class="c"># 这个执行是失败的，原因似乎是在2014年去除了</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后再次运行，问题照旧。后来发现是因为brew安装的ssl位于<code>/usr/local/opt/openssl</code>
下，而mac自带的有一个系统本身的ssl，ruby编译时会始终使用默认的ssl。
解决办法是建立link或者索性在configure时指定</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./configure --with-openssl-dir<span class="o">=</span><span class="sb">`</span>brew --prefix openssl<span class="sb">`</span> --disable-install-doc --prefix<span class="o">=</span>/Users/me/.rbenv/versions/ruby-2.2
</span></code></pre></td></tr></table></div></figure>


<p>其中，<code>brew --prefix openssl</code>可以得到通过brew安装的openssl的具体位置。</p>

<p>虽然不是什么高深的东西，但折腾起来还是挺麻烦的。也难怪现在Ruby on Rails的入门门槛越来越高，而且
很多都是被挡在配置环境这第一道关口。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Papago gosafe520 行车记录仪]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/12/28/papago-gosafe520-xing-che-ji-lu-yi/"/>
    <updated>2014-12-28T16:56:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/12/28/papago-gosafe520-xing-che-ji-lu-yi</id>
    <content type="html"><![CDATA[<p>算起来今年买的千元左右的台湾制造也不少，夏天时候买过一个浦科特的256GB SSD，然后就是去年年底买的这个Papago gosafe520行车记录仪。</p>

<p>从去年5月份开车之初开始，要不要买一个记录仪就让我很纠结。一方面，有个视频可以方便复盘，方便在有问题的时候还原真相，可以降低行车风险。
另一方面，很多人装了之后也确实长期没使用价值，而车上多装一个东西总是一件麻烦的事情。</p>

<p>随着驾驶操作逐步熟练，自己对记录仪的必要性是一天比一天认为不重要的。
开了几个月之后，觉得还是这样开吧，一般问题也不大。但是，在停车后发生的一些事情，最终促使我决定入一个行车记录仪，而且核心功能之一是可以支持停车监控。</p>

<p>很多朋友都知道，上海很多小区的停车环境普遍是比较困难的。而我们小区更是这方面相当出名，每隔几年就能上一次上海本地一线报纸的普通版面。我实际停了之后发现，真正容易刮花车子的，反而是小区的垃圾工和垃圾车。在跟物业交涉的时候，有视频做证据会较有利些。
所以就决定装一个记录仪，可以给自己多一份保障。</p>

<p>在决定购买之后，又面买什么的问题。之前纠结的一部分原因，就是记录仪真的是一个让人眼花缭乱的市场。并没有众望所归的王者，各种标准也不规范，指标也比较混乱，整个市场其实还在飞速发展中，产品更新换代的节奏很快。
具体表现在缺乏大牌与领导厂商，山寨横行。产品更新换代迅速，价格跳水事件常见。最后考虑了牌子和芯片，决定还是入了Papago搭载安霸A7芯片的Gosafe520. 选择的原因是安霸看各类报道相对头牌一些，Papago毕竟在这个市场做了挺多年，价钱也可以接受。</p>

<p>Gosafe520主要有以下几点特性：</p>

<ol>
<li>安霸A7的芯片</li>
<li>价格千元以内</li>
<li>视角146°</li>
<li>3寸屏幕</li>
<li>最高支持2560x1080分辨率</li>
<li>内置重力传感器，可记录紧急事件</li>
<li>内置500ma电池，据称无电池爆裂风险，耐高温</li>
<li>可用充电宝实现夜晚连续监控</li>
<li>具备移动监测功能，这个对连续监控很有用，不然32GB的卡也存放不了一晚上的数据</li>
</ol>


<p>使用下来后，其实在动态前进的过程中，要拍清楚前车的号码还是一件不可能完成的任务。在等红灯停车和速度一致时才能拍的清楚。
只能留待以后的技术发展和进步了。而配合10000ma的充电宝，基本可以支持20小时以上的的持续监控，也算达到购买的初衷。吸盘使用了十来天，也还算吸的牢靠，搭配usb线夹入右遮阳板，就算吸盘松了靠线材也不至于掉到地上。</p>

<p>不好的方面则是夜里还不够清晰，动态前进的拍摄效果还是有待提高。最高目标是能拍清楚对向来车的车牌。（不知道现在有没有已经做到这一点的产品？）
tf卡只支持32GB的还挺可惜的，毕竟现在32G的卡只要60元左右，而在这个记录仪的使用周期里，64G甚至128G卡的价格应该会下来也就能够普及，而520以后也是无法插这些卡的。送的usb线也有点短，而且非用mini usb口也有点蛋疼，和安卓的micro usb兼容应该不难的吧。另外就是自带电池的话，在夏天还是一个隐患，好在现在是冬天意味着我至少可以先用上半年。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring中的CRON]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/12/28/springzhong-de-cron/"/>
    <updated>2014-12-28T15:12:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/12/28/springzhong-de-cron</id>
    <content type="html"><![CDATA[<p>在<a href="http://octopresszhangyu.herokuapp.com/blog/2014/09/11/webrong-qi-zhong-tong-guo-springtian-jia-jobren-wu/">Web容器中通过Spring添加Job任务</a>一文中，
已经提过在spring中增加例行任务。只是当时提交的任务仅限于间隔一段时间后执行，比如每分钟执行一次，因此使用
<code>period</code> 和 <code>delay</code>两个参数就够了。</p>

<p>这次新遇到的需求是要求定点执行，比如固定在夜间23:30启动，这时候就需要cron了。好在Spring 4.0版
开始已经支持cron，配置起来也很简洁。</p>

<p>首先，在<code>spring-mvc.xml</code>中增加要定期执行的类作为bean，作用是把要定期执行的类交给spring扫描</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;LastDayDevicePackorderlogRefreshTaskExecutor&quot;</span> <span class="na">class=</span><span class="s">&quot;com.sanss.toolbar.job.LastDayDevicePackorderlogRefreshTaskExecutor&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其次，在这个类上使用标注<code>@EnableScheduling</code>，让spring意识到这是一个定期调度启动的任务。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@EnableScheduling</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LastDayDevicePackorderlogRefreshTaskExecutor</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后，是在具体要启动的method上标注<code>@Scheduled(cron = "0 * * * * *")</code>，以此给出具体的执行安排。<br/>
标注中cron的具体含义可以见下面的注释。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * 一个cron表达式有至少6个（也可能7个）有空格分隔的时间元素。</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * 按顺序依次为 秒（0~59）</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * 分钟（0~59）</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * 小时（0~23）</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * 天（月）（0~31，但是你需要考虑你月的天数）</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * 月（0~11）</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * 天（星期）（1~7 1=SUN 或 SUN，MON，TUE，WED，THU，FRI，SAT）</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * 7.年份（1970－2099）</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Scheduled</span><span class="o">(</span><span class="n">cron</span> <span class="o">=</span> <span class="s">&quot;0 * * * * *&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// TODO Auto-generated method stub</span>
</span><span class='line'>  <span class="c1">// doit();</span>
</span><span class='line'>  <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;定期触发&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Passionate Programmer]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/12/21/tpp/"/>
    <updated>2014-12-21T17:21:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/12/21/tpp</id>
    <content type="html"><![CDATA[<p>中文翻译是《我编程，我快乐&#8211;程序员职业规划之道》。在陪老婆做头发的过程中，看完了这本书。
本书还有一个更大名鼎鼎的名字：My Job Went to India。整本书其实更确切地说是如何
追求成为卓越的软件开发者。中文名字起的其实有点文不对题。</p>

<p>书中比较有意义的是提到了程序语言的选择是一种投资，低风险必然低回报，而高风险可能高回报也可能
无回报。所以对于选择小众还是大众化的区别和结果给了完整的分析。
而同时，对于继续在大众语言中立足的开发者而言，作者提出来因为需求的提高，初级程序员会增多，
而对高级开发者的需求也会因此增强。也算是给高级开发者指明了出路。此外，作者也区分了经理和
带路人的区别。经理的职责并非是替补，事实上经理的主要职责是确定事情的优先级，保证部门的运行
效率等。这也是管理真正的目的。</p>

<p>整本书读起来还是比较轻松的，首先当然是因为这本书确实很薄。其次，书中很多内容也确实和我一直
以来做的差不多。其实对于小公司工作的人来讲，书中提到的做法也几乎是一种自然而且必然的选择。</p>

<p>而保持激情一切一切的关键在于当代社会确实需要软件，也确实需要程序员。同时由于
软件开发者智力劳动的属性，注定必须强调自我驱动，很难完全规范化和流水线化，因此从业人员的能力对产出
也会产生极大的差别化结果。
 所以在这个时代，安心地当个软件开发者还是有出路且挺幸福的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[独一无二者计数问题（ count-distinct）]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/12/17/du-%5B%3F%5D-wu-er-zhe-ji-shu-wen-ti-%28-count-distinct%29/"/>
    <updated>2014-12-17T16:14:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/12/17/du-[?]-wu-er-zhe-ji-shu-wen-ti-(-count-distinct)</id>
    <content type="html"><![CDATA[<p>最近分析一个大日志文件，9亿条记录近300GB的数据。终于体会到一点大数据处理的意思。</p>

<p>之前根据日志，统计出里面各个域名的pv还算简单。为了开发方便，利用了Redis，开10个java线程，分别扫描不同的行，并把domain做关键字写入redis并不断计数，最后从中读出全部的值并排序。
整个过程主要开销在扫描方面。此时瓶颈出在redis上，基本上5个java线程可以把redis的cpu性能榨干。</p>

<p>9亿条数据分析出来了七十几万个域名，而redis处理70w个key，消耗的内存在100MB以内，所以整个运行跑上几个小时就能得到想要的结果了。</p>

<p>但是，客户进一步提出要分析每个domain下独立访问的用户数量是多少。这下子可就犯难了。
因为按照传统的做法，碰到需要计算独立用户的需求会建立一个集合，然后把标识往里push，最后获取一下这个set的大小，就可以得到独立用户的数量。
然而，如果对70w个域名都分别建立一张访问用户的set，则存储的开销实在太大。这意味着key-value的数量将是70w的几千甚至几万倍。
然后看了一下redis新增加的数据结构类型，发现redis中的hyperloglogs是为此种任务而生的。</p>

<h2>HyperLogLog和count-distinct problem</h2>

<p>建立一个集合并把数据放入，最后计算集合的大小是一种精确的求值方式。而HyperLogLog则是一种会损失一些细节但可以获得很好的近似值的估算方式。</p>

<p>这种算法的核心思想就是MD5+Bitmap。通过某种Hash算法，比如MD5，可以把千变万化的取值收敛成有限的值，而因为这些值也很大，所以可以认为重复的比例会很低。然后，应用Bitmap来表示这些映射结果是否已存在，最后就是计算这个Bitmap中已存在值的数量。尽管损失一些细节，也不是完全精确，但结果是足够准确了。而经过Hash的收敛，再经过Bitmap的收敛，对空间的需求就会变得少了许多许多，也就可以应用于更多关键字的计数。</p>

<p>以我自己对某个域名按两种方式都运行后得到的结果，分别对比如下：</p>

<p>精确的：1687，估计的：1685<br/>
精确的：93869，估计的：94097<br/>
精确的：305084，估计的：305281</p>

<p>而这种方式最大的好处，自然就是对count-distinct这类问题统计起来毫无压力了,同时得到的数据也足够好用了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[并发的ab测试和校验码对并发状况处理的盲区]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/12/11/bing-fa-de-abce-shi-he-xiao-yan-ma-dui-bing-fa-zhuang-kuang-chu-li-de-mang-qu/"/>
    <updated>2014-12-11T21:55:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/12/11/bing-fa-de-abce-shi-he-xiao-yan-ma-dui-bing-fa-zhuang-kuang-chu-li-de-mang-qu</id>
    <content type="html"><![CDATA[<p>某个报障称我们的短信轰炸拦截无效，听到后感觉比较奇怪，因为此限制已经加上并且经过测试验证。
但提供的素材上，单个用户确实同时收到了多条短信。于是又检查了一遍代码，发现问题可能出在并发上。</p>

<p>限制的过程是这样的：</p>

<ol>
<li>取出session中的校验码并与请求中的参数进行比较，通过的进入第2步，如失败则直接进入第3步；</li>
<li>发送短信；</li>
<li>刷新校验码。</li>
</ol>


<p>而如果扫描软件获取验证码后，同时交给多个线程并发发起请求，因为第一步执行的速度较快，而下发短信的请求处理较慢，
极其可能在执行第3步之前，另外几个请求也都通过了第一步的检查，从而可以进行第二步。</p>

<p>然后就是要验证这种猜测是否成立。由于扫描软件并不是我的，所以需要自己模拟这个请求，而又由于一些陷阱，导致整个验证也
颇费了一番周折。</p>

<h3>第一个坑： ! 和 &amp;都是shell的特殊字符</h3>

<p>最简单的模拟无非就是ab测试（ApacheBench），</p>

<p><code>ab -c 5 -n 10  http://xxx.com/portal/get\!validate.action?user_id=1xxxx\&amp;verfiyCode=5614</code></p>

<p>但是，一开始并没有在!和&amp;前面加上转移符号，所以运行失败</p>

<h3>第二个坑： 需要提前放入session</h3>

<p>一开始并没有搞清楚shell执行ab失败只是因为缺乏转义符号，于是尝试使用编写客户端代码解决。首先使用了Java的Jersey，
因为手头一个项目最近使用这个也比较顺手。运行之后发现每次都是返回404的错误。而在浏览器中，即使验证码不对，也会显示
正确的jsp。换了一台机器后，发现自己犯了个低级错误，因为验证码是存放在session里面的，而Jersey的普通请求不会
带cookie上去，因此就得到了错误的响应。</p>

<p>于是想着给Jersey的请求加上cookie消息头。一番考察后，被告知Jersey原生态并不支持直接加cookie，于是决定还是换用
ruby的rest-client。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rest-client&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">jsp</span> <span class="o">=</span> <span class="s2">&quot;http://xxx.com/portal/&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">passportUrl</span> <span class="o">=</span> <span class="s1">&#39;http://xxx.com\!validate.action?user_id=1xxxxxx\&amp;verfiyCode=9813&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">s</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="no">RestClient</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">jsp</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@cookies</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">cookies</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@cookies</span><span class="o">[</span><span class="s1">&#39;JSESSIONID&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;74113695C0FB915393AE69DD63EAE088&#39;</span>
</span><span class='line'>  <span class="nb">p</span> <span class="vi">@cookies</span>
</span><span class='line'>  <span class="c1">#puts response.body</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>     <span class="n">response</span> <span class="o">=</span> <span class="no">RestClient</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">passportUrl</span><span class="p">,</span> <span class="ss">cookies</span><span class="p">:</span> <span class="vi">@cookies</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">response</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>手工填入浏览器中的校验码，运行正常。但ruby的单线程运行方式下，
模拟不出并发的效果，所以还是需要回到ab测试上。</p>

<p>最后的结果倒是很简单，给路径加上转义并添加cookie头即可：</p>

<p><code>ab -c 5 -n 10 -H "Cookie: JSESSIONID=74113695C0FB915393AE69DD63EAE088;" http://xxx.com/portal/get\!validate.action?user_id=1xxxx\&amp;verfiyCode=5614</code></p>

<p>这条命令基本上可收到5条短信，因为并发是5个。</p>

<h3>解决的办法</h3>

<p>最偷懒且管用的办法是使用<code>synchronized</code>关键字。需要注意的是两点：</p>

<p>第一， synchronized锁住的只是对象对应的代码段，所以适用于单例对象或者是static method。也可以通过
下面的方式，让锁住类对象来实现static的效果。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Controller</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二， 因为是只有一个线程可以执行代码，这个锁的影响还是很大的，所以要确保锁住的代码快足够小，操作足够快，
才不至于影响业务的性能。在此采用这么粗的锁，也是因为从session中验证校验码并删除是足够短的处理逻辑。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">synchronized</span> <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">validCode</span><span class="o">(</span><span class="n">HttpSession</span> <span class="n">sesson</span><span class="o">,</span> <span class="n">String</span> <span class="n">code</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;rand1&quot;</span><span class="o">),</span> <span class="n">code</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">session</span><span class="o">.</span><span class="na">removeAttribute</span><span class="o">(</span><span class="s">&quot;rand1&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>得到的教训</h3>

<p>部分业务逻辑在设计和实现时必须考虑并发的情况，尽管这个确实有点难度。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomcat7 采用 Redis作为session Store - 2]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/11/19/tomcat7-cai-yong-rediszuo-wei-session-store-2/"/>
    <updated>2014-11-19T15:57:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/11/19/tomcat7-cai-yong-rediszuo-wei-session-store-2</id>
    <content type="html"><![CDATA[<p>在<a href="http://octopresszhangyu.herokuapp.com/blog/2014/07/14/tomcat7-cai-yong-rediszuo-wei-session-store/">Tomcat7 采用 Redis作为session Store</a>中，使用了redis作为tomcat的session共享。
在打过几个补丁后，基本也算运作正常。只是偶尔总是有些null的session需要定期清理。而当时的作者已经近2年没再处理相关的pull request，所以我提交到了另外一个库中。</p>

<p>上个月发现作者又回来了，接受处理了一系列的pull request并且还增加了一些新的配置。于是做了一下更新。</p>

<p>原本提过需要3个包：</p>

<ol>
<li><del>tomcat-redis-session-manager-1.2-tomcat-7.jar</del></li>
<li><del>jedis-2.0.0.jar</del></li>
<li><del>commons-pool-1.3.jar</del></li>
</ol>


<p>这次作者终于在readme中也加以了描述，并且更新了版本：</p>

<ol>
<li>tomcat-redis-session-manager-VERSION.jar</li>
<li>jedis-2.5.2.jar</li>
<li>commons-pool2-2.2.jar</li>
</ol>


<p>在context.xml中的配法也做了一些调整，主要是类名发生了变化，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Valve</span> <span class="na">className=</span><span class="s">&quot;com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;Manager</span> <span class="na">className=</span><span class="s">&quot;com.orangefunction.tomcat.redissessions.RedisSessionManager&quot;</span>
</span><span class='line'>         <span class="na">host=</span><span class="s">&quot;localhost&quot;</span> <span class="err">&lt;!--</span> <span class="err">optional:</span> <span class="err">defaults</span> <span class="err">to</span> <span class="err">&quot;localhost&quot;</span> <span class="err">--</span><span class="nt">&gt;</span>
</span><span class='line'>         port=&quot;6379&quot; <span class="c">&lt;!-- optional: defaults to &quot;6379&quot; --&gt;</span>
</span><span class='line'>         database=&quot;0&quot; <span class="c">&lt;!-- optional: defaults to &quot;0&quot; --&gt;</span>
</span><span class='line'>         maxInactiveInterval=&quot;60&quot; <span class="c">&lt;!-- optional: defaults to &quot;60&quot; (in seconds) --&gt;</span>
</span><span class='line'>         sessionPersistPolicy=&quot;ALWAYS&quot; <span class="c">&lt;!-- optional: defaults to &quot;DEFAULT&quot; --&gt;</span> /&gt;
</span><span class='line'>         sessionPersistPolicies=&quot;PERSIST_POLICY_1,PERSIST_POLICY_2,..&quot; <span class="c">&lt;!-- optional --&gt;</span>
</span><span class='line'>         sentinelMaster=&quot;SentinelMasterName&quot; <span class="c">&lt;!-- optional --&gt;</span>
</span><span class='line'>         sentinels=&quot;sentinel-host-1:port,sentinel-host-2:port,..&quot; <span class="c">&lt;!-- optional --&gt;</span>
</span><span class='line'>        connectionPoolMaxIdle=&quot;20&quot;
</span><span class='line'>         connectionPoolMaxTotal=&quot;500&quot;
</span><span class='line'> /&gt;
</span></code></pre></td></tr></table></div></figure>


<p>另外就是增加了sessionPersistPolicies，建议选择<code>SAVE_ON_CHANGE</code>，如果选择<code>ALWAYS_SAVE_AFTER_REQUEST</code>，更容易诱发写竞争。而且有些场合，如果在request结束之后再写入，
中间的状态可能时间会拖得太长。如果真的对竞争情况很敏感的场合，就需要自己手动设置锁。</p>

<h3>github上把原作者的提交合并到自己的库中</h3>

<p>同把自己的修改贡献给对方类似，只不过这种pull request需要换成base是自己的库，而head则是原作者库，然后新建pull request，github就会列出发生过的变化。
这时候又会产生两种结局，其一是github可以自动合并，则再点击按钮即可，另一种是自动合并失败，会提示在本机先建分支，再pull原作者的分支，冲突解决（修改完毕）后合并回自己的主分支，
然后再push到github。push成功后，github会自动关闭这个pull request。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阿庆对缤智不满的猜想]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/11/09/a-qing-dui-bin-zhi-bu-man-de-cai-xiang/"/>
    <updated>2014-11-09T22:42:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/11/09/a-qing-dui-bin-zhi-bu-man-de-cai-xiang</id>
    <content type="html"><![CDATA[<p>在9月底写过一篇对<a href="http://octopresszhangyu.herokuapp.com/blog/2014/09/30/yi-kuan-jin-qi-bi-jiao-guan-zhu-de-che-bin-zhi-vezel/">缤智vs逍客的小结</a>，
提到了缤智的尺寸和排量是对天籁一种很好的补充。而近期，缤智也终于公布了11月上市的车型。
很遗憾，只有1.8L版本的，没有1.5L的。而这个1.8L的发动机已经是上一代的产物，实在和缤智这款新车不太搭。</p>

<p>而在看车媒关于缤智信息的过程中，罕见地看见了车评人在自己的社交媒体上公开表达对某个车型的负面情感。
新车评的阿庆有如下评论：</p>

<blockquote><p>这又是一台我不是非常喜欢，但周围有很多人喜欢，而且会让市场上很多潜在买家的车[嘻嘻] http://t.cn/RPsESsp</p></blockquote>

<p>新车评的编辑普遍还是很专业的，他们很少会在社交媒体上表达对具体车型的负面看法。
所以在此，倒不妨说说我对阿庆不满的猜测。</p>

<p>从行车品质方面来讲，阿庆对缤智最不满的有两点：
1.行车的噪音；
2. 1.8+CVT的动力有顿挫。</p>

<p>而对悬架的硬度还是比较满意的，甚至对缤智跑高速还挺赞赏的。要知道，这东西的底盘和飞度是一套平台的，而
飞度是极其不适合跑高速的。因此可以说缤智对底盘的调教很到位，缤智的价格虽然接近2辆飞度，但也还算物有所值。
所以我首先怀疑阿庆是不满1.8L+CVT的这个组合。因为1.8L发动机是上一代本田很多车型使用的发动机，对比最新的
地球梦系列，已经落后不少。而且那时候本田依然是主推自己独有的5AT，而CVT则是地球梦出来后，又再次
加载到飞度雅阁等新车上。这个1.8的发动机和CVT的组合实在属于硬来。让车评人不满也就不奇怪了。</p>

<p>其次，配了一个很华而不实的全景天窗，但是更加有用的电动座椅却消失了。这种配置方法实在有点脑残。</p>

<p>第三，地球梦发动机的配备至少还有半年，需要等待很长时间。而广本的这种态度，也是很难让人满意的。</p>

<p>阿庆主要的不满应该是其动力组成，从发动机到变速箱都不让人满意。但是缤智的设计的确是太出色了，
本田虽然不舍得在中国直接上技术含量更高的动力组成，比如混合动力、双离合变速箱等，但尺寸和规格毕竟还是
国产化了，于是缤智依然是一款很有吸引力的车。这么小的身段，却配了那么大的空间，在目前的市场上
绝对是一个空白。CRV 奇骏 RAV4的空间确实更大，但尺寸也大了很多。而逍客等在空间实用性方面是差很多的，
以三厢轿车为例，缤智至少不比轿车差，而逍客等就只是两厢车的空间水平了。</p>

<p>于是问题来了，这么有吸引力的车，万一看中的配置只有1.8L才有，那即使等到1.5L上市了，是买1.5的还是1.8的呢？
阿庆之所以会批评，根本原因还是缤智在某些方面确实抓住了用户痒点，而此时加入一些败笔则真的会让喜爱者扼腕叹息不已。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对一汽大众速腾召回的看法]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/10/27/dui-%5B%3F%5D-qi-da-zhong-su-teng-zhao-hui-de-kan-fa/"/>
    <updated>2014-10-27T11:45:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/10/27/dui-[?]-qi-da-zhong-su-teng-zhao-hui-de-kan-fa</id>
    <content type="html"><![CDATA[<p>近一个礼拜，车媒上最热门的话题莫过于速腾召回了。召回本不是什么特殊的事情，美国一年汽车市场的召回数量是中国一年的十倍有余，即使是中国，各大车厂尽量避免召回了，但最终召回的现象还是前仆后继地发生着。然而，速腾这次给的召回的解决方案比较奇葩，而且又是一汽，又是大众，又牵涉到了近60万的车主,于是才引发了很大的反响。</p>

<blockquote><p>大众汽车公司提出的召回措施是在后轴纵臂上安装金属衬板。在其提交的技术材料中，大众汽车公司声称金属衬板会使悬架的临界纵向负荷增加，如后轴纵臂发生断裂，金属衬板可以保证车辆的行驶稳定性，并会发出持续的警示性噪音。一汽大众汽车有限公司和大众汽车（中国）销售有限公司的授权经销商将为召回范围内车辆免费安装金属衬板，以消除安全隐患。</p></blockquote>

<p>上面这段摘自大众和质监总局发布的正式公告，总感觉有些儿戏。当然，这是<strong>合法</strong>的处理方案和通告。
这个方案本身看来是解决不了断的问题，而成本给我的感觉应该可以做到够低，尽管显得有点山寨。山寨就山寨吧，随后又发了一段召回说明的视频，问题是一个合资企业、一个号称国产化程度很高的车型，
最后出现在视频里的是一个满口说着英文的老外，真不知道这是想沟通呢还是就是不想交流呢？</p>

<p>如果只看这些，很容易让人认为一汽大众的公关太失败了。糊弄群众也不带这么糙的。而且很奇怪的一点是，各路车媒此次对大众召回的评价都很差，从杨力到陈震，从XCP到汽车之家，莫不如此。照理，大众的公关不该那么不堪，公关费花出去也不该那么没有效果的。
但是，随后发生的事情，说明一汽大众的公关是很切中要害的。他们实际上压根没理车媒这一茬，而是直接找到车媒的领导单位去了。当搞定车媒的领导后，自然也不需要再充值给车媒封口。而这也解释了我之前的疑惑，为什么车媒普遍这次比较刻薄，因为啥都没拿到么，当然就有一说一，而且部分车媒其实是有不满情绪的。因此，仅就目前的情况来看，一汽大众的公关还是打到了七寸。</p>

<h3>那么这件事情会对大众有什么大影响吗？</h3>

<p>在我看来，答案很简单：<strong>没有多少</strong>。这主要是基于中国市场的现实情况得出的。<br/>
首先来看曾经的翼虎断轴，该事件也一度闹得沸沸扬扬，但最后并未阻挡大家购买翼虎的热情，只是翼虎变得不再加价而已。而翼虎断轴的效应和大众的后果还是很类似的。
其次，大众自己的DSG，都上过315，但也无损大众销量继续狂飙的现实。而比较起来，扭力梁这种非独立悬架原本就不是大众的主流技术，实际上新速腾也都已改成独立悬架。非要说影响，可能对所有车型的
非独立悬架都会打负分。但是，难道非独立悬架就卖不出去了？
而从技术角度而言，非独立悬架的处理比挽回DSG的公信简单，前者只是成本问题。大众的品牌效应会继续为其销量保驾护航。</p>

<p>最现实的情况是，在中国，目前的大众并没有替代品。真的让出300万车的销量，也没有其他车企可以真的接盘。按说在品质、品牌上，日系是和大众接近且可靠性更胜一筹的，如果在其他市场上，可能就是日系大踏步接受
大众销量了。但在中国市场，日系至今还在被抵制中，不会选择日系或者生怕选择日系有其他隐患的车主大有人在，所以不会有多少转型日系的用户。通用福特的小毛病比大众更多，品牌也谈不上更强，可以替代一部分，但总量依然有限,而且实际上还是不如大众的。至于韩系，由于品牌档次的原因，能承接大众的消费群体也不会太多，可能会分流走一批10w元以下的消费者。但也仅此而已了。</p>

<p>没有多少影响不代表没影响，负面影响当然依然是有的。比如神车的姿态肯定要比现在低，加价等车的情况应该会有所好转，也确实会发生一部分客户分流，但总销量可能依然是差不多的。只是原本加价等车变成直接提现车了。
只要大众的信誉还在国内排首位，那么这件事情只是稍微降低了大众在信誉方面的领先程度，而远不会达到影响其销量的程度。因为中国消费者的选择实在有限，减配也不是一家两家的事情。而大众的品牌效力，经过此事件后确有下降，但不至于丢到榜首的位置。</p>

<p>那大众的车还可以买吗？</p>

<p>我这边的答案也十分好操作：如果能接受日系车，那就买日系车；如果原本就是在通用福特大众间的某个型号纠结，那可以把通用的排位靠前些；以上皆不是的话，还是继续大众吧。
就像麦当劳 可口可乐都出过事情，普通人能做到尽量少吃，但完全不碰是需要客观条件支持才行的。而且选择其他的也未必没有大众已经暴露出来的问题。有时候碰到这些大厂，也是让人很无奈的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[定价还算合理的雷克萨斯NX]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/10/18/ding-jie-huan-suan-he-li-de-lei-ke-sa-si-nx/"/>
    <updated>2014-10-18T22:29:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/10/18/ding-jie-huan-suan-he-li-de-lei-ke-sa-si-nx</id>
    <content type="html"><![CDATA[<p>丰田终于公布了雷克萨斯NX系列在中国的售价。以我比较关心的2.0和2.0T的配置来看，2.0入门款定在
了33万，2.0T的标准款定在了41万。之前对比ES的售价，认为基本还算合理。以ES250为例，基础款35w，
带倒车影像的40w。按国内合资厂商的紧凑型SUV普遍要比更大一级的同样动力的轿车贵几万的定价逻辑，
例如RAV4比凯美瑞贵2-3万，奇骏比天籁贵2-3万，NX的定价只是和ES相当。尽管ES终端现在普遍有3-5w的优惠幅度，
但NX的终端也是可以跌价的，所以比较还是在目录价格之间进行。得出的结论是NX的定价并不高。</p>

<p>而在今天，丰田又公布了美国版的价格。美国版没有2.0的版本，入门级就是2.0t，
34,480美金，相当于21.4万人民币。初看起来这个价格有点高，但稍微算一下：</p>

<p>以2.0T入门版21.4万而言，排量税是5%，加上关税合计30%，21.4 * 1.3 =27.82万，而在中国的售价是41万，去除17%的增值税，41/1.17=35.04万。
二者相减，4s的毛利在六七万间。
所以nx在中国的售价倒也还算厚道。毕竟过个一年半载后可能还有几万的优惠，一辆车4s的毛利就在三五万以内了。
对于在地区里都是独家经营的销售企业，赚这点钱倒也不算过分。
以中国的税费和4S店实际可处于的优势位置，这个定价还是很有诚意的。
而且北美版本的配置可能没有国内的高，这个定价还是很基于实际情况尽可能的低了。</p>

<p>当然，这是豪车的suv了，尺寸也不算小，价格自然也还是高高在上的。所谓合理只是基于现实的实际情况，
以及和其他同类进口车或合资国产车对比而言。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx 处理Spring 静态资源的配置]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/10/14/nginx-chu-li-spring-jing-tai-zi-yuan-de-pei-zhi/"/>
    <updated>2014-10-14T13:19:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/10/14/nginx-chu-li-spring-jing-tai-zi-yuan-de-pei-zhi</id>
    <content type="html"><![CDATA[<p>用Nginx处理静态资源是挺常见的一个事情，自从使用了Spring，也经常直接利用Spring的处理静态文件的功能，也能打上Etag。避免流量传输。
但是近来发现，Spring处理静态资源后，对静态文件获取的请求浏览器还是会发起，只是每次都是返回304。所以想继续借助Nginx给Spring的静态资源打上expire的标记。</p>

<p>需求也算简单：</p>

<ol>
<li>基于app toolbar的动态请求转发给java</li>
<li>gif,png，js等nginx直接处理，并加expire 3h；</li>
<li>部分.js请求如t.js还是转给java，有效期为0；</li>
<li>敏感文件不会被nginx处理，如web.xml无法被nginx转走</li>
</ol>


<p>因为目前Spring的静态资源单独存放在和WEB-INF并排的目录下，所以利用Nginx配置就大为简单了，只要限制路径名称即可。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>        location /toolbar {
</span><span class='line'>            root   html;
</span><span class='line'>            proxy_pass http://192.168.203.198:8080;
</span><span class='line'>        }
</span><span class='line'>        location ~ /toolbar/static {
</span><span class='line'>            root   html;
</span><span class='line'>            if (-f $request_filename) {
</span><span class='line'>                expires 1d;
</span><span class='line'>                break;
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>        location = /toolbar/enter/t.js {
</span><span class='line'>            root   html;
</span><span class='line'>            proxy_pass http://192.168.202.72:8080;
</span><span class='line'>        }</span></code></pre></td></tr></table></div></figure>


<p>然后在nginx的html目录下建立目录<code>toolbar</code>，并在其增加一个符号连接<code>ln -s /home/web/apache-tomcat-7.0.56/webapps/toolbar/static static</code>，就可以实现上述要求了。</p>

<p>这里面用到了几种Nginx的配置。</p>

<ol>
<li><code>location /toolbar</code>，这是最基本的匹配字符串的表达方式，优先级一般情况下也最低，然而<code>^~</code>是一个例外，它的优先级比下面的正则要高。</li>
<li><code>location ~ /toolbar/static</code>，这个是用到了正则表达式的匹配，优先级要高于基础的只比较字符。</li>
<li><code>location = /toolbar/enter/t.js</code>，这是优先级最高的匹配符，要求uri完全相等。</li>
</ol>


<p>如果需要使用正则表达式匹配，则必须使用<code>~</code>或者<code>~*</code>，其中后者和前者的区别是不区分大小写。</p>

<p>整个匹配顺序是：</p>

<ol>
<li>对<code>=</code>进行匹配，有相符的就停止；</li>
<li>对所有的非正则表达式（为使用~ 和 ~*）进行匹配，如果遇到<code>^~</code>则也停止，否则全部比对完毕后，最接近的匹配将被选用作为候选，随后进入3匹配正则表达式；</li>
<li>正则表达式按定义的顺序进行匹配，有匹配的则停止，即可选用刚刚匹配的正则表达式，如没有匹配的正则，则选用2中得到的结果。</li>
</ol>


<p>因此对静态资源的选择，可以加上<code>~</code>，也可以不加。但为了避免今后配置的冲突，还是让静态资源的优先级高一些来的好。</p>

<p>随后，可以使用下面的链接进行测试，看看是否满足需求：</p>

<p>http://192.168.203.198/toolbar/enter/t.js,<br/>
http://192.168.203.198/toolbar/static/images/logo1.png,<br/>
http://192.168.203.198/toolbar/WEB-INF/web.xml</p>

<p>前面两个应该得到返回内容，最后一个应该获得报错。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[倒车就是看后轮和摆车尾]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/10/06/dao-che-jiu-shi-kan-pi-gu/"/>
    <updated>2014-10-06T13:37:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/10/06/dao-che-jiu-shi-kan-pi-gu</id>
    <content type="html"><![CDATA[<p>开了几个月的车，终于开始练习倒车了。离自己直接上路又近了些。
两天下来，感觉倒车主要是三点：</p>

<ol>
<li>设计路线和找准起点</li>
<li>看后车轮和车尾</li>
<li>注意车头一角</li>
</ol>


<p>对新手而言，尤其要把握住后车轮，可以把反光镜调低进行观察。倒入的关键是让车屁股彻底绕开障碍物，
然后就可以死打方向直到后侧车轮靠边，随后回个方向到另一头继续倒出。在此过程中注意对角的前后轮。</p>

<p>不过只在行进中转动方向盘目前我还做不到，仍然需要努力。另外就是发现，家里小区的停车难度远比马路上大。
如果家里停好了，基本上外面也就可以随便停了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[缤智vezel-昂科威-换代逍客]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/09/30/yi-kuan-jin-qi-bi-jiao-guan-zhu-de-che-bin-zhi-vezel/"/>
    <updated>2014-09-30T22:27:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/09/30/yi-kuan-jin-qi-bi-jiao-guan-zhu-de-che-bin-zhi-vezel</id>
    <content type="html"><![CDATA[<p>开天籁已经几个月了，总体感觉还不错，尽管最近右后侧轮胎扎了个钉子，这当然怪不了小天，只能说中国的路面
实在是路况不好。</p>

<p>这些日子下来，对这部车还是很满意的。车内空间够大，开起来很舒服。尤其是喜欢前雷达，
对新手而言在碰见人来人往的地方以及需要挤过去的路况下，可以增强很多信心。
各种配置也基本够用了，座椅内饰都很舒服，CVT在市区启停确实够平顺。但作为B级中，总是不可避免地有下面
两个问题：</p>

<ol>
<li>空间大的同时意味着尺寸大，在上海停车什么的都不是很轻松，尽管是可以习惯的；</li>
<li>油耗依然偏高，毕竟车大，天籁的高速的确省油，但上海的市区开开基本上在13个左右了，夏天开空调的话就更高了。</li>
</ol>


<p>而且，因为接送人的关系，我平时上下班开车往往像「保姆车」，需要怠速等待很长的时间。这种情况下，
动力并不重要，而怠速油耗很重要，能有一台小排量的车就比较好了。2.5L的怠速油耗确实还是高了些。
<a href="http://octopresszhangyu.herokuapp.com/blog/2013/11/03/kan-che-da-nuo-yi-ji/">去年看车</a>原本想选ES+逍客的。
最后因为我们先出手，所以<a href="http://octopresszhangyu.herokuapp.com/blog/2014/01/17/teana/">买了天籁</a>。但是看看当时的组合依然是适用的。
只是10来个月过去了，现在市场上又多了一些和逍客旗鼓相当的产品。例如本田新推出的缤智-Vezel。</p>

<p>看尺寸、价格和定位，这一款车是明显冲着逍客去的。这个级别里还有一款吸引我的是昂科拉。
都是4米2到4米3的车长，都是跨界型的suv。缤智的操控，估计还是比不上逍客的，因为逍客的悬挂是独立的，
而且由欧洲设计。缤智只是一个飞度的地盘，那个悬挂其实有点拿不出手。但逍客毕竟是一台老款车了，
缤智有后发制人的优势。逍客可能一年左右也会出换代逍客，但考虑到国产化以及日产现在捉急的产能，
能否在明年买到逍客依然很难说。</p>

<p>缤智的优点么，在我看来主要还是尺寸的优势。车身是很短的，但由于高度的增加，在主观感受上比A0级别的车大多了，
也可以稍微拉开一点层次。看见飞度可爱是挺可爱的，但在派头和气势上实在欠缺。其次，就是缤智漂亮的外形了。
后门和尾部都有点讴歌SUV的味道。隐藏式的门把手很有特色。<br/>
同逍客相比，他的储物空间有优势，操控和过弯当然是不如的，毕竟悬挂和底盘都差的太多。同时内饰也稍好一些。
多了电子驻车、电动天窗、后车雷达，但是又少了主驾驶电动调节和自动大灯。</p>

<p>在我比较喜欢的配置方面，倒车影像是有的，没有前雷达只有后雷达是一个缺陷，但逍客的话有影像的车前后雷达
就都没有了。自动大灯和电动座椅的缺失比较让人遗憾。不过逍客的主流配置也没有电动座椅。
后视镜电动调节和加热是有的，但自动折叠是一律没有，更别提记忆了，不过这方面逍客也一样。
其他高级的配置就更没指望了。可以说在配置方面还是缤智胜出，后雷达还是比自动大灯有用。</p>

<p>不过目前已推出的缤智我不可能买，必须得是地球梦的动力组成才值得出手。
另一点对本田的遗憾是变速箱也是CVT的。日系现在小动力的自动挡全面从4AT换成了CVT，
要是能装配6AT的变速箱就好了。只是目前看来日系三个品牌的趋势是倾向于CVT，尤其是小排量的。
甚至得知明年上市的新款CRV也要改成CVT了。这方面日本厂商也挺无聊的，幸亏这个世界的汽车没有全部变成日系车。</p>

<p>跟逍客对比后，可以发现本田其实并不是新定义了一个细分市场，而是比较明显地对标逍客。
所以有些普通的、应该有的配置反而没有出现在缤智上。本田对缤智的配置、动力的定义并
不是主要从自己的实际和客户的需求出发，而是很大程度上和逍客度长协大的产物。所以个别之处
显得有那么一点脑残。真的以后换用地球梦系列动力组成，其配置会怎么样变化也是一个很大的未知数。
只能到明年推出后再看了。确实是值得继续关注的一款车型。然而，换代逍客在这方面又都补齐了，看来这个级别的王者还是逍客。</p>

<p>另外可以考虑的就是本田的CRV和丰田的RAV4了。缤智和CRV的差价倒是很接近，尤其是现款的CRV打折幅度
很大的情况下。不过CRV的2.0版本总体而言优于其2.4的版本，只是2.0群系列都没有倒车影像，需要自己加装。
RAV4就厚道一些，还带胎压监测的。而且买RAV4就是直接上2.5版本的了，搭载的6AT也能比2.0版本的CVT
带来的体验更丰富些。2.5版本优惠后的价格比缤智的顶配也贵不了多少。但RAV4在一汽丰田的做工实在难以恭维，
保险点还是CRV了。
然而，问题在于这样一来，对天籁两个劣势的弥补就不好了。CRV的停车不比天籁方便，油耗也不遑多让。
所以，这几个选择里面和天籁最搭的还是紧凑级的SUV，即1.5L的缤智和换代逍客。</p>

<p>东日明年就要换代了又出一个所谓2015逍客确实很恶心，尤其是个别地区的换代产品都还已经上市了。
但是，新逍客只在英国工厂生产，而中国注定又只能买到国产逍客。所以我们只能等待。国产生产线组建起来慢半年甚至一年都很平常。
拿缤智来讲，日本本土去年年底就上市了，中国到今年都10月份了，还没正式上市呢。新逍客等到明年下半年才能在东风生产也不奇怪。</p>

<p>除了短小型的缤智和逍客，体型和CRV/RAV4类似的昂科威也是未来的一项选择。目前已知的2.0T的版本确实配置很丰富、
内饰很豪华，外观么除了太像GL8其他都还不错。最大的劣势就是这个2.0T的发动机本来是按在凯迪拉克身上的，
凯迪拉克上每月正常使用四五千元的油耗实在不是买别克的人可以承受的。而从陈震的视频来看，在37公里时速下，依然
油耗超过12升每公里，真的赶上市区行车，恐怕25升以上真的一点不夸张。但是，据说除了2.0T，还有1.5T的两驱版本。
这么说的话，这个版本就很吸引人了。如果油耗能降到一个和rav4类似的程度，配置比2.0T不要减的太离谱，
那么昂科威确实是很值得期待的另一款车。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 和 Javascript的RSA]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/09/19/java-he-javascriptde-rsa/"/>
    <updated>2014-09-19T13:57:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/09/19/java-he-javascriptde-rsa</id>
    <content type="html"><![CDATA[<p>近来安全问题日益被重视，通过HTTP传输的部分数据也有了加密的需求。虽然最到位的办法肯定是HTTPS，但证书的申请是比较麻烦的。所以，还是决定
通过diy的方式，将浏览器中的部分敏感数据加密后再传给服务器。</p>

<p>说到加密算法，主要是对称或不对称，可逆或不可逆。最保险的当然是不可逆的密文传输，但是部分业务获得不可逆的密文后无法处理，只能选择可逆的形式。
而在浏览器中加密，显然用对称加密方式就不合适了。所以最后选择了RSA。既是不对称的也是可解密的。</p>

<p>这件事情里面，最麻烦的就是rsa的算法是java和javascript分别实现的。客户端的加密别无选择，只有js胜任。服务端主要提供给现有服务使用，因此主要就是Java。
而让两者配合，则是需要花费些功夫的。网上尽管资料不少，但讲清楚之间配合的很少。</p>

<h2>Javascript中的RSA</h2>

<p>Java的加密算法之前已经用过多次，了解了一下js的rsa算法，还真的有不少，最后选了一个大家提到的比较多的<a href="http://www.ohdave.com/rsa/">ras in javascript</a>。
在html中使用的代码如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;UTF-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>JavaScript RSA<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://www.ohdave.com/rsa/BigInt.js&quot;</span><span class="nt">&gt;&lt;/script&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://www.ohdave.com/rsa/RSA.js&quot;</span><span class="nt">&gt;&lt;/script&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;http://www.ohdave.com/rsa/Barrett.js&quot;</span><span class="nt">&gt;&lt;/script&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c1">//公钥加密明文</span>
</span><span class='line'>        <span class="nx">setMaxDigits</span><span class="p">(</span><span class="mi">231</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">modulu</span> <span class="o">=</span> <span class="s2">&quot;00aad04454bda226e1&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">key1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RSAKeyPair</span><span class="p">(</span><span class="s2">&quot;010001&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nx">modulu</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">password</span> <span class="o">=</span> <span class="s2">&quot;jack1234张三&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">encryPssword</span> <span class="o">=</span> <span class="nx">encryptedString</span><span class="p">(</span><span class="nx">key1</span><span class="p">,</span> <span class="nx">password</span><span class="p">);</span>
</span><span class='line'>        <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">encryPssword</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="nx">encryPssword</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">//私钥解密</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">priExp</span> <span class="o">=</span> <span class="s2">&quot;078c4c789faca941&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">key2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RSAKeyPair</span><span class="p">(</span><span class="s2">&quot;010001&quot;</span><span class="p">,</span> <span class="nx">priExp</span><span class="p">,</span> <span class="nx">modulu</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">decryptedPssword</span> <span class="o">=</span> <span class="nx">decryptedString</span><span class="p">(</span><span class="nx">key2</span><span class="p">,</span> <span class="nx">encryPssword</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="nx">decryptedPssword</span><span class="p">);</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，<code>setMaxDigits</code>我理解下来是给计算留下足够多的空间的，一般选择秘钥位数(key_size)*2/16，每个digit可以放16个bit.<br/>
<code>RSAKeyPair(encryptionExponent, decryptionExponent, modulus)</code>是构造钥匙的方法，实际上构造公钥（加密）只需要第一个参数和第三个参数，构造私钥（解密）只需要第二个参数和第三个参数。
第三个参数是类似模的一个东西，另外两个参数则是指数，根据模和各自的指数，就能生成相应的公钥和私钥的数字。而这个js的版本，都是返回的hex，即16进制的内容，且不支持中文，如果需要支持中文的话，需要自己先转成某种编码。不过，还剩下一个问题，就是模和指数从哪里获取呢？</p>

<h2>Java中的RSA</h2>

<p>Java的RSA代码有很多，可以参考<a href="http://blog.csdn.net/songxiaobing/article/details/17505237">链接</a>。关键在于如何使用这些API。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">argvs</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">KeyPair</span> <span class="n">keyPair</span> <span class="o">=</span> <span class="n">RSAUtil</span><span class="o">.</span><span class="na">generateKeyPair</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="n">RSAPublicKey</span> <span class="n">pubKey</span> <span class="o">=</span> <span class="o">(</span><span class="n">RSAPublicKey</span><span class="o">)</span> <span class="n">keyPair</span><span class="o">.</span><span class="na">getPublic</span><span class="o">();</span>
</span><span class='line'>    <span class="n">RSAPrivateKey</span> <span class="n">priKey</span> <span class="o">=</span> <span class="o">(</span><span class="n">RSAPrivateKey</span><span class="o">)</span> <span class="n">keyPair</span><span class="o">.</span><span class="na">getPrivate</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">pubModBytes</span> <span class="o">=</span> <span class="n">pubKey</span><span class="o">.</span><span class="na">getModulus</span><span class="o">().</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">pubPubExpBytes</span> <span class="o">=</span> <span class="n">pubKey</span><span class="o">.</span><span class="na">getPublicExponent</span><span class="o">().</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">priModBytes</span> <span class="o">=</span> <span class="n">priKey</span><span class="o">.</span><span class="na">getModulus</span><span class="o">().</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">priPriExpBytes</span> <span class="o">=</span> <span class="n">priKey</span><span class="o">.</span><span class="na">getPrivateExponent</span><span class="o">().</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'>    <span class="n">RSAPublicKey</span> <span class="n">recoveryPubKey</span> <span class="o">=</span> <span class="n">RSAUtil</span><span class="o">.</span><span class="na">generateRSAPublicKey</span><span class="o">(</span><span class="n">pubModBytes</span><span class="o">,</span>
</span><span class='line'>        <span class="n">pubPubExpBytes</span><span class="o">);</span>
</span><span class='line'>    <span class="n">RSAPrivateKey</span> <span class="n">recoveryPriKey</span> <span class="o">=</span> <span class="n">RSAUtil</span><span class="o">.</span><span class="na">generateRSAPrivateKey</span><span class="o">(</span>
</span><span class='line'>        <span class="n">priModBytes</span><span class="o">,</span> <span class="n">priPriExpBytes</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;加密指数: &quot;</span>
</span><span class='line'>        <span class="o">+</span> <span class="n">SSOEncrypter</span><span class="o">.</span><span class="na">byte2hex</span><span class="o">(</span><span class="n">pubPubExpBytes</span><span class="o">));</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;解密指数： &quot;</span>
</span><span class='line'>        <span class="o">+</span> <span class="n">SSOEncrypter</span><span class="o">.</span><span class="na">byte2hex</span><span class="o">(</span><span class="n">priPriExpBytes</span><span class="o">));</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;公钥modulus: &quot;</span><span class="o">+</span><span class="n">SSOEncrypter</span><span class="o">.</span><span class="na">byte2hex</span><span class="o">(</span><span class="n">pubModBytes</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成密钥对可以用<code>generateKeyPair</code>，并且会生成一个RSA文件。随后的重点是要把里面的公钥私钥转换成有<code>RSA</code>前缀的相应类，只有这样才能调出获得Exp和Mod的方法。
两个ModBytes得到的结果是一样的。所以在js里面，modulu就变成只有一个参数了。</p>

<h2>二者的异同</h2>

<p>如同之前预料的一样，两个语言写出来的加密解密在一些细节上是不一样的。</p>

<ul>
<li><p>java</p>

<ul>
<li>默认密文是二进制的，自己主动转成16进制的话是连续的</li>
<li>原生支持中文</li>
</ul>
</li>
<li><p>javascript</p>

<ul>
<li>默认密文就是16进制的，且每个分组之间使用一个空格进行分隔</li>
<li>分组内部的排列是倒序的</li>
<li>不支持中文</li>
</ul>
</li>
</ul>


<p>下面的输出比较说明问题</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">SSOEncrypter</span><span class="o">.</span><span class="na">byte2hex</span><span class="o">(</span><span class="n">rsa</span><span class="o">.</span><span class="na">encrypt</span><span class="o">(</span><span class="n">pubKey</span><span class="o">,</span><span class="n">str</span><span class="o">.</span><span class="na">getBytes</span><span class="o">()));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;加密后==&quot;</span> <span class="o">+</span> <span class="n">s1</span><span class="o">);</span> <span class="c1">//加密后==0c983a3d17e57037456582ce61bc1276</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;解密后==&quot;</span> <span class="o">+</span> <span class="n">Javanew</span> <span class="n">String</span><span class="o">(</span><span class="n">rsa</span><span class="o">.</span><span class="na">decrypt</span><span class="o">(</span><span class="n">priKey</span><span class="o">,</span> <span class="n">SSOEncrypter</span><span class="o">.</span><span class="na">hexStringToByte</span><span class="o">(</span><span class="n">s1</span><span class="o">))));</span> <span class="c1">//解密后==abcdefghijklmn</span>
</span><span class='line'>
</span><span class='line'><span class="n">js</span><span class="err">相同内容的输出为：</span>
</span><span class='line'><span class="mi">4831</span><span class="n">c7394dc3623c</span> <span class="mi">5429366</span><span class="n">c63908d05</span> <span class="mi">16</span><span class="n">d4229e4631084a</span>
</span></code></pre></td></tr></table></div></figure>


<p>差异还是比较显而易见，具体的实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">   * 解析js的rsa处理过来的密文</span>
</span><span class='line'><span class="cm">   * @param jsHex 的特点是每16个字符中间有空格分割，而且block还原的顺序需要颠倒过来</span>
</span><span class='line'><span class="cm">   * </span>
</span><span class='line'><span class="cm">   * @throws Exception </span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">decryptFromJsRSA</span><span class="o">(</span><span class="n">String</span> <span class="n">jsHex</span><span class="o">,</span> <span class="n">RSAPrivateKey</span> <span class="n">priKey</span> <span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span><span class="o">[]</span> <span class="n">blocks</span> <span class="o">=</span> <span class="n">jsHex</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">StringBuffer</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">block</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">blocks</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">block</span> <span class="o">=</span> <span class="n">blocks</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>      <span class="c1">//byte[] en_result = new BigInteger(block, 16).toByteArray();</span>
</span><span class='line'>      <span class="kt">byte</span><span class="o">[]</span> <span class="n">en_result</span> <span class="o">=</span> <span class="n">SSOEncrypter</span><span class="o">.</span><span class="na">hexStringToByte</span><span class="o">(</span><span class="n">block</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">de_result</span> <span class="o">=</span> <span class="n">decrypt</span><span class="o">(</span><span class="n">priKey</span><span class="o">,</span> <span class="n">en_result</span><span class="o">);</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">de_result</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>      <span class="c1">//返回解密的字符串</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">reverse</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h2>中文编码的问题</h2>

<p>上面用到的js的rsa库，写的很小巧，运行速度也很快。唯一的缺点就是不支持中文。好在按上面的算法，试了几千条数据后，确保非中文的情况下java和js之间的明文-密文转换是没有问题的。
所以只要给js加上Base64的编码，就可以解决问题了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">genRandomNum</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">pwdLen</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 生成的密码的长度</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="p">[</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span><span class="p">,</span> <span class="s1">&#39;f&#39;</span><span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">,</span> <span class="s1">&#39;h&#39;</span><span class="p">,</span> <span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="s1">&#39;j&#39;</span><span class="p">,</span> <span class="s1">&#39;k&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;l&#39;</span><span class="p">,</span> <span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;o&#39;</span><span class="p">,</span> <span class="s1">&#39;p&#39;</span><span class="p">,</span> <span class="s1">&#39;q&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="s1">&#39;s&#39;</span><span class="p">,</span> <span class="s1">&#39;t&#39;</span><span class="p">,</span> <span class="s1">&#39;u&#39;</span><span class="p">,</span> <span class="s1">&#39;v&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;x&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;z&#39;</span><span class="p">,</span> <span class="s1">&#39;0&#39;</span><span class="p">,</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="s1">&#39;3&#39;</span><span class="p">,</span> <span class="s1">&#39;4&#39;</span><span class="p">,</span> <span class="s1">&#39;5&#39;</span><span class="p">,</span> <span class="s1">&#39;6&#39;</span><span class="p">,</span> <span class="s1">&#39;7&#39;</span><span class="p">,</span> <span class="s1">&#39;8&#39;</span><span class="p">,</span> <span class="s1">&#39;9&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="s1">&#39;;&#39;</span><span class="p">,</span> <span class="s1">&#39;\&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;]&#39;</span><span class="p">,</span> <span class="s1">&#39;{&#39;</span><span class="p">,</span> <span class="s1">&#39;!&#39;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span><span class="p">,</span> <span class="s1">&#39;%&#39;</span><span class="p">,</span> <span class="s1">&#39;^&#39;</span><span class="p">,</span> <span class="s1">&#39;&amp;&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39;(&#39;</span><span class="p">,</span> <span class="s1">&#39;)&#39;</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span><span class="p">,</span> <span class="s1">&#39;+&#39;</span><span class="p">,</span> <span class="s1">&#39;=&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;我&#39;</span><span class="p">,</span> <span class="s1">&#39;爱&#39;</span><span class="p">,</span> <span class="s1">&#39;北&#39;</span><span class="p">,</span> <span class="s1">&#39;京&#39;</span><span class="p">,</span> <span class="s1">&#39;天&#39;</span><span class="p">,</span><span class="s1">&#39;安&#39;</span><span class="p">,</span> <span class="s1">&#39;门&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;日&#39;</span><span class="p">,</span> <span class="s1">&#39;产&#39;</span><span class="p">,</span> <span class="s1">&#39;别&#39;</span><span class="p">,</span> <span class="s1">&#39;克&#39;</span><span class="p">,</span> <span class="s1">&#39;大&#39;</span><span class="p">,</span> <span class="s1">&#39;众&#39;</span><span class="p">,</span> <span class="s1">&#39;丰&#39;</span><span class="p">,</span> <span class="s1">&#39;田&#39;</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">maxNum</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">pwd</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nx">count</span> <span class="o">&lt;</span> <span class="nx">pwdLen</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 生成随机数，取绝对值，防止生成负数，</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="nx">maxNum</span><span class="p">);</span> <span class="c1">// 生成的数最大为36-1</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">maxNum</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">pwd</span> <span class="o">+=</span> <span class="nx">str</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class='line'>    <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//console.log(pwd);</span>
</span><span class='line'><span class="k">return</span> <span class="nx">pwd</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">pwds</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="kd">var</span> <span class="nx">pwd</span> <span class="o">=</span> <span class="nx">genRandomNum</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="mi">40</span><span class="p">));</span>
</span><span class='line'>   <span class="nx">pwds</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">pwd</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>    <span class="c1">//公钥加密明文</span>
</span><span class='line'>    <span class="nx">setMaxDigits</span><span class="p">(</span><span class="mi">231</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">modulu</span> <span class="o">=</span> <span class="s2">&quot;0085cf15ef6336cb3f&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">key1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RSAKeyPair</span><span class="p">(</span><span class="s2">&quot;010001&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nx">modulu</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">pwd</span> <span class="nx">of</span> <span class="nx">pwds</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">pwd</span><span class="o">+</span><span class="s2">&quot;[ &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;&lt;br /&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">pwd</span> <span class="nx">of</span> <span class="nx">pwds</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">pwd</span><span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">encryPssword</span> <span class="o">=</span> <span class="nx">encryptedString</span><span class="p">(</span><span class="nx">key1</span><span class="p">,</span> <span class="nx">Base64</span><span class="p">.</span><span class="nx">encode</span><span class="p">(</span><span class="nx">pwd</span><span class="p">));</span>
</span><span class='line'>      <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">encryPssword</span><span class="o">+</span><span class="s2">&quot;, &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>通过上面的程序，可以产生长度不等的多个随机密码，把明文进行base64转码后交给rsa加密成16进制的字符，然后就可以把得到的明文和密文交给java进行比对了。
另外Base64的编码是url不安全的。因为+ = /都是base64的适用字符，而这些在url传输中都会被转义，所以js的base64编码一般还有一个对url-safe的版本。
而在此处，rsa会最终转成16进制，因此并不需要使用url-safe的特性。考虑到Java的base64还是标准版的，所以使用标准版的base64更合适。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[何伟的甲骨文]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/09/14/he-wei-de-jia-gu-wen/"/>
    <updated>2014-09-14T11:49:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/09/14/he-wei-de-jia-gu-wen</id>
    <content type="html"><![CDATA[<p>书接上回，之前说寻路中国应该叫寻路中国乡村，因为欠缺的城市的内容。但实际上关于城市中国的何伟的书出版的更早，
就是这本《Oracle》，而且由于某些原因无法在大陆出版。因为一旦
牵涉到城市，难免会有更敏感的话题出现。
本书的时间也要稍早，描述的是2000年前后的中国。当时的国家已经有了寻路中国里的一些倾向，只是还没那么严重。</p>

<p>本书主要描写了在三四个大陆城市：北京、深圳、温州、南京。
北京主要作者自己、一个维吾尔人以及一些老知识分子。深圳和温州的
主线是作者在涪陵任外教时的学生在那里闯荡情况的反应。南京等则只是一笔带过。
而所谓甲骨文的发现地&#8211;安阳，书中尽管多次提到，但并未加以详细描述。安阳只是作为介绍甲骨文专家
<strong>陈梦家</strong>（甲骨文专家、留美学者、右派、66年自杀）的引子。
简单地说，甲骨文其实是在讲文革中一些知识分子的命运，和作者的几个学生的人身经历并没有直接的关系。
而维吾尔的故事，则是在北京和华盛顿两个地方展开。这里面敏感内容较多，作者的描述并没有很明显的倾向性，
尽管作者和维吾尔人是朋友。</p>

<p>阅读2000年前后中国故事，从中可以反映出彼时的一些政策制定有其合理之处。但在2003之后
还是坚持某些策略，则产生很多问题。例如，当时的汇率是固定，后来的汇率也是固定的。
但是，当时的黑市价格美元更值钱，所以政府坚持汇率对人民有益。而后来人民币早就该升值，
美元已不如过去那么有价，还坚守汇率就是对使用人民币的人不负责任了。
即便是同样的措施，在不同的条件下实施其后果是完全不同的。</p>

<p>所以，尽管这本书谈了很多政治的东西，但却完全没有读上本书
时常常会发出的未尝不痛恨于桓灵也的感觉。很多选择对政府来讲也是别无选择，
完全不像后10年那样政府其实可以有多种选择。</p>

<p>作者也在新疆采访了当时正在拍摄天地英雄的姜文，也提到了他因为鬼子来了而受到封杀。
姜文故事的系统性并不强，可能只是作者曾经写过的一篇报道也放了进来。</p>

<p>总体而言，作者的视角很独特，借助甲骨文也介绍了中国的近代文字变革历史，确实是调查研究后的优秀记者的水平。
整本书读完后，会对中国的文字变化、政策导向、年轻人在城市的奋斗生活有更深入或更新鲜的认识。是一本开卷有益的好书。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web容器中通过Spring添加Job任务]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/09/11/webrong-qi-zhong-tong-guo-springtian-jia-jobren-wu/"/>
    <updated>2014-09-11T21:59:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/09/11/webrong-qi-zhong-tong-guo-springtian-jia-jobren-wu</id>
    <content type="html"><![CDATA[<p>实际投入使用的Web站点总有很多例行任务要做，习惯的做法是利用操作系统的crontab定期执行脚本或者Java程序。
在更早的时候，曾经试过quartz，但后来因为quartz创建的线程属于JVM而不是Web容器，导致停止或
重新部署应用时线程并未终止，因此后来跑java程序例行任务的话，主要就
是单独运行jar文件。</p>

<p>时过境迁，了解到Spring已经接管了定时任务的线程处理，之前在
Web容器里跑多线程任务的最大隐患已经不存在了，所以尝试了一下在
Spring中使用例行更新。</p>

<p>这样做最大的好处当然就是代码集中，容易维护也容易部署。</p>

<h3>功能说明</h3>

<p>整个功能并不复杂，需要对redis中的设备号列表进行遍历，对每一个
号码调用远程接口获取该号码的一些动态变化的信息。取得后，这些信息
的时效时间是6小时，在失效前的10分钟内，需要再次调用远程接口刷新缓存。</p>

<p>因为整个功能的瓶颈在于远程调用，为了提高并发，
调用远程接口采取多线程的方式。而遍历的性能极好，使用单线程就够了。</p>

<h3>使用组件</h3>

<p>采用Java中线程的Executors实现起来最简单直接。Executors实质上就是一个
线程池，每塞给一个号码，就调用派发一个线程进行处理。如果没有线程可派，
则放入队列中，如队列满了则会依据设置再增加线程数量。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span>  <span class="n">TaskExecutor</span> <span class="n">taskExecutor</span>
</span></code></pre></td></tr></table></div></figure>


<p>Executor确实是一个比较好的多线程编程方式，融合了Actor模式和队列，
使用起来也比较方便。</p>

<p>Executors可以由spring进行注入，在这个任务里比较合适的是采用ThreadPool*</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;taskExecutor&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;corePoolSize&quot;</span> <span class="na">value=</span><span class="s">&quot;5&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxPoolSize&quot;</span> <span class="na">value=</span><span class="s">&quot;10&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;queueCapacity&quot;</span> <span class="na">value=</span><span class="s">&quot;2500&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>corePoolSize是例行打开的线程数，queueCapacity是在没有core线程处理时的排队数量，
当超过这个数量时，会再启动线程直到maxPoolSize。如果都使用完毕，则可指定溢出时的抛弃处理方式。</p>

<p>派发任务由<code>taskExecutor.execute(new PollItInterfaceTask(mdn))</code>表达，
要同步的数据通过mdn传入。</p>

<p>此外，因为遍历的线程执行速度快，而workers可能需要更长时间才能完成队列中的任务，
为防止重复提交设置了一个多线程会并发访问的集合<code>private Set&lt;String&gt; mdnInQueue = new ConcurrentSkipListSet&lt;String&gt;(); //用于记录已安排执行但还未执行的号码</code>
。整个代码的情况如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">sanss</span><span class="o">.</span><span class="na">toolbar</span><span class="o">.</span><span class="na">job</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.HashSet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.TimerTask</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.concurrent.ConcurrentSkipListSet</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.logging.Log</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.commons.logging.LogFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Assert</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.core.task.TaskExecutor</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.sanss.toolbar.service.CacheItInterfaceQueryService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*多线程发起的、向IT抓取用户套餐信息的线程池执行者，由spring中触发，根据接口run()*/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PollItInterfaceTaskExecutor</span>  <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="n">Log</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LogFactory</span><span class="o">.</span><span class="na">getLog</span><span class="o">(</span><span class="n">PollItInterfaceTaskExecutor</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">mdnInQueue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentSkipListSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span> <span class="c1">//用于记录已安排执行但还未执行的号码</span>
</span><span class='line'>  <span class="nd">@Autowired</span>
</span><span class='line'>  <span class="n">CacheItInterfaceQueryService</span> <span class="n">cacheItInterfaceQueryService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/*实际被多线程执行的任务,获取在队列中存放的mdn*/</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">class</span> <span class="nc">PollItInterfaceTask</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">private</span> <span class="n">String</span> <span class="n">mdn</span><span class="o">;</span>
</span><span class='line'>      <span class="kd">public</span> <span class="nf">PollItInterfaceTask</span><span class="o">(</span><span class="n">String</span> <span class="n">mdn</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">this</span><span class="o">.</span><span class="na">mdn</span> <span class="o">=</span> <span class="n">mdn</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">cacheItInterfaceQueryService</span><span class="o">.</span><span class="na">setCacheFlux</span><span class="o">(</span><span class="n">mdn</span><span class="o">);</span>
</span><span class='line'>          <span class="n">mdnInQueue</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">mdn</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Thread</span> <span class="n">currentThread</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">();</span>  <span class="c1">// 获得当前的线程  </span>
</span><span class='line'>          <span class="n">String</span> <span class="n">threadName</span> <span class="o">=</span> <span class="n">currentThread</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>          <span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="n">threadName</span> <span class="o">+</span> <span class="s">&quot;: 刷新下面号码的cache: &quot;</span> <span class="o">+</span> <span class="n">mdn</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">TaskExecutor</span> <span class="n">taskExecutor</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">PollItInterfaceTaskExecutor</span><span class="o">(</span><span class="n">TaskExecutor</span> <span class="n">taskExecutor</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">taskExecutor</span> <span class="o">=</span> <span class="n">taskExecutor</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//任务出发后，被run自动执行的任务。首先获得所有需要提前取得IT流量信息的hashkey集合，随后遍历集合分别取出相关的一系列mdn，</span>
</span><span class='line'>  <span class="c1">//之后根据mdn检查ttl信息，发现小于500秒就安排Executor执行任务。</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doit</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">tlbKeys</span> <span class="o">=</span> <span class="n">cacheItInterfaceQueryService</span><span class="o">.</span><span class="na">getAllTlbsetQueryList</span><span class="o">();</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">//号码列表总数</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">//本轮需要刷新的</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">hshkey</span> <span class="o">:</span> <span class="n">tlbKeys</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">mdns</span> <span class="o">=</span> <span class="n">cacheItInterfaceQueryService</span><span class="o">.</span><span class="na">getAllFieldsByAKey</span><span class="o">(</span><span class="n">hshkey</span><span class="o">);</span>
</span><span class='line'>          <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">mdn</span> <span class="o">:</span> <span class="n">mdns</span><span class="o">.</span><span class="na">keySet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>              <span class="kt">long</span> <span class="n">ttl</span> <span class="o">=</span> <span class="n">cacheItInterfaceQueryService</span><span class="o">.</span><span class="na">ttlFlux</span><span class="o">(</span><span class="n">mdn</span><span class="o">);</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">ttl</span> <span class="o">&lt;</span> <span class="mi">500</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="k">if</span> <span class="o">(!</span><span class="n">mdnInQueue</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">mdn</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                      <span class="n">mdnInQueue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">mdn</span><span class="o">);</span>
</span><span class='line'>                      <span class="n">taskExecutor</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">PollItInterfaceTask</span><span class="o">(</span><span class="n">mdn</span><span class="o">));</span>
</span><span class='line'>                      <span class="n">count</span><span class="o">++;</span>
</span><span class='line'>                 <span class="o">}</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="n">total</span><span class="o">++;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;本轮刷新&quot;</span><span class="o">+</span><span class="n">count</span><span class="o">+</span><span class="s">&quot;个记录, 共有&quot;</span><span class="o">+</span><span class="n">total</span><span class="o">+</span><span class="s">&quot;个记录&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// TODO Auto-generated method stub</span>
</span><span class='line'>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;开始执行 %s ...%n&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Date</span><span class="o">());</span>
</span><span class='line'>      <span class="n">doit</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>CacheItInterfaceQueryService是项目中的一个服务模块，负责具体设置缓存。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- 定期去IT接口轮训的部署 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;taskExecutor&quot;</span> <span class="na">class=</span><span class="s">&quot;org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;corePoolSize&quot;</span> <span class="na">value=</span><span class="s">&quot;5&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;maxPoolSize&quot;</span> <span class="na">value=</span><span class="s">&quot;10&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;queueCapacity&quot;</span> <span class="na">value=</span><span class="s">&quot;2500&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;pollItInterfaceTaskExecutor&quot;</span> <span class="na">class=</span><span class="s">&quot;com.sanss.toolbar.job.PollItInterfaceTaskExecutor&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>           <span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">&quot;taskExecutor&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>     <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;springScheduleExecutorTask&quot;</span>
</span><span class='line'>        <span class="na">class=</span><span class="s">&quot;org.springframework.scheduling.concurrent.ScheduledExecutorTask&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;runnable&quot;</span> <span class="na">ref=</span><span class="s">&quot;pollItInterfaceTaskExecutor&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;delay&quot;</span> <span class="na">value=</span><span class="s">&quot;1000&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- 每次任务间隔 一分钟--&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;period&quot;</span> <span class="na">value=</span><span class="s">&quot;60000&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span><span class='line'>
</span><span class='line'>     <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&quot;springScheduledExecutorFactoryBean&quot;</span>
</span><span class='line'>        <span class="na">class=</span><span class="s">&quot;org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;scheduledExecutorTasks&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;list&gt;</span>
</span><span class='line'>                <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">&quot;springScheduleExecutorTask&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/list&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/property&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>避免不了的配置如上，<code>taskExecutor</code>已经在前面描述过，第二段的<code>pollItInterfaceTaskExecutor</code>就是把线程池执行者
作为参数传给自己编写的任务的构造函数，然后第三段定义一个周期执行的任务，设置好执行的间隔，runnable要提供自己编写的业务类（第二段中的内容），
最后第四步把这个周期任务交给Spring的<code>ScheduledExecutorFactoryBean</code>工厂来负责管理。
需要注意的是，ScheduledExecutorFactoryBean是spring4中的写法，在spring3中还是另一套描述方式，虽然功能差不多。
但在版本升级时，这是一个不大不小的坑。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有点无聊的汽车发布会]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/09/10/you-dian-wu-liao-de-qi-che-fa-bu-hui/"/>
    <updated>2014-09-10T22:12:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/09/10/you-dian-wu-liao-de-qi-che-fa-bu-hui</id>
    <content type="html"><![CDATA[<p>以成都车展为主，陆陆续续看了一些汽车新品的发布会，感觉这些厂家也真够无聊和没谱的。
以今天刚刚结束的广本缤智为例，整了个发布会最后出来说1.8L的低配低于14w，1.5L的低配低于13w，但先期
上市的只有1.8，1.5的要到明年一季度。这里面就有很多问题。</p>

<p>第一，最低配的车型通常不是销售的主力。说一个不是主力的入门车型上限并无多少实际意义。<br/>
第二，如果非要说上限，那也应该是顶配的。顶配小于多少才是真的立了一个价格上限。<br/>
第三，对广本而言，乞丐版一般是手动的，和自动挡本身就存在较大的定价差异，
所以以最低版的上限来作为发布价格，参考意义就更小了。
第四，明确地给出每一档的多少价钱有那么难吗？中国市场目录价格和销售价格可以差好几万，
卖的好就加价卖不好就减价，即使公布出来以后其实回旋空间依然很大。</p>

<p>现在这种模模糊糊的定价发布会，<strong>只能说明厂家自己心里也没底</strong>。
作为一个成熟的消费品，这种举动只能显得企业相当不成熟。</p>

<p>再联想起前不久的昂科威发布会，扯了半天，公布了4款车型，但最后连个价钱都没有。
对比起来的话，广本倒是还比通用强一些。当然也只是五十步笑百步。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[老罗和王自如]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/08/30/lao-luo-he-wang-zi-ru/"/>
    <updated>2014-08-30T15:00:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/08/30/lao-luo-he-wang-zi-ru</id>
    <content type="html"><![CDATA[<p>老罗和王自如的pk可能是本周最热门的话题之一。
老实讲，起初我并没有在意这场pk，认为又是媒体和厂商联合的一种炒作。
所以当晚并没有看直播，也没刻意去找相关报道。只是后来先是微信圈的几个IT
帐号开始说起此事，比如区分什么是<strong>战略投资</strong> 什么是<strong>财务投资</strong>，后来
XCP的yyp又来了一篇作为车评人对评测媒体和厂商关系的探讨，
使得我昨晚去看了一下这场视频直播的对决。</p>

<p>先讲一个我看完之后的结论：
这一局老罗大获全胜，但对锤子手机没啥帮助。反而反应出两个人都是苹果粉，而且证明了苹果的工艺这七八年也是遥遥领先的。</p>

<p>个人虽然用着mac和pad，而且特别喜欢pad，但并不怎么粉苹果的东西。
尤其对于iphone，之前并不喜好，虽然老婆已经用了五六年的iphone了，但我看到了确实谈不上喜欢。
然而，通过老罗和王自如的辩论，iphone除了强在系统，其实在工艺上始终是领先很多的。07年的单面玻璃、10年的双面玻璃在当时
都是没厂商敢这么做的。又加上小米4鼓吹的金属边框也是iphone4s上就有的东西，反而让我觉得苹果的iphone真是太强大了，
炒作的结果是让普通人了解到了苹果手机的领先程度。</p>

<p>同时，我也不认为这对锤子手机有什么帮助。老罗是个不简单的人，豁得出能忽悠，但做智能安卓手机这档子事情他实在动手了
晚了一些。在山寨升级的小米，中兴华为等老牌通信设备生产商已经借助安卓占据重大份额的情况下，锤子想要再取得什么突破是很难的。
即使基础比老罗好的魅族或者oppo，想要有所作为都很难，所以老罗想在这方面取得成绩在我看来几乎是没有可能的。</p>

<p>也因此，我始终不看好老罗做的锤子手机。但我也不是锤子黑。作为消费者，自然乐于看见有人参与竞争。至于做生意或者创业，
总是成功的是少数。而前景不看好的情况下，如果能坚持下去其实需要更大的勇气。就像十几年前在京东买东西，觉得他们的站点挺一般的。
而在2005年看到淘宝后，觉得淘宝做的比京东完善的多。当时我的感觉是像京东这样的商家最好是入住淘宝，这样他们的页面可以好不少，
客户的检索可以简单不少。他们也不用再费钱去买网站或者雇人开发。不过，当时的京东如果按我的想法做，也就和如今千千万万个天猫上的商家没区别了。不可能独树一帜成为B2C的老大。</p>

<p>正因为看见过京东和淘宝的对比，对于那种在机会很小的情况下依然坚持自主奋斗的行为，在心底里我还是钦佩的。
毕竟大成功也会来自于这些可能吃力不讨好的小机会。</p>

<p>所以在锤子手机方面，我只能祝愿他们好运。而3000元的定价我是不太接受的。因为锤子很难比努比亚或者小米多什么东西。
CPU都是高通的，操作系统都是安卓上修补的，代工又都是富士康或者深圳等其他山寨工厂的，应用又是都能装的，而屏幕也都是采购的。
所以真的能形成差异的地方就不多，更别提差距了。</p>

<p>而说回老罗本身，他的话语和文案还是很有感染力的。不愧是曾经是新东方的名师。
这个能和他pk的人实在有限，王自如也只能自叹不如了。</p>

<p>说完厂商，最后说一下对媒体的想法。</p>

<p>在中国的环境下，媒体要生存，主要收入来源只能是厂商。网民管这种现象抽象出了一个名词:<strong>充值</strong>。
比如日产给汽车之家充值了，通用给新车评充值了。然后充值和拿投资就是两回事情了。</p>

<p>充值的话，厂商是你的客户，而且媒体可以向多个厂商要充值。一旦拿了厂商投资，那厂商就不是客户而是老板了。
就像同样是吃饭，我去麦当劳那是消费者客户，而麦当劳的董事长去就是投资者老板。而服务客户和服务老板显然就完全是两回事情了。
这也是王自如最大的败笔。毕竟拿人手短说的还是两个独立的角色，而自己投靠于谁之后，基本上连拿人手短的资格都没有。而是变成了任何员工
在合法的范围内都有维护自己公司利益的义务。评测机构做到这个程度，只能成为这几个公司的评测机构了。同时也失去了要求其他厂商充值的资格，
适合给自己的股东写公关供稿，连写软文的资格都没有。</p>

<p>这些媒体在这方面还真得学学汽车之家和新车评：</p>

<blockquote><p>我此前对Zealer了解也不多，但因为我自己也做一个评测媒体，也标榜“中立 专业 原创”，所以老罗和自如对评测机构/媒体应该怎么做这段对话，我最感兴趣。在我看来，再中立、客观的评测机构，也必须找到自己的创收渠道，Zealer早年好像卖过T恤、杯子等纪念品，这就是一种。被老罗“揭露”的“咨询顾问”和“修手机”也算是业务，但却存在服务不专业和合法性存疑的问题。正如王自如自己也说，现阶段生存是艰难的。</p>

<p>有无数人问过我新车评网作为中立专业机构，我们怎么生存？在这里可以小透露一下：新车评网也有来源于厂商的收入，例如项目合作和广告。一个媒体要做到权威，就得实现一种境界：你既赚A的钱(例如卖它的广告)，同时又做对A的报道(包括批评报道)，而读者/受众依然对你信服。王自如用以回应的“这是国外存在多年的成熟运作方式，华盛顿邮报就是”，说的就是这种模式。但是如果Zealer靠花投资的钱存活，就不能套用华盛顿邮报的例子，因为拿到投资不能作为收入。</p>

<p>要做到上述说的权威媒体运营模式，是非常讲究专业性的，既要操守，也要技巧，难度堪比走钢丝。“客户”和“用户”的利益要做平衡，两者都要服务好，要满意度高，要可持续发展。新车评网也做老罗提到的那种“咨询服务”，运用我们的专业性，为汽车厂商提供未上市产品的内部评测，可帮助厂商改进产品、包装销售话术等，这是对“客户”的服务。 但这类服务于厂商的产品不会成为新车评网的内容，因为内容是对“用户”的服务，必须保证用户的满意度。为了坚守内容公正性而拒绝某些合作的事情我们也常干。时下一种日渐流行的合作是“做读者都爱看的广告”，只要读者爱看，本身就代表了对读者也是有价值的，这可以说是“客户”和“用户”利益双赢的一种探索。当然要怎么做，这又是专业技巧了。</p>

<p>我感同身受王自如绝对是抱着理想、激情去做这份事业，但我给他的忠告是一定要找到独立生存与发展的出路。</p></blockquote>

<p>而作为一个消费者，对媒体的内容更要加以仔细分辩才行。没办法，在中国就是要成为各方面的专家。否则最后还是自己吃苦头。</p>
]]></content>
  </entry>
  
</feed>
