<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2015-07-21T16:18:26+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2015款本田CR-V 2.4两驱版入手]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/07/03/2015kuan-ben-tian-cr-v-2-dot-4liang-qu-ban-ru-shou/"/>
    <updated>2015-07-03T15:39:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/07/03/2015kuan-ben-tian-cr-v-2-dot-4liang-qu-ban-ru-shou</id>
    <content type="html"><![CDATA[<p>这次买车和一年多前买天籁已经完全不一样了。那时候对驾车用车并没有多少了解，总以为车是越大越舒服，
而实际当上司机之后，开始明白大车其实在上海开顾忌的东西多，停车也不方便，尽管车子本身的品质还是很好的。
对自己需要什么，什么开起来方便不再是懵懵懂懂的，有了较明确的想法。而里面最关键的一条就是不要比凯越长，
这属于整个购车的核心需求。</p>

<p>整个看车的过程持续的很长。从去年9月<a href="http://octopresszhangyu.herokuapp.com/blog/2014/09/10/you-dian-wu-liao-de-qi-che-fa-bu-hui/">缤智、昂科威准备发布开始</a>，备选名单可以有一长串，主要就是<a href="http://octopresszhangyu.herokuapp.com/blog/2014/09/30/yi-kuan-jin-qi-bi-jiao-guan-zhu-de-che-bin-zhi-vezel/">缤智、昂科威、换代逍客</a>，<a href="http://octopresszhangyu.herokuapp.com/blog/2014/10/18/ding-jie-huan-suan-he-li-de-lei-ke-sa-si-nx/">nx200</a>，再到<a href="http://octopresszhangyu.herokuapp.com/blog/2015/04/18/xin-kuan-crvhe-q3/">X1, Q3</a>以及<a href="http://octopresszhangyu.herokuapp.com/blog/2015/04/20/crv/">CR-V, RAV4</a>。</p>

<p>可以说把大部分国内销售的suv，35w以下的都考察过了。整个pk历程如下：</p>

<ul>
<li>缤智

<ul>
<li>9月发布时就看中了，但我不喜欢1.8排量的发动机，倾向于1.5直喷地球梦的，但后来3月底出来的1.5L的配置有太低了，于是放弃</li>
</ul>
</li>
<li>换代逍客

<ul>
<li>这个不提了，至今我仍然认为是最合适的，只是逍客可能要11月才上市，9月份是赶不上了，只能放弃</li>
</ul>
</li>
<li>昂科威

<ul>
<li>尺寸略微大了些，4米6多了。老婆还是认为太像GL8，而新出的1.5T又是搭配双离合的，于是放弃</li>
</ul>
</li>
<li>X1

<ul>
<li>认识的熟人说不好，家里也不想我们买bba，于是放弃</li>
</ul>
</li>
<li>Q3

<ul>
<li>优惠很多但服务费也很高，无试驾车，销售也比较傲慢，同属bba，也放弃了</li>
</ul>
</li>
<li>Nx200

<ul>
<li>虽然定价都还算合理，但2.0的版本配置太差，2.0T的价格还是有点高，小区停车环境也不好，不太舍得停那么贵的车，放弃</li>
</ul>
</li>
<li>RAV4

<ul>
<li>最后其实主要就是RAV4 pk CRV</li>
<li>试驾后不喜欢RAV4的A柱和方向盘转向，尽管其动力总成确实够强悍</li>
<li>无后排空调出风口、后备箱突出来一块也不爽，最后还是放弃了</li>
</ul>
</li>
<li>CRV

<ul>
<li>最大的原因是因为CRV在15年4月进行了大改款，而正好和我的购车周期碰上了，毕竟买新不买旧</li>
<li>2.4的地球梦直喷发动机也很馋人，而CVT试驾后感觉还是很轻快，至少也让我满意</li>
<li>新加的一些配置还是挺吸引人的，比如日行灯带、胎压校验、DA屏、蓝牙、发动机启停、并线辅助</li>
</ul>
</li>
</ul>


<p>上面还有3款销量很出色的SUV没有提到，途观、奇骏和翼虎。不选奇骏的理由很简单，已经有天籁了，同一品牌下的，实在太类似了不想再买一部几乎一样的车子。途观和翼虎没考虑的原因有点个性化，周边买的人太多了，老婆直接就给否了。莫非如此，奇骏、途观至少会比RAV4让我更加纠结买什么。 <br/>
而CRV的样子、品牌、尺寸、动力也让全家人达成了一致，所以很顺利地就下单提车了。
配置的选择也比较简单。肯定是要2.4地球梦发动机的，倾向于不要四驱系统，因为城市里开着没用反而增加上百斤的重量。而2.4顶配多的电动尾门和HID大灯对我的吸引力有限，如果是自动大灯的话可能又要纠结一番。所以直接选定2.4两驱。基本上该有的也有了，没有的再升级也没用。</p>

<p>两天开下来的驾驶感受。好的方面来讲，crv的开车压力还是比较小的，反光镜很大，视野也很好，车头很短所以看左右边距、转弯都比较轻松，方向盘很轻松，确实很好开。我感觉和4米5多一点的A级车驾驶感受更接近些，比开B级车的压力小。</p>

<p>不好的方面，发动机启停很鸡肋，每次上去都要关。这个倒也开始习惯了。
另一个不太习惯的地方是松刹车的时候总有声响。有人说是自动变速箱都有的特性，有人说是本田特色，还有说新车都这样。好吧，看看几个月后车子是否会改善。</p>

<p>方向盘倒是很好。怠速挪车时，方向盘很轻盈，速度起来之后方向盘又会加重，转起来都很舒适。
方向盘上的多功能按钮用起来也很爽，切换电台、切换里程信息、接听电话等都已十分方便。</p>

<p>配置上，还是有点无奈了，手动的东西多了些。比如无自动大灯，无感应雨刷，无自动落锁。比起B级轿车，SUV的配置始终是个短板.</p>

<p>137mm离地间隙是满载，大部分时候是不止的。正面上下马路很轻松，完全没压力。
目前来讲真正让我不满的主要是2点：
1. 倒车扭力太弱，屁股要直着倒进很小坡度的斜坡都要大脚轰油门到3000转。
2. DA屏很鸡肋，基本用不起来。</p>

<p>其他的都是小问题或者以后可能会好。比如松刹车时有格叽的声音（非自动启停），无法在停车场用遥控钥匙让车子发出声音提示车子所在方位（据说本田的车都这样，雅阁思域也这样子）。</p>

<p>另外就是配置少，这个只是看厂家的选择了，但是顶配也没自动大灯，没自动落锁，有自动启停却无电子驻车。可能，这对于一款日系家用suv来讲要求太多了。最大的缺点我目前认为还是倒车太无力，大脚轰油门是有很大隐患的。</p>

<p>总体说来，开起来还是挺开心的一款SUV。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[试驾CR-V]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/06/20/shi-jia-crv/"/>
    <updated>2015-06-20T14:29:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/06/20/shi-jia-crv</id>
    <content type="html"><![CDATA[<p>大约1个月前，去邯郸路上的东本4s店看了CR-V，无奈当时的4s还没试驾车，于是只能静态考察。
今天再去4s，终于有了新的试驾车，可以试驾了。</p>

<p>既然再去试驾了，意味着静态考察的结果是令人满意的。这车本身的空间是最让人满意的，后备箱十分平整，
尾门开关的感觉很爽。车子内部的空间也不小，前后排的距离都很宽裕，座椅高低也很适合中国人，无论男女。
对大块头来讲，上上下下进进出出车门也比轿车方便。后排的地台也很平整，中间几乎没有突起，后排也有空调出风口。
这些都是CR-V有优势的地方。</p>

<p>静态不满的地方，还是这个中控和内饰显得确实太廉价了。低廉的气息扑面而来。虽然用了些软性材质，但塑料感依然很强。
2.0的内饰是比较差的。对比同样是日系的天籁，皮革、中控的高级感都是明显不如的。</p>

<p>今天试驾的是2.4顶配，加速很轻巧，本田的CVT看来挺强悍。方向盘也是轻的，不过比rav4重一点。
A柱和rav4也差不多，有点档视线。当初2.0的内饰让人感觉比较粗陋，
到了2.4全皮的座椅，坐在里面依然掩饰不了铺面而来的廉价感，车厢感觉真的比天籁这类车差很多。
虽然是皮质的座椅和搁手的，但这个皮质手感不佳。
不过想要的是suv，也只能这样了。
后视镜的视野很好，看的很清楚。加速方面和凯越不比了，比天籁也还是快，看来直喷真有直喷的好处。开起来后方向盘会加重，
原地挪车的话方向盘可是足够轻的，适合单手揉轮。</p>

<p>总的来讲，此次试驾的结果让我相当满意，原本打算立刻下单的，不过因为家长的原因还要再等几天。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nscd]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/06/19/nscd/"/>
    <updated>2015-06-19T13:56:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/06/19/nscd</id>
    <content type="html"><![CDATA[<p>NSCD是name service cache daemon的缩写，主要用于在linux下对dns查询的结果进行缓存。
默认情况下，linux是不对dns进行缓存的，因此可能会对应用的性能产生影响。只有开启了nscd服务，才会拥有缓存。</p>

<p>服务的安装很简单，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>yum install nscd
</span><span class='line'>service nscd start
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以开启nscd的服务了。
如果本身就面临性能问题，可以直接测试一下看看性能有没有提高。除此之外可以通过下列命令检查一下效果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nscd -g | grep <span class="s1">&#39;hosts cache&#39;</span> -A 22
</span></code></pre></td></tr></table></div></figure>


<p>可以得到如下的信息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>hosts cache:
</span><span class='line'>
</span><span class='line'>            yes  cache is enabled
</span><span class='line'>            yes  cache is persistent
</span><span class='line'>             no  cache is shared
</span><span class='line'>            211  suggested size
</span><span class='line'>         216064  total data pool size
</span><span class='line'>            336  used data pool size
</span><span class='line'>           3600  seconds <span class="nb">time </span>to live <span class="k">for </span>positive entries
</span><span class='line'>             20  seconds <span class="nb">time </span>to live <span class="k">for </span>negative entries
</span><span class='line'>            139  cache hits on positive entries
</span><span class='line'>              4  cache hits on negative entries
</span><span class='line'>              8  cache misses on positive entries
</span><span class='line'>              6  cache misses on negative entries
</span><span class='line'>             91% cache hit rate
</span><span class='line'>              2  current number of cached values
</span><span class='line'>              4  maximum number of cached values
</span><span class='line'>              1  maximum chain length searched
</span><span class='line'>              0  number of delays on rdlock
</span><span class='line'>              0  number of delays on wrlock
</span><span class='line'>              0  memory allocations failed
</span><span class='line'>            yes  check /etc/hosts <span class="k">for </span>changes
</span></code></pre></td></tr></table></div></figure>


<p>其中有命中率，cache命中的次数等信息。positive是指查询成功，negative是指查询失败。</p>

<p>但是，很多情况下，可能开启nscd之后，会发现命中率一直为0。原因在于很多linux服务会采用直接访问的模式来读取缓存，
直读的模式性能更好，但因为不经过daemon，所以无法进行统计。解决办法是把<code>shared</code>的属性关闭。</p>

<p>修改<code>/etc/nscd.conf</code>，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   <span class="nb">enable</span>-cache            hosts           yes
</span><span class='line'>    positive-time-to-live   hosts           3600
</span><span class='line'>    negative-time-to-live   hosts           20
</span><span class='line'>    suggested-size          hosts           211
</span><span class='line'>    check-files             hosts           yes
</span><span class='line'>    persistent              hosts           yes
</span><span class='line'>    shared                  hosts           no
</span><span class='line'>    max-db-size             hosts           3355443
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[云梯越来越烂了]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/06/16/yun-ti-yue-lai-yue-lan-liao/"/>
    <updated>2015-06-16T21:46:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/06/16/yun-ti-yue-lai-yue-lan-liao</id>
    <content type="html"><![CDATA[<p>唉，云梯是越来越不给力了。之前的新加坡1站点还能用用，最近这个月来基本是没法用了。
绝对令人失望。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring In Action 4]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/06/01/spring-in-action-4/"/>
    <updated>2015-06-01T10:31:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/06/01/spring-in-action-4</id>
    <content type="html"><![CDATA[<p>大约两年前，又读了In action的第三版，感觉离实际的开发已经有点远了，里面讲的内容反应不了当时Spring主要的用法。于是换了
《Spring In Practice》学习，比当时的in action贴近实际反应现状多了。<br/>
好在，In action在14年年末又出了新的版本。
经典的Spring系列又出了第4版，这一版是完全跟上了Spring发展的脚步，呈现的也是最新的Spring开发内容，而且聚焦于Spring Web。</p>

<p>内容比较新颖，作者的文章也总喜欢和读者拉拉家常，所以整个书读起来也比较有意思。不过，这本书不适合完全没Java Web开发基础的读者，
其整个书还是写给已经使用Spring进行开发或者至少已经略懂什么是Java Web开发的人，所以，学这本书前必须要有一点基础。</p>

<h2>Spring的基础介绍</h2>

<p>这部分也是整个系列一直的拿手好戏，现在总结的是越来越精彩，在Xml配置和Java Config中也完全倒向后者了，不过更多的也是通过这两个配置结合了自动扫描的配置方法，即Annotation。</p>

<h3>Spring 的四大法宝：</h3>

<ol>
<li>PoJo</li>
<li>DI（依赖注入，取代各个类之间的内部new）</li>
<li>Aspect（Feature），给每个method加上chain，主要用于Transaction、logging、security、cacching这些领域</li>
<li>Template（JDBCTemplate等等)，即模板方法，用于减少冗长代码的写入。</li>
</ol>


<p>而这一切的基础是Java的动态编程，除了Java自带的反射，其实大量使用了CGLib库。</p>

<h3>Profile</h3>

<p>通过<code>@Profile("dev")</code>来表明在什么情况下使用下面的标注或配置，即激活哪一种配置属性。有两个变量可以指定值</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spring.profiles.active
</span><span class='line'>spring.profiles.default</span></code></pre></td></tr></table></div></figure>


<p>其中，<code>default</code>可以在web.xml中定义，而<code>active</code>可以在系统属性、环境变量、JNDI或者@ActiveProfiles中定义，因为<code>active</code>的优先级更高。</p>

<h3>其他一些标注</h3>

<p>@Primary 用于消除bean的歧义性（比如有多个同名或同类型、同接口），在声明是可以使用表明这个为主。<br/>
@Qualifier，用于一步一步的Narrow指定匹配，不过似乎耦合了点，个人觉得不推荐使用<br/>
@Scope，这个很关键，指定了生成bean使用的容器, Prototype是每次new一个，大部分默认是单例，还有基于Session和Scope的bean注入，解决了web开发时的有些信息注入的难题。具体可参看<a href="http://octopresszhangyu.herokuapp.com/blog/2015/05/19/httpsessionzai-springzhong-de-pei-fa-he-wen-ti/">HttpSession在Spring中的配法和问题</a>。</p>

<h2>Aop</h2>

<p>Aop 提供了在method的前后增加功能（Feature）的能力，而这些功能往往是针对业务某些统一的能力的，所以称之为切面，意在把日志、事物、安全等功能提取出来，并且Spring配套了一系列术语称呼AOP中的各个角色。
但本质上还是一种定义Hook的模式。</p>

<ul>
<li>Advice ， 功能本身</li>
<li>PointCut，实际需要使用的Join Points</li>
<li>Joinpoints，在哪些点（方法中插入）</li>
</ul>


<p>插入的时机有：
1. Before: method调用前
2. After all: method调用后
3. After returning success: method调用成功
4. After throwing: method调用出现例外
5. Around: 写法最复杂，需要把调用的chain写在Advice里面</p>

<p>具体用分为:<br/>
1. Introductions: 给现有的class <strong>加</strong>(新增)方法或属性, 类似加入一个模块
2. weaving（编织、插入）：代理插入，可以在编译时、加载class时以及运行时混入</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HttpSession在Spring中的配法和问题]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/05/19/httpsessionzai-springzhong-de-pei-fa-he-wen-ti/"/>
    <updated>2015-05-19T17:22:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/05/19/httpsessionzai-springzhong-de-pei-fa-he-wen-ti</id>
    <content type="html"><![CDATA[<p>最早出于使用struts2的习惯，在Spring中如果需要使用<code>HttpSession</code>，做法是把这个对象作为整个类的一个实例对象。</p>

<p>1</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Log</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LogFactory</span><span class="o">.</span><span class="na">getLog</span><span class="o">(</span><span class="n">TestController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Autowired</span>
</span><span class='line'>  <span class="n">HttpSession</span> <span class="n">session</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>后来因为担心Controller在Spring中是单例的（在struts2中是多例的），怕引出线程安全问题，于是把<code>session</code>放入了method中进行注入。</p>

<p>2</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@ResponseBody</span>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span>  <span class="n">produces</span> <span class="o">=</span> <span class="n">MediaTypes</span><span class="o">.</span><span class="na">TEXT_HTML_UTF_8</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">testSession</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Model</span> <span class="n">model</span><span class="o">,</span> <span class="n">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">hashCode</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>  <span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;val&quot;</span><span class="o">)!=</span><span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;val&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">i</span><span class="o">++;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&quot;val&quot;</span><span class="o">,</span> <span class="n">i</span><span class="o">%</span><span class="mi">3</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;hashCode: &quot;</span> <span class="o">+</span> <span class="n">hashCode</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">+</span><span class="n">hashCode</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>近日在学习Spring in Action的过程中，发现其实第一种方式下使用了<code>proxy 模式</code>, 实际被注入的类是<code>session  $Proxy38</code>这样的代理类，
类似于避免反复调用<code>createEntityManager</code>的做法，该代理类会寻找实际对应的session并进行操作,只是给controller注入了一个壳。</p>

<p>而第2种方法中，注入的则是标准的容器session: <code>org.apache.catalina.session.StandardSessionFacade</code></p>

<p>3</p>

<p>此外，受到推崇的是第三种写法，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="nd">@Scope</span><span class="o">(</span><span class="n">proxyMode</span><span class="o">=</span><span class="n">ScopedProxyMode</span><span class="o">.</span><span class="na">TARGET_CLASS</span><span class="o">,</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;session&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShoppingCart</span> <span class="kd">implements</span> <span class="n">Serializable</span><span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种写法将整个购物车变成一个scope属于session的bean，由spring注入并负责保存。</p>

<p>但这种写法我个人感觉有点过于抛离了web开发。尽管Spring的一大好处是取消对容器的依赖，从而做到测试的方便。但完全和Web容器隔离，变得不像Web开发也不是什么好的策略。
毕竟Session的概念几乎每个Web开发者都有，而scope=session则反而会增加沟通的难度。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[老罗和池建强，现代创业和打工]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/05/17/lao-luo-he-chi-jian-qiang/"/>
    <updated>2015-05-17T00:15:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/05/17/lao-luo-he-chi-jian-qiang</id>
    <content type="html"><![CDATA[<p>老罗和他的锤子手机是一直存有很大的争议，在去年<a href="http://octopresszhangyu.herokuapp.com/blog/2014/08/30/lao-luo-he-wang-zi-ru/">老罗pk刘翔</a>就显露无疑。</p>

<p>回过头来看9个月过去了，当初的判断有些是应验了：</p>

<ol>
<li>锤子手机的价格客户基本不买账，于是3000元的售价<strong>跌了500-1000</strong>。</li>
<li>老罗赢了王自如，但不代表能<strong>赢得市场</strong>，锤子手机依然需要大规模输血。</li>
<li><strong>老罗是个人物</strong>，继续招兵买马，虽然有点病急乱投医的意思，但意志确实坚定。</li>
<li>刘翔是只能唯雷军是从了，因为雷军已经<strong>是他的老板而不只是客户</strong>。</li>
</ol>


<p>上周稍微新鲜点的就是老罗把池建强老师招入麾下了。池老师是一个传统企业软件公司的技术负责人，
文章和mac方面的技术在程序员圈中还是相当有名的。文笔确实不错，难能可贵的是坚持笔耕不辍，长期能保持
较高的水准，这对一个非媒体的编辑而言还是很不容易的。
老罗给池建强的职务是：<strong>锤子科技云平台研发总监</strong>。
即锤子从传统软件企业那里挖了个人去负责电商和锤子云，这没啥好多说的，槽点是据说给的年薪是4赵多人民币。
让我感觉老罗太能烧钱了。后来了解到是在4月下旬的时候，郑刚在天使轮给罗永浩投了4000万， B轮又追加投资，
累计重仓已经超过一亿元人民币。也难怪锤子又有燃料可以继续前进。很可能就是因为投资确定拿到了，
然后这个雇人的举动也就公布了。如果之前4kw（其实应该还有其他投资）就做出了产品上市，那这6kw至少可以坚持不少时间的，
毕竟主要就是付工资而不是开模具了。</p>

<p>老罗会不会因为此事成功？在我看来，老罗成功的可能性始终很小，能烧钱当然就能继续。而招入池老师很可能跟
锤子能不能混出来的相关性也有限，即成功了可能跟这次举动关系不大、失败了可能就更没关系。毕竟能否成功取决于
太多的因素。</p>

<p>回想起Fenng写的如今创业的描述，确实现在创业好像是也有点像打工了：是有人出钱的，只是创业者的自主权很大，
回报比普通打工更多，虽然成功几率依然很小，但创业的风险和难度都实打实地降低了。
烧别人的钱做事情的后果是好是坏很难讲，有好有坏只是一种笼统的说法，我目前也分析不出来到底是好处多还是坏处多。
但是，这肯定代表着一种活力，这也是过去十几年IT行业能快速发展的基础动力之一。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[地铁二号线限流与陆家嘴上海中心]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/05/05/di-tie-er-hao-xian-xian-liu-yu-lu-jia-zui-shang-hai-zhong-xin/"/>
    <updated>2015-05-05T23:05:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/05/05/di-tie-er-hao-xian-xian-liu-yu-lu-jia-zui-shang-hai-zhong-xin</id>
    <content type="html"><![CDATA[<p>微博上的<strong>上海发布</strong>公布了如下信息，大意是二号线陆家嘴站和世纪大道站将在高峰时期限流。</p>

<blockquote><p>即日起在高峰时段对江苏路、静安寺、陆家嘴、世纪大道等4站采取限流措施，包括关闭部分自动扶梯、利用限流栏杆减缓换乘速度等。</p></blockquote>

<p>对于二号线如今拥挤情况的认识我是上月外出开会才进一步感受到更加严重了。
越来越挤可以预料，挤成这样还是出乎意料。结合另一则新闻，猜测大概是这么回事情。</p>

<p>根据解放日报的<a href="http://www.jfdaily.com/shanghai/bw/201411/t20141127_998633.html">上海中心将建成全球最高观光厅</a>,</p>

<blockquote><p>今年(2014)年底前，陆家嘴地区共有9个商办楼宇项目竣工，其中陆家嘴世纪金融广场3幢办公楼等6项商办楼宇已投入使用，上海中心大厦等3项楼宇正进行装修收尾工作.</p></blockquote>

<p>这意味着包含上海中心在内，从去年下半年至今大约有9个办公楼竣工。
而且目前陆家嘴地区竣工的写字楼都不会太矮，意味着普遍是巨型的办公楼。
巨型办公楼是什么概念？</p>

<p>以上海中心为例，建筑面积433954平方米，建筑主体为118层，以人均可分配10平方米计算，
可容纳4万3千人在里面办公。官方给出的数字是3万，和我自己估算的也差不多。9个这样的大楼，
就是说新增了30万个供人办公的block，以目前的经济热度而言基本可以满员，或者会逐步爆满。
那就是说新增了30万职员在那里上班，陆家嘴站将一下子增加30万高峰客流。
即使强如上海，也没有一个区域真能一下子承担多出来的那么多客流量。</p>

<p>而一个能容纳4万人办公的大楼，只准备了2000个停车位。真的就把所有的交通压力都丢给了地铁了。如此高的密度不以为耻，反以为荣，实在令人无语。</p>

<p>我的结论很简单，二号线世纪大道、陆家嘴的限流主要是陆家嘴又有包括上海中心在内的几幢巨型商务楼竣工并陆续投入使用造成的。脱离了以人为本这个中心思想，一切最终都将没的谈。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring 4 中的新东西]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/05/04/spring-4-zhong-de-xin-dong-xi/"/>
    <updated>2015-05-04T14:30:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/05/04/spring-4-zhong-de-xin-dong-xi</id>
    <content type="html"><![CDATA[<p>Spring还在继续提高与演进中。</p>

<h3>3.1中的新东西</h3>

<ul>
<li>environment profiles，支持development、test和production等条件下独特的配置</li>
<li>增加enable annotations，在Java文件配置中</li>
<li>Declarative caching support，像支持事务一样支持缓存</li>
<li>支持Servlet 3.0，包括在java文件中声明servlets和filters，而不仅仅是在web.xml中</li>
<li>JPA支持的提升，可以不再需要persistence.xml</li>
<li>自动绑定路径便利给model属性</li>
<li>支持对Accept和Content-Type消息头的匹配，通过@RequestMappingproduces</li>
<li>绑定部分二进制表单请求给方法参数，通过@RequestPart，比@RequestParam更强大（只能对请求参数数据绑定，key-alue格式），而@RequestPart支持如JSON、XML内容区数据的绑定</li>
<li>flash属性的支持</li>
<li>JpaTemplate和JpaDaoSupport让位于EntityManager</li>
</ul>


<h3>3.2中的新东西</h3>

<ul>
<li>支持servlet 3中的异步请求，使得一个请求可以在独立的线程中被处理，让servlet线程可以处理更多的请求</li>
<li>Spring MVC的test框架，包括RestTemplate的测试支持</li>
<li>@controllerAdvice使得@ModelAttributes等控制器的方法可以在单个类中重新组织</li>
<li>ContentNegotiatingViewResolver</li>
<li>@MatrixVariable</li>
<li>Rest方面的改进与支持</li>
</ul>


<h3>4.0中的新东西</h3>

<ul>
<li>WebSocket的支持，包括JSR-356中Java API对WebSocket的支持</li>
<li>SockJS/STOMP对WebSocket和消息模块的封装</li>
<li>Java 8 特性的应用，比如lambda。callback interface的使用变简单了，如RowMapper和JdbcTemplate</li>
<li>Java 8中的时间日期api</li>
<li>RestTemplate的一个异步版实现</li>
<li>新增对JMS 2.0 JTA 1.2， JPA 2.1的支持</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CR-V]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/04/20/crv/"/>
    <updated>2015-04-20T23:22:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/04/20/crv</id>
    <content type="html"><![CDATA[<p>改款CR-V终于在今天，4月20号公布售价了。东本这次还是很务实的，
发布会没有整很多没用的，简洁明了直接到位。</p>

<p>和对比配置预料的差不多，果然是2.0官降两万，2.4变化不大。不过2.4的顶配也降了1万多。</p>

<p>2.4的主力目录价没优惠肯定让一部分人失望，2.0的官降2万，基本也差不多了。</p>

<p>2.0是必须降的，这次也确实没增加什么东西。</p>

<ul>
<li>日行灯看过照片，很残废的。</li>
<li>ESP本来本田就算厚道，老款CR-V上没装的版本并不多。</li>
<li>坡道辅助是搭配CVT才需要的，如果是AT压根不需要这东西，当然不用认为是新增的。</li>
<li>这套胎压监测是纯软件实现的，当然软件也是要研发成本的，只是配给2.0也不会增加成本。</li>
</ul>


<p>所以，真真切切提高的也就只有发动机启停这一项了。再看看2.0的配置，很明显就是用来跑量的，官降2万我是觉得也差不多了。</p>

<p>其实对2.0来讲，原厂弄个雷达，再配个低分辨率的影像，就会好很多。不过这个4s估计都会加装的。
只是要原厂服务的话，就让消费者必须去选高配。
但CRV在一些不能自己改的部分，车身稳定、气囊什么的，低配也都配的很到位了。</p>

<p>我是觉得这个定价还是挺合理的。毕竟老款2.4，da屏只有顶配导航版才有，那个定价是26.28万，优惠完了也要23万以上。本来就是按23.28万左右来估计的。
不过不是每个人都像我这样不去横向比较的。因为途观和翼虎这两款坚决不要，有了天籁又不太想再考虑奇骏，毕竟还想有点新鲜感。RAV4的鼓起的后备箱地台实在不喜欢。对我来讲，现在这样的带DA屏的CRV是完全可以接受的了。不出意外，下半年的车应该就是CR-V, 2.4两驱豪华版。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新款CR-V和Q3]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/04/18/xin-kuan-crvhe-q3/"/>
    <updated>2015-04-18T15:57:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/04/18/xin-kuan-crvhe-q3</id>
    <content type="html"><![CDATA[<p>改款CR-V即将上市，最近花时间关注了一下。
首先承认新款的配置还是很吸引我的。在我看来必备的配置：倒车影像，倒车雷达，电动座椅，蓝牙usb，
这些都有了。动力组合中的发动机绝对先进，据评测和CVT搭配其声音也并不单调。
中控和前脸的效果都还令我满意。虽然价格还未公布，但以目前CR-V的销量以及整个紧凑型SUV市场竞争的激烈程度而言，
其优惠幅度很难全部取消。这也意味着价格不会比现在目录价格更高，应该是优惠收窄一些，比如收一半。。</p>

<p>但是，当和车型规格低一级、品牌高一筹的奥迪Q3相比，差价又很接近了。
而以普通上下班代步和家用标准来看，实际使用效果也相差不大。也难怪日系车在中国如今的日子不好过。
特别在乎钱的，会倾向于现代和自主品牌。而高一级的BBA价格在优惠17个点之后，
下压后的价格与日系高配版本基本重叠，必然形成很大的压力。即有点追求的车主又会去选择BBA的车子。</p>

<p>于是日系车在华实际卖出的车子，75%都是低配的。这个对品牌和车子的长远发展都是不利的。而且这个局并不好破。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[小米拖线板]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/04/14/xiao-mi-tuo-xian-ban/"/>
    <updated>2015-04-14T16:59:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/04/14/xiao-mi-tuo-xian-ban</id>
    <content type="html"><![CDATA[<p>上礼拜4月8日入了一个<a href="http://www.mi.com/powerstrip/#init">小米拖线板</a>，使用近一周后来评价评价。</p>

<p>小米的这款拖线板吸引我的地方是3个做在板上的USB插口，可以提供最大每口2A的输出，3个同时工作时可以提供各1A的输出。对于现在家中主要以苹果设备为主的情况，这种配置还是很有针对性的。
买回来之后，确实可以把给pad iphone min等的充电器都收起来了。而且据说其待机的功率只有0.22w，可谓很节能环保。也确实能自动识别是何种设备，并提供相应的电流进行充电。</p>

<p>在做工和售价方面也算和目前市场主流的拖线板匹配，尽管实际拿到手里的东西感觉和小米的宣传图片还是有很大的差距。但比起公牛等，也不算差。整个还算比较小，携带还算方便。</p>

<p>说完好的，再说点不足的。
最主要的，插口数量还是有点少，毕竟算上3个usb口子，也至多算是六口的拖线板，家用的话还是有点不太够的。</p>

<p>其次，儿童安全门虽然安全了，但也过重了些，插拔相对费劲些。如果这个东西是放在单位里的，那基本没多大意义了。因为单位笔记本上的usb插口还是很多的。</p>

<p>这个产品亮点突出，但真的用起来发现还是有点不太够。考虑到49元的售价，也算值得回来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自己生产sdoc]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/04/09/zi-ji-sheng-chan-sdoc/"/>
    <updated>2015-04-09T12:26:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/04/09/zi-ji-sheng-chan-sdoc</id>
    <content type="html"><![CDATA[<p>很长时间以来，使用ruby rails查api时都喜欢用Searchable API，又称sdoc。
原先都是直接去sdoc维护的站点下载的，只是这个站点的更新频率越来越低，所提供的ruby和rails的版本也略老，于是决定自己使用sdoc的gem来生成一下。</p>

<ol>
<li><p>先安装sdoc， <code>gem install sdoc</code>, 安装完成后会新增两个可执行文件<code>sdoc</code>和<code>sdoc-merge</code></p></li>
<li><p>进入自己下载的ruby源代码的父目录，执行
<code>sdoc --main ruby-2.2.1/README.md  -x test -x example -x bin -N -x lib/rdoc  --title "Ruby 2.2" --op ~/sdocruby-2.2 ruby-2.2.1 ruby-2.2.1/README</code></p></li>
</ol>


<p>其中，ruby-2.2.1是当前rails的版本，&#8211;op指示生成的sdoc所在的目录，-x是不要去解析这些内容，运行几分钟后，文件就生成了。</p>

<p>然后把生成的目录放到自己方便的地方即可。</p>

<p>参考链接：</p>

<p><a href="http://pjkh.com/articles/building-your-own-rails-and-ruby-searchable-api-docs/">1</a>
<a href="http://pan.baidu.com/s/1i3vgC09">2 懒人下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[云梯]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/03/28/yun-ti/"/>
    <updated>2015-03-28T23:03:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/03/28/yun-ti</id>
    <content type="html"><![CDATA[<p>众所周知，在我国想要自由地访问互联网是有很大阻碍的。目前来讲，突破这个阻碍的方式就是vpn。
自己买vps后装vpn是最独立的方式，但成本较高，毕竟vps也不便宜。
如果购买服务的话，云梯在这方面做的还是相当出色的。</p>

<p><a href="http://datatizi.com/?r=f6301c426c6b45bb">购买链接</a>，这是通过我介绍购买的云梯链接，
有兴趣者建议可以从此入口进入。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLMAP手记]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/03/06/sqlmapshou-ji/"/>
    <updated>2015-03-06T16:37:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/03/06/sqlmapshou-ji</id>
    <content type="html"><![CDATA[<p><a href="http://sqlmap.org/">SQLMAP</a>确实是一个神器，而<a href="http://www.binarytides.com/sqlmap-hacking-tutorial/">这篇文章</a>则从判断是什么库开始，
历经获取dbs，获取单个db中的tables，获取单个table里面的字段，直至获取每个记录每个字段的数据，做了一步一步细致的讲解。</p>

<p>其实SQLMAP的用法真的挺暴力的。基本通过穷举的办法，根据页面返回内容的变与不变来判断输入的条件是否成立，以此来断定某些信息是否存在。
很脏很暴力的做法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书列表2015]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/02/20/to-read-list/"/>
    <updated>2015-02-20T15:40:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/02/20/to-read-list</id>
    <content type="html"><![CDATA[<h3>技术类</h3>

<ol>
<li><a href="">spring in action 4</a> 经典书籍又除了第4版，很值得一读和学习。</li>
<li><a href="">Storm分布式实时计算模式</a> 可以学习一些场景，storm是简化版的hadoop，只管计算不管存储。</li>
<li>FRW,Beck. Refactoring: Improving the Design of Existing Code,1999.</li>
<li>Eric Evans. Domain-Driven Design.</li>
<li>Beck. Smalltalk best practice patterns, 1996.</li>
<li>Donald C. Gause, Are you lights on? 1990.</li>
<li>张昊，Linux Shell编程从入门到精通。</li>
<li>Gourley D, Totty B. HTTP权威指南 O’Reilly</li>
<li>Shash D, Lazere. Out of their Minds: The Lives and Discoveries of 15 Great Computer Scientists</li>
<li>谭云杰,大象–Thinking in UML，水利水电</li>
<li>谢希仁.计算机网络，电工</li>
</ol>


<h3>经管</h3>

<ol>
<li>余江，韦尔奇，Winning（赢），中信</li>
<li>曾志尧, 35岁前要上的33堂理财课,中信</li>
<li>李笑来，把时间当做朋友</li>
<li>蔡康永，说话之道</li>
<li>高盛如何算赢世界</li>
<li>The Intelligent Investor</li>
</ol>


<h3>历史文化</h3>

<ol>
<li>[x] 哈夫纳，一个德国人的故事（哈夫纳1914~1933回忆录）。本书系统性并不强，但内容十分贴近现实，对个人的世界观冲击也较大。</li>
<li>[x] 喻大华，帝制往事。起初感觉没什么，随后越读越精彩的一本书。尤其是关于忠奸难辨、关键看领导人自己的这一段，解答了心中很久的疑惑。而对于变法及帝制合理性的解释，也很独到。让人手不释卷和想反复看的好书。</li>
</ol>


<h2>既往</h2>

<p> <a href="http://octopresszhangyu.herokuapp.com/blog/2013/01/11/to-read-list/">2013读书列表</a><br/>
 <a href="http://octopresszhangyu.herokuapp.com/blog/2014/03/02/to-read-list/">2014读书列表</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nano小卡和iphone6 plus]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/02/18/nanoxiao-qia/"/>
    <updated>2015-02-18T16:36:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/02/18/nanoxiao-qia</id>
    <content type="html"><![CDATA[<p>差不多一年前，因为用了<a href="http://octopresszhangyu.herokuapp.com/blog/2014/03/10/nubia-z5s/">nubia z5s 把sim卡剪成了micro-sim卡</a>。
而在昨天，因为几个巧合，最后我开始使用iphone6p，但这个手机又是只能用nano的，于是再次剪卡。</p>

<p>正常情况下，应该是去营业厅重新换nano卡的，但我的套餐要3月底才到期，只有到下个月才能去申请新的4G套餐。
如果现在去换卡，只能更换3G的nano卡，那么半个月后依然要去跑一趟营业厅再次换卡。两个折腾比较下来，
还是情愿自己剪卡了。</p>

<p>好在有之前的剪卡经验，依然是分两步走的方案。</p>

<ol>
<li>拨打*72189xxxxxxxx设置号呼叫转移，万一剪卡失败，则电话还能接的到</li>
<li>拿出卡，搞清楚自己的sim卡是三对六块还是四对八块，随后依照标准的nano卡大小，剪个大小类似的形状，目标是能放进卡套里</li>
<li>动手能力还行，运气也不错，新剪的卡插入后读取成功，于是拨打*720取消呼叫转移</li>
</ol>


<p>整个过程的体验还算不错。尽管下个月还要跑一趟营业厅，目前也依然只是3G网络，但好歹确实立马就用上了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[静态文件的url后缀md5化]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/01/22/jing-tai-wen-jian-de-urlhou-zhui-md5hua/"/>
    <updated>2015-01-22T09:55:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/01/22/jing-tai-wen-jian-de-urlhou-zhui-md5hua</id>
    <content type="html"><![CDATA[<p>长久以来，在jsp中引入css和JavaScript都是手工硬编的:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&#39;/toolbar/static/orderFlow/css/reset.css&#39;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;script</span> <span class="na">src=</span><span class="s">&quot;/toolbar/static/jquery/jquery.min.js&quot;</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>好处很明显，最接近实际生成的html，很直观。坏处在于重复性高，而且无法控制后台生成的随机数，这样不太利于nginx等处理静态资源的缓存。终极方案莫过于在后缀上加上md5指纹信息，这样既可以让nginx等通知浏览器长期缓存，而一旦文件发生变化也必然可以让浏览器再次发起请求获得css和JavaScript。最终生成的页面信息达到下面的效果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="nt">&lt;script</span> <span class="na">src=</span><span class="s">&quot;/toolbar/static/jquery/toolbar.js?2dc0cb76e7faa4c150fca76981cbcd20&quot;</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现包含两部分，一方面需要可以计算出静态文件的md5值，另一方面则是可以在jsp中调用并生成上述html。多番比较后，发现jsp中还是使用标签比较合适，所以继续写tag文件：</p>

<p>style.tag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="k">&lt;%@</span> <span class="n">tag</span> <span class="n">pageEncoding</span><span class="o">=</span><span class="s">&quot;UTF-8&quot;</span> <span class="n">import</span><span class="o">=</span><span class="s">&quot;com.sanss.toolbar.hepler.BaseHelper&quot;</span> <span class="k">%&gt;</span>
</span><span class='line'><span class="k">&lt;%@</span> <span class="n">attribute</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;file&quot;</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;java.lang.String&quot;</span> <span class="n">required</span><span class="o">=</span><span class="s">&quot;true&quot;</span> <span class="k">%&gt;</span>
</span><span class='line'><span class="k">&lt;%@</span> <span class="n">taglib</span> <span class="n">prefix</span><span class="o">=</span><span class="s">&quot;c&quot;</span> <span class="n">uri</span><span class="o">=</span><span class="s">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> <span class="k">%&gt;</span>
</span><span class='line'><span class="nt">&lt;c:set</span> <span class="na">var=</span><span class="s">&quot;ctx&quot;</span> <span class="na">value=</span><span class="s">&quot;${pageContext.request.contextPath}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&#39;${ctx}</span><span class="k">&lt;%=</span><span class="n">BaseHelper</span><span class="o">.</span><span class="na">rtg</span><span class="o">(</span><span class="n">file</span><span class="o">)</span> <span class="k">%&gt;</span><span class="s">&#39;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>javascript.tag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="k">&lt;%@</span><span class="n">tag</span> <span class="n">pageEncoding</span><span class="o">=</span><span class="s">&quot;UTF-8&quot;</span> <span class="n">import</span><span class="o">=</span><span class="s">&quot;com.sanss.toolbar.hepler.BaseHelper&quot;</span><span class="k">%&gt;</span>
</span><span class='line'><span class="k">&lt;%@</span> <span class="n">attribute</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;file&quot;</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;java.lang.String&quot;</span> <span class="n">required</span><span class="o">=</span><span class="s">&quot;true&quot;</span><span class="k">%&gt;</span>
</span><span class='line'><span class="k">&lt;%@</span> <span class="n">taglib</span> <span class="n">prefix</span><span class="o">=</span><span class="s">&quot;c&quot;</span> <span class="n">uri</span><span class="o">=</span><span class="s">&quot;http://java.sun.com/jsp/jstl/core&quot;</span><span class="k">%&gt;</span>
</span><span class='line'><span class="nt">&lt;c:set</span> <span class="na">var=</span><span class="s">&quot;ctx&quot;</span> <span class="na">value=</span><span class="s">&quot;${pageContext.request.contextPath}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;script</span> <span class="na">src=</span><span class="s">&quot;${ctx}</span><span class="k">&lt;%=</span><span class="n">BaseHelper</span><span class="o">.</span><span class="na">rtg</span><span class="o">(</span><span class="n">file</span><span class="o">)</span> <span class="k">%&gt;</span><span class="s">&quot;</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中使用到了BaseHelper里面的生成md5后缀级链接的方法<code>rtg(filepath)i</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/** 生成静态文件链接的公共方法，加上md5后缀或者时间戳。</span>
</span><span class='line'><span class="cm">   * @param resource</span>
</span><span class='line'><span class="cm">   * @return</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">rtg</span><span class="o">(</span><span class="n">String</span> <span class="n">resource</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">fileMd5</span> <span class="o">=</span> <span class="n">fileMD5s</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">resource</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">fileMd5</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;user.dir&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="n">fileMd5</span> <span class="o">=</span> <span class="n">getFileMD5</span><span class="o">(</span><span class="s">&quot;../webapps/toolbar/static/&quot;</span><span class="o">+</span><span class="n">resource</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">fileMd5</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">fileMd5</span> <span class="o">=</span> <span class="n">timestamp</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">fileMD5s</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">resource</span><span class="o">,</span> <span class="n">fileMd5</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;/static/&quot;</span><span class="o">+</span><span class="n">resource</span><span class="o">+</span><span class="s">&quot;?&quot;</span><span class="o">+</span><span class="n">fileMd5</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最不济的情况下，也能给文件加上启动日期的时间戳。</p>

<p>而在布局或者其他需要引入css和js的页面，直接使用这种代码即可:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="nt">&lt;tags:style</span> <span class="na">file=</span><span class="s">&quot;styles/css1.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;tags:javascript</span> <span class="na">file=</span><span class="s">&quot;jquery/jquery.min.js&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;tags:javascript</span> <span class="na">file=</span><span class="s">&quot;jquery/tl.js&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Safari不支持第三方cookie引起的session改造]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/01/21/safaribu-zhi-chi-di-san-fang-cookieyin-qi-de-sessiongai-zao/"/>
    <updated>2015-01-21T13:48:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/01/21/safaribu-zhi-chi-di-san-fang-cookieyin-qi-de-sessiongai-zao</id>
    <content type="html"><![CDATA[<p>近日的一个项目中，经常出现部分浏览器的session无法写入的事情。观察一番后，发现这些浏览器大都属于iPhone的Safari浏览器，尤其以iOS7版本居多。
问题本身并不难猜，应该就是cookie无法写入引起的。奇怪的是，部分同版本的Safari又是可以写入session的，所以这个问题很让人困惑。
反复查找，最后明白原因是：首先，对于第三方cookie，Safari升级后确实有禁止写入cookie的特性；其次，但是对于已存在cookie的情况，则尽管是第三方cookie依然还会写入。</p>

<p>就是因为其次这个因素存在，所以之前进行测试的一些手机照样可以写入session了。</p>

<p>问题是找到了，但怎么解决呢？Java中最简单就是让url中带入jsessionid，只是这个方式确实有好多年没有使用过了。虽然是第三方cookie，但因为测试时有过session了，所以还能继续写入。</p>

<p><code>response.encodeURL(url)</code></p>

<p>&#8211; 查文档，这个api的含义是对于如果是可以用cookie追踪sessionid的则不会在url后加入jsessionid，而对于不支持cookie追踪的则会在url中写入id。<br/>
这引发了我的好奇心，只有response怎么能判断cookie是否能追踪呢？</p>

<p>一看Tomcat的源码，实现倒也简单，就是根据当前session的id是否从cookie中获取的来决定的。如果首次访问网站，此时不会有sessionid，则自然不是从cookie追踪的，于是生成的url都有jsessionid。
二次请求上来，如果是cookie中读取的，则不再写入了。如果不是从cookie中读取的，则继续写入jsessionid。也就是说，<strong>不管是不是支持cookie写入，第一笔encodeURL的调用都会加上jessionid</strong>。</p>

<p>例如，第一次访问都会生成这样的链接 <code>http://192.168.202.72:8080/toolbar/home/nav;jsessionid=EFC1A53F48CC5BC9BE58F50830296FBB</code>, 如果再次访问就是<code>http://192.168.202.72:8080/toolbar/home/nav</code>.</p>

<p>这个东西的缺点公开的说法有如下两点：</p>

<ol>
<li>sessionid暴露在url链接中并不安全；</li>
<li>sessionid这样子会保存在地址栏中，容易引发保存后歧义，因为sessionid其实每一次都会是不一样的。</li>
</ol>


<p>简而言之就是这样的链接不好看外加安全性有一定的问题。</p>

<p>不过这个安全性问题如果从网络的角度来看有点勉强。因为http头也是明文传输的，只是浏览器中不显示罢了。以机器的角度来看，jsessionid放在header还是uri中的区别并不大。鉴于业务需要，还是采用吧。于是引发这种写法最大的毛病，需要在jsp中每个自己的链接都加上<code>&lt;%=response.encodeURL(url)%&gt;</code> 。此时不免想起如果都像<code>link_to</code>那样生成链接的话，改起来就方便多了。</p>

<p>Java Web的开发至今没有很方便的helper机制，能用用的还是tags的办法，于是写一个hrefto.tag放到tags下面。</p>

<p>hrefto.tag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="k">&lt;%@</span><span class="n">tag</span> <span class="n">pageEncoding</span><span class="o">=</span><span class="s">&quot;UTF-8&quot;</span><span class="k">%&gt;</span>
</span><span class='line'><span class="k">&lt;%@</span> <span class="n">attribute</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;uri&quot;</span> <span class="n">type</span><span class="o">=</span><span class="s">&quot;java.lang.String&quot;</span> <span class="n">required</span><span class="o">=</span><span class="s">&quot;true&quot;</span><span class="k">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">&lt;%@</span> <span class="n">taglib</span> <span class="n">prefix</span><span class="o">=</span><span class="s">&quot;c&quot;</span> <span class="n">uri</span><span class="o">=</span><span class="s">&quot;http://java.sun.com/jsp/jstl/core&quot;</span><span class="k">%&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">&lt;%</span> <span class="n">String</span> <span class="n">ctx</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getContextPath</span><span class="o">();</span> <span class="k">%&gt;</span>
</span><span class='line'><span class="k">&lt;%=</span> <span class="n">response</span><span class="o">.</span><span class="na">encodeURL</span><span class="o">(</span><span class="n">ctx</span> <span class="o">+</span> <span class="n">uri</span><span class="o">)</span> <span class="k">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在jsp中的应用主要是两句话，第一是引入，第二是调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="k">&lt;%@</span> <span class="n">taglib</span> <span class="n">prefix</span><span class="o">=</span><span class="s">&quot;tags&quot;</span> <span class="n">tagdir</span><span class="o">=</span><span class="s">&quot;/WEB-INF/tags&quot;</span><span class="k">%&gt;</span> <span class="c">&lt;!--hrefto.tag存放的位置--&gt;</span>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">id=</span><span class="s">&quot;help&quot;</span> <span class="na">href=</span><span class="s">&#39;&lt;tags:hrefto uri=&quot;/home&quot; /&gt;&#39;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>&lt;tags:hrefto uri="/home" /&gt;</code>就会调用hrefto.tag中的内容，生成链接。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[笔记本加了SSD]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/01/15/bi-ji-ben-jia-liao-ssd/"/>
    <updated>2015-01-15T23:05:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/01/15/bi-ji-ben-jia-liao-ssd</id>
    <content type="html"><![CDATA[<p>在13年8月拿到工作用的Dell E6430时，就有自己加一块SSD硬盘的想法。只是当时拿到之后发现原装的win7-64bit pro
也不错，使用了几个礼拜后也就不想再重装折腾了。另一个原因则是当时SSD的价格还略高，彼时我一心想的还是256GB的SSD。</p>

<p>半年多以前，给家里的台式机更换了浦科特的256-M6S之后，感觉台式机比几年前新配的时候更<strong>新</strong>了。半年下来，随意用用
256GB也就用了四五十GB，而我的mbp用了大半年也还剩余200GB以上。所以经过实际经历，表明在有机械硬盘的情况下128GB也是
有大量富余的。再考虑到128GB现在的价格已经非常亲民了，于是决定加一个SSD做系统盘并且重装机器。同时也是因为工作用的机器
也一年半了，性能有了较大的下降，也值得重装一下。</p>

<p>在得知建兴有一款性价比很高的128GB SSD之后，毫无犹豫地入了一款。</p>

<p><img src="http://octopresszhangyu.herokuapp.com/images/ssd/1.jpg" alt="建兴ssd" />
<img src="http://octopresszhangyu.herokuapp.com/images/ssd/2.jpg" alt="ssd文字" /></p>

<p>为了让原装的750GB机械硬盘继续发挥作用，加20块买了个光驱位的SATA接口的硬盘支架，两样东西合计399元。</p>

<p><img src="http://octopresszhangyu.herokuapp.com/images/ssd/3.jpg" alt="硬盘支架" /></p>

<p>上面这幅图里面是已经把机械硬盘装进去之后的效果了。</p>

<p>同时再拆下原装光驱的面板和扳手，下面这幅图是二者的对比。
<img src="http://octopresszhangyu.herokuapp.com/images/ssd/4.jpg" alt="光驱和硬盘支架" /></p>

<p>扳手
<img src="http://octopresszhangyu.herokuapp.com/images/ssd/5.jpg" alt="扳手" /></p>

<p>安装过程中唯一有点麻烦的就是SSD插入原本的HDD位置时，由于SSD偏薄，所以要让SSD尽量卡在两个原配的黑色橡皮支架上面一点，这样
才能确保SATA接口衔接上，否则是认不出SSD硬盘的。</p>

<p>硬件安装完成之后，就是OS的安装。OS安装完成之后，因为有了xxxx软件管家，使得装一些常用的应用简单了许多。
而经过一番忙(ze)碌(teng)之后，从启动时间上来讲，由几分钟缩短到了20秒左右；
<img src="http://octopresszhangyu.herokuapp.com/images/ssd/6.jpg" alt="image" /></p>

<p>从Tomcat启动Spring应用来讲，启动时间由30秒减小到了7秒钟；打开各色应用也自然更快了。
效果可谓立竿见影且始终会用到。</p>

<p>跑分的结果
<img src="http://octopresszhangyu.herokuapp.com/images/ssd/7.jpg" alt="image" /></p>

<p>SSD终于到了可以普及的一天了。</p>
]]></content>
  </entry>
  
</feed>
