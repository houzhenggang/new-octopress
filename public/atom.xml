<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2013-12-18T17:37:24+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[双标书下拍牌终于搞定]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/12/16/shuang-biao-shu-xia-pai-pai-zhong-yu-gao-ding/"/>
    <updated>2013-12-16T17:18:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/12/16/shuang-biao-shu-xia-pai-pai-zhong-yu-gao-ding</id>
    <content type="html"><![CDATA[<h2>最重要的东西最前面</h2>

<p>本月拍牌结果：</p>

<p>拍牌人数: 39625，投放数量：8500，成交均价：76093，最低成交价：76000，我的价格：76100。<br/>
经过11月的失利，本月采用了双标书，最后终于中标。而且，只中了一个，可以说是恰到好处。</p>

<h2>具体经过</h2>

<p>双标书的出法主要可以分为栈式和交叉式两种。 交叉式 最简单易懂。比如，标书1出75500，然后去76100等候，中间由标书2交错出75800并由这张标书守住最后的76400价格。 栈式 更美一些。标书1出75500，中间两个价格75800和76100都由标书2出，最后由标书1在76400收尾。</p>

<p>相对而言，栈式两张标书都中的概率低一些，交叉式的出价时间则更从容些。在覆盖能力上，二者是一致的，均比单标书高出一倍。
基本上是覆盖完整了。因为实际上出1500的机会已经是很少的，印象中至今还未出现。即使是1200的，也往往是29分之前已经涨过300了，最后才能暴涨那么多。这次涨的幅度在最后一分钟是创纪录的。照理，这个幅度在11月就该出现。如果当时出现，我也就不用再准备双标书了。但造化弄人，也是无可奈何的事情。</p>

<p>具体进程如下：</p>

<p>29&#8217;20&#8217; 前，应该是16秒左右吧，第1张标书出了75500；<br/>
29&#8217;38&#8217; ，第2张标书75800出价成功； <br/>
29&#8217;43&#8217; , 第1张标书76100出价成功；这也是最终的价格<br/>
然后，守候76400的标书就没有然后了。</p>

<p>我看见的可以出价的最后价格是76200,最后也没来得及随便把76400放出去。 最终结果是29’43&#8217;的这次出价中标。虽然失去了赚七八千的机会，不过毕竟省事不少，是最想要的结果。</p>

<p>如果是已婚人士，或者有父母亲戚也能申请车牌的话，最好是双标书伺候，必定能够杀死拍牌，或者更确切点把拍牌拍死。
如果不想自己来，请代理也没什么不行。社会越进步，服务业必然越发达。不过个人更喜欢DIY。</p>

<h2>单标书的策略</h2>

<ol>
<li>在29&#8217;0&#8217;，看是否已经涨过300，如果已经涨过300那么直接出75800等待，如果没到75200，则进入第2步</li>
<li>在29&#8217;20&#8217;，看是否已到75200，如果到则还是按75800伏击，如果没到就按75500伏击</li>
<li>无论第1步还是第2步，等到价格出成功后，一律都在当时的伏击价格上+300，再次等待&#8217;</li>
</ol>


<p>根据这十来个月的历史数据，这个策略都是奏效的。尤其是对这两个月，这个策略也是的奏效的。11月的失败就在于因为
人数一下子多了许多，个人还是有点慌了，没有坚持事先的计划安排。</p>

<p>当然，拍牌本身就是一个少数人能中的游戏，所以一旦大部分人采用相同的策略，其结果必然是集体失败。因此，
任何出价策略都是有局限的，而且必须与时俱进。</p>

<h2>对来年的预测</h2>

<p>市政府已经公布2014年会全年采用警示价，而且价格定在了2013年的最低价72600，客观地说，上海政府本地调控车牌最高价的决心和诚意都是足够的。
明年也是抄底的大好时机。而拍牌人数的多寡，取决于限外的政策究竟会不会加强。如果维持目前的状态，等个半年后可能拍牌比例就会回落。但是一旦
更多地向北京和天津靠拢，则拍牌人数再创新高并非难事。让我们拭目以待吧。</p>

<h2>真的麻烦还在前面</h2>

<p>拍牌，只是用车麻烦的第一步而已。其实整个用车都是相当麻烦的。从拍牌开始，到上路，到停车，到每天开，到每天加油，到开罚单，到刮刮碰碰，到交保险，
样样都不好对付。说美国人喜欢车是因为时间和爱，但对我而言，这两部分至少目前并不存在。所以想到车还是以烦居多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于Linux 的Oracle 数据库管理]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/11/30/ji-yu-linux-de-oracle-shu-ju-ku-guan-li/"/>
    <updated>2013-11-30T22:01:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/11/30/ji-yu-linux-de-oracle-shu-ju-ku-guan-li</id>
    <content type="html"><![CDATA[<p>云化工程里要装Oracle，于是研究了一下Oracle在Linux上部署的细节。最近一个礼拜基本查了很多资料，不过读了两本相对基础但又很重要的书后，还是有不少收获。</p>

<p>先说今天看完的这本原创。08年出版的书了，整个只有280页左右的篇幅，内容很精悍，废话很少，但又会把细节介绍的十分清楚。比如Linux各发行版和Oracle的兼容性，ext2（有点老了）的文件系统磁盘数据结构，bios-grub-linux的启动顺序等。</p>

<p>整本书是一个很简洁的linux常用功能的介绍，并以oracle安装维护为中心，展现了使用的方式。虽然有些地方相对简陋，但确属作者的经验之谈。有工程和实际经验才能提炼出来的东西。比如补充的配置环境命令别名<code>udump, bdump</code>等，安装用于sqlplus操作方便的<code>rlwrap</code>。当然还有一系列的shell脚本。</p>

<p>但限于篇幅，有些东西确实没谈。而且整本书的重点在于linux如何使用oracle，对oracle的介绍着墨很少。又比如讲了rman，只讲了怎么打开，怎么用许多东西备份，但没提及怎么用这些东西来恢复。但总的来说还是很值得一读的一本书。至少可以了解职业实施人员的部署情况。</p>

<p>整本书只花了一个下午就读完了，至少说明书的可读性不错。</p>

<p>第二本是一个老外写的翻译的书。不少评价不太好，但我读下来还是挺有收获。因为这部书是一本偏原理的书，作者喜欢把Oracle运行是怎么一回事情交代清楚。适合于对oracle的安装已经比较了解，但并不明白其中原理的层次阅读。读完之后，基本就可以自己判断该怎么玩了。很多人评价不高，是因为这本书对部署的细节交代的并不清楚，如果只是想拿来按部就班完成任务，这本书是会令人气馁的。</p>

<p>同时，作者又偏向于介绍一些计算机的基础知识。虽然很精悍这些介绍，但是不明白的人还是看不明白，看的懂的人才会觉得作者点到位了。所以这本书落得评价不高也十分正常。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[虎牌还是外牌]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/11/06/hu-pai-huan-shi-wai-pai/"/>
    <updated>2013-11-06T12:32:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/11/06/hu-pai-huan-shi-wai-pai</id>
    <content type="html"><![CDATA[<p>关于上沪牌和外牌似乎尚有争论，但目前看来其实是没必要的。
因为很简单，只要经济条件足够，情愿先上沪牌，如果确实米缺缺，那外牌也只能凑合一下了。
之所以这么选择，不是因为担心外牌会受限制。限制外牌是忽悠人的，买虎牌当前的主要意义在于保值和升值。</p>

<p>北京广州和上海是不一样的。拿北京来讲，拍牌前从不限制外地车牌进京，但一旦开始摇号了，外地牌照立马禁止进去。所以北京的情况是在市区开的车、尤其是居住在北京的车主基本都是上的京牌。因此，执行限制可以雷厉风行。</p>

<p>上海就不一样了。拍牌制度将近20年，上海人和居住在上海的外地人上外牌的比比皆是，这些车平时就开在这里，如果政府一声令下就可以禁止，那世界上的事情也太简单了。所以，要限的话，上海政府将面临很大的压力，牌照也会迅速往20w+跑去，这些都是政府不太愿意看见的。</p>

<p>毕竟上海拍牌制度执行了那么多年，对外地牌照从来没有严格的限制。
上海有200w辆车子的话，外牌车辆少说有100w。如果立刻强制限行，那么无非是逼着这些车主去换沪牌或者去提抗议。因为这100w人别无选择，除非坐视自己的车子成为一个年耗几万且不断贬值的摆设。</p>

<p>限制的政策要等这100w减少很多后才可能实施。按现在每年也就发10w+牌照的节奏，没个10年是降不到可以实施限制的条件的。
实际上很可能永远(几十年)也降不到那么低的数字。</p>

<p>不过虎牌真的在升值，上个外牌也就这样子，虎牌保值多了。因此，有米的话，还是拍虎牌吧。车这种东西开个几年反正要换的，买差点问题不大。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[看车大挪移记]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/11/03/kan-che-da-nuo-yi-ji/"/>
    <updated>2013-11-03T21:57:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/11/03/kan-che-da-nuo-yi-ji</id>
    <content type="html"><![CDATA[<p>终于抽空去看了下中意的车子，确实相当中意，但是整个的结果却发生了很大的漂移。</p>

<p>老婆和我想添一辆车，老丈人也想换一辆车，于是就开始筹划买车的事情。起初，岳父想换一辆SUV，大众的途观。他比较中意大众的车子。我们则对大众的车子不感冒，不过起初我最想买的是斯柯达的明锐，也是大众的。只是后来嫌新标黑色实在有点难看，于是开始转型。预算也一路提高。由于老婆不喜欢途观，所以suv基本没怎么考察，关注的重点始终都在三厢轿车上。</p>

<p>先在网上做功课，从斯柯达到福克斯，再到朗逸 速腾 思域 卡罗拉等，最后终于看上了东风日产的国产天籁。预算自然也节节攀升。考虑到家里如果有了一辆SUV的途观之后，买辆中大型的B级三厢还是有很大的互补性的。天籁吸引我的因素主要是下面这些：</p>

<ol>
<li>较大的空间，座椅等舒适性好</li>
<li>价格十分合我的胃口，属于恰到好处的位置</li>
<li>据说小毛病少，后期打理保养等相对省事</li>
<li>日产只嫁了东风一个中国公司，技术方面还是很扎实的</li>
<li>本人开车的偏好偏稳，以一慢二看三通过为准，天籁的动力风格与此相符</li>
</ol>


<p>所以，天籁的特性很符合我的需要。</p>

<p>当然，也有如下的一些不足：</p>

<ol>
<li>车身太长。4.8米的车比A级车要长30公分，对于停车来说难度增加不少，毕竟我不是老司机。</li>
<li>据说这车不适合女司机开。</li>
<li>虽然是中国产的车，但毕竟是日本牌子，尽管也是有部分欧洲血统，但日系车在近10年的中国是有一定额外风险的。</li>
</ol>


<p>但综合起来看，这确实是一款很不错的车，至少我是相当喜欢了。所以决定开始看车。</p>

<p>两个白天，逛了不少4s店，首当其冲去了东风日产。车子确实很大，空间、座椅、样子都没的说，岳父试驾一圈之后，也对此车相当满意。然而，老婆同时坐了下旁边的逍客，日产的SUV，觉得那车她更喜欢。</p>

<p>随后，熟人介绍去不远处的丰田看了锐志。这车的动力和操控性更好，还是后驱的、6釭发动机。用一个‘骚’字形容再合适不过。车确实是好车，不过我们倒不太东西。熟人是个爱车的人，喜欢操作运动型的车。</p>

<p>后来，自然又去了大众。在此过程中，明确了SUV的后背空间其实普遍不大。出于操作方便的需要，SUV的车身普遍是设计的骗紧凑的。高高的后备箱其实放不了什么东西。而且，途观的小毛小病还是挺多的，保养起来也相对费一些。
于是，岳父打消了买途观的念头，开始在帕萨特和天籁之间想做一个选择。于是又试驾了帕萨特。德国车的操纵风格比较硬和稳，帕萨特当然也是好车。地处上海，修理保养购买，甚至看车都是最方便不过的。但这个车毕竟偏公务了
一些，后排座椅也比较硬，没有天籁舒适。</p>

<p>彼此商量了一下，决定还是老丈人买辆大一些的轿车，我和老婆还是先开一下当前的车练手一阵子，明年再换逍客。但是对帕萨特还是天籁则犹豫不决。这时，熟人建议可以去雷克萨斯看看，那种轿车同时具备了天籁和帕萨特的优点。价格方面也还是可以接受的。</p>

<p>到雷克萨斯的专卖店一块，不得不承认，店的感觉是完全不同的。豪车的销售点的档次确实不一样。从装修的风格、派头到服务态度，都是很明显的变化。堪比经济型酒店一下子变成了五星级。当然，雷克萨斯和天籁的差距没那么大。
试了一款雷克萨斯ES，舒适性、操控性方面具备了天籁的优点，扎实稳定等方面也确实堪比帕萨特。终于，大家发现找到岳父最适合的车子了。</p>

<p>虽然我依然对天籁有着很深的感觉，但考虑到家里的车型搭配和起手阶段并不适合开大车以及老婆对逍客的喜爱，决定还是忍痛割爱。整个挪移的过程可以这么小结：</p>

<p>车辆1： 途观 -> 天籁、帕萨特 -> 雷克萨斯<br/>
车辆2： 明锐 -> 天籁 -> 逍客</p>

<p>虽然变化有点大，虽然最终无缘天籁，但变化后的组合还是很不错的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[车牌拍卖]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/10/28/chepai-paimai/"/>
    <updated>2013-10-28T22:33:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/10/28/chepai-paimai</id>
    <content type="html"><![CDATA[<p>这几日研究了一下拍牌，几个小tips如下：</p>

<ol>
<li>弹验证码的窗口需要3s，系统和GUI之间的时差是系统慢5s，所以投标需要预留8s  。</li>
<li>输入验证码一般在5s左右，所以整个过程预留15s为妙</li>
<li>实际操作时，往往引入伏击。其实就是一种先猜后提交的办法。伏击目前主要有两种模式。其一，在最低价上加价600，随后再加300.其二，在最低价上加价900，随后再加300.</li>
<li>在目前的投标比下2-3.5，如果两个人同时各按上诉的办法进行操作，则至少有一个会中。</li>
<li>秒杀确实很激烈。但是投标比例更关键。</li>
<li>无警示价时，第二阶段的价格会翻的更快一些。有警示价时，由于待拍的基数大，上涨会慢许多。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对无线网卡的折腾]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/10/08/back-and-forth-with-wlan-card/"/>
    <updated>2013-10-08T15:39:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/10/08/back-and-forth-with-wlan-card</id>
    <content type="html"><![CDATA[<p>换了新机器难免要折腾一番。折腾来折腾去，终于折腾到了无线网卡。最后的结果是拆了过去的intel 5300装给新机器，又花了539买了华硕N56u千兆双频路由器。</p>

<h3>原理</h3>

<p>Wifi标准802.11n的频带有2.4和5GHz两个，大部分路由器只支持前者。11年以后，支持5GHz的日益增多。</p>

<p>频带则有20和40MHz两种，一般前者全部开启，而后者就不一定了。</p>

<p>只有20MHz和2.4GHz的情况下，最大只有72Mbps； 同时有5GHz，则可以达到150Mbps。 无论是2.4还是5，同时使用40MHz的话，性能都可以翻倍。再加上一些其他的优化技术，最大可以达到300Mbps。</p>

<p>现实中，20<em>（2.4+5）的情况是很少的，一般150Mbps的是（20+40）</em>2.4。 然而，被割的太厉害的话，就只有20*2.4，那就只有72Mbps了。比如dell国内6430搭配的bcm制造的无线网卡。</p>

<h3>Dell 1504无线网卡</h3>

<p>这款网卡是dell让bcm代工的，而非常见的intel芯片网卡。博通公司的网络设备也久负盛名，国内的路由器大部分也是博通的芯片，然而这款
wlan网卡则有点残疾。第一没有5GHz的频段，第二不支持40M这一基带，最终结果就是明明是n的卡，实际性能只比802.11g的54Mbps好了没有多少，至多72Mbps。</p>

<p>并且，E6430本身也还是一台不错的机器，wifi配了3根天线，但是这块网卡却是只有2根天线。老的E6400倒是intel的5300网卡，3根天线且支持双频，于是最后决定利旧一下。虽然5300已经过气，但性能明显比1504还是要强的。</p>

<h3>更换结果</h3>

<p>三根天线:</p>

<p><img src="http://octopresszhangyu.herokuapp.com/images/screen_print/IMG_20131008_100132.jpg" alt="image" /></p>

<p>两根天线：</p>

<p><img src="http://octopresszhangyu.herokuapp.com/images/screen_print/IMG_20131001_161051.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些片子]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/09/01/yi-xie-pian-zi/"/>
    <updated>2013-09-01T18:41:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/09/01/yi-xie-pian-zi</id>
    <content type="html"><![CDATA[<p>过去一阵子看了不少片子，两部片子印象尤其深刻：</p>

<ol>
<li>虎胆龙威1</li>
<li>光荣战役</li>
</ol>


<p>先说第一部。虎胆龙威之前竟然真的一部都没看过，在看了第一部后，又看了另外的4部，但个人还行觉得第一部最棒。原因很简单，这是各方面都很完美的片子。</p>

<p>从片子的主题来讲，首开了在一个孤单的场合里对恐怖袭击的故事。作为动作片，具备了基本的场面火爆。恐怖分子组织有术，高帅富级别的，布鲁斯倒是显得有点屌丝。而一个接一个消灭恐怖分子，有点七武士的意思，交代的十分清楚。</p>

<p>片子也有典型的80年代末的特征，公司的老板是日本人，大概彼时美国人深感要被日本企业统治。而在这些之外，对官僚主义、白痴媒体也有十分辛辣的讽刺。所以，整部片子就相当有深度，也十分值得让人回味。简单的剧情，却能带来意味深长的东西。绝对是含复杂于简洁中的作品。</p>

<p>第二部作品，看完后才知道是丹泽尔华盛顿的成名作，而摩根弗里曼彼时还根本没出名，居中的白人上校最后到没怎么出名。影片的故事是描述南北战争中北军的第一支黑人军队。上校统带1k个黑人士兵，各级尉官军士长初期都是白人担当，随后也开始提拔黑人担当。</p>

<p>不得不说，美帝的历史其实就是一部外包史。从引入黑奴与白奴并举，到黑奴为主白人帮凶，再到解放黑奴，并且调动黑奴解放黑奴，一步一步扩展了国家的可用之才。而片子也很清晰地表明了让黑人成为有效的反戈力量有多难，需要客服多少障碍。而扩充劳动力的结果，自然就是使得国家的经济得到大幅度进步。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下的虚拟化技术]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/08/17/linuxxia-de-xu-ni-hua-ji-zhu/"/>
    <updated>2013-08-17T20:59:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/08/17/linuxxia-de-xu-ni-hua-ji-zhu</id>
    <content type="html"><![CDATA[<p>因为要在一台Linux系统中虚拟化一个系统，于是这周接触了一下Linux下虚拟机的内容。<br/>
公司以前一直用的redhat的linux，我所知的虚拟技术仅限于xen和kvm，而且根据一些反馈用的并不是很好。主要体现在资源占用过大，硬盘和内存的消耗都很大，当然公司的服务器硬件配置也有点不够平衡。</p>

<p>然而，在接触了ubuntu的虚拟化后，一下子有茅塞顿开的感觉。首先，windows下我常用的virtualbox就可以在ubuntu下使用。xen和kvm当然ubuntu也是支持的。同时这几种虚拟化技术都可以按命令行的方式使用。其次，ubuntu在安装虚拟化套件方面是十分方便的。主要原因在于它的包要比redhat的时新的多。还有一点，ubuntu比起redhat还是很小巧的。这点在虚拟化的时候显得比较重要。毕竟一台主机的时候，只会安装一个os，如果大2GB那也就只是2GB。一旦云化后，一台主机往往就要4+1个操作系统，在磁盘不富裕的情况下，os的臃肿会成比例的放大。这时候小巧的os就显示出了优势。<br/>
所以我倾向于采用ubuntu server作为云化的主力os。至少应该是虚机的主体。</p>

<p>接下来就是选择何种东西虚拟化了。主要下面3种：</p>

<ul>
<li>xen: 国内用的最多，因为历史最长，也有商业化的支持</li>
<li>kvm：半虚拟化技术，做在kernel里面，redhat和ubuntu大力支持</li>
<li>virtualbox: 是的，其实这可能是最好用的linux虚机软件</li>
</ul>


<p>性能方面，根据<a href="http://www.liangsuilong.info/?p=675">kvm vs Virtualbox</a> 和 <a href="http://server.zol.com.cn/257/2575328.html">Ubuntu11.10 Xen Kvm Virtualbox比拼</a>，总体而言kvm的性能最佳，大文件比virtualbox有所不如。而且从未来规划来看，redhat和ubuntu普遍倾向于支持kvm。但是，virtualbox有两大优势：1.使用是图形化的界面，很简单； 2.与kvm和xen都专注于cpu性能不同，virtualbox的图形化性能要比另外两个都强许多。不过vbox实际上是基于qemu改进的，kvm-qemu也是一个组合。所以，普通用用的情况下可以直接上virtualbox。</p>

<p>顺手又了解了一些vnc的内容。vnc其实只是一个传送图形界面的协议，经典的client和server端模型，但具体的GUI还需要由其他东西实现。可选的有<code>xfce4</code>和<code>ubuntu-desktop</code>，前者小巧不少大约200MB，后者如果是server上安装则要1GB以上了。总体而言不如ssh方便，占用资源也多不少，不过在必须使用图形化界面的时候，都还是不错的选择。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web and HTML Document]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/07/26/web-and-html-document/"/>
    <updated>2013-07-26T09:07:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/07/26/web-and-html-document</id>
    <content type="html"><![CDATA[<p>DHH在2013年的rails conf上做了关于类37signals web应用发展方向的报告。听了之后，还是解除了很大的迷茫。</p>

<p>工作十余年，开发Web应用也八九年了。期间研究过Flex，也写过不少ajax。但到今天却觉得Web的form提交然后出结果才是真正最有用的。
我们的下单，填填表格，登录等等，讲到底需要的只是一个让人知道怎么填的form，然后简单的提交就足够了。其余的东西再花哨，很多时候对解决问题并没有实质性的帮助。<br/>
然而，富客户端应用也是客观存在的，甚至有js重度客户端应用将取代HTML应用的论调甚嚣尘上。以我的感觉判断，这是不太会发生的。原因在于js的开发很麻烦，工作量其实是很大的，而且也限制死了可以使用的工具。要取得一个简单的页面所达到的效果，完全采用js会产生巨大的工作量。而Web应用至今而且也将继续是大量表单类的应用。只要客户端的开发难度、工作量依然如此同服务端不成比例，那么就很难成为主流，更别提替换HTML了。<br/>
所以，在这一点上毫无疑问我赞同D大神的，重客户端应用不可能取代Web HTML应用。</p>

<p>DHH陈述的突破之处在于提出这种HTML应用为 <strong>document-based</strong> Web ，以同google 地图这种应用区分开来。Web由于其简单或者说简陋，想要丰富它或者取代它的技术一直没中断过。从Java Applet开始，到flash，Siverlight等等，都曾经让Web的效果不堪一击。然而，20年来的现实情况是，不拥抱Document的技术最终都在HTML之前走了下坡路。D大神把从90年代中期至今的挑战HTML技术串联起来说，体现了磅礴的气势和全面的大局观。</p>

<p>与此同时，他也认为Document需要继续发展，这就是他说的再Basecamp，其实也就是Rails4中增加的新技术，其实本质就是caching。具体包括：</p>

<ul>
<li>key-based cache (generational caching)</li>
<li>Russian Doll nested caching, 4 level, touch: true, partial md5</li>
<li>Turbolinks process persistence, (pajx)</li>
<li>Polling for js updates(类似rjs)</li>
</ul>


<p>核心内容就是提高HTML在浏览器上的速度。而Caching能大规模流行的基础是<strong>内存红利</strong>.</p>

<table>
<tr><td>  2003年  </td><td>  512MB </td><td>  $49  </td></tr>
<tr><td>  2013年  </td><td>  8GB   </td><td>  $29  </td></tr>
</table>


<p>不过此次Web面临的挑战和多年来历次遇到的还是有很大不同的。不管是flash还是applet，他们都是想作为整体的HTML+CSS+Javascript发起挑战。而这次却是原来Web整体中的Javascript和HTML谁唱主角之争。区别在于JS和HTML所占比例及所显示页面数量的巨大区别。</p>

<p>但是，只要Web还够简单，只要js的开发工作量还很繁重，那么产生HTML依然还是主要的Web应用模式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS5 Ruby2.0 and Rails4.0]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/07/12/centos5-ruby2-dot-0-and-rails4-dot-0/"/>
    <updated>2013-07-12T12:55:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/07/12/centos5-ruby2-dot-0-and-rails4-dot-0</id>
    <content type="html"><![CDATA[<p>升级了一个很小的rails应用到4.0，原先使用的版本ree1.8.7 + rails3.1 。因为应用很小，也没使用很多插件，所以git checkout一个branch之后，用rails new生成新的目录完全替换掉老的文件。然后用<code>git diff</code>对一个一个目录或者文件进行比对与合并。整个过程下来，发现rails默认生成的文件，3.1和4.0的区别并非很大。</p>

<p>这个过程也就是只有几个小时，半天不到的时间就让应用可以跑起来了。本地测试了一下，写入数据库、查询、写入文件等都没什么问题。随后自然就是部署。</p>

<p>但此时，问题来了. 本地开发的环境是这样的：</p>

<ul>
<li>Ubuntu 12.04</li>
<li>gcc version 4.6.3 (Ubuntu/Linaro 4.6.3-1ubuntu5)</li>
<li>ruby 2.0.0p195 (2013-05-14 revision 40734) [x86_64-linux]</li>
<li>rails 4</li>
</ul>


<p>而部署环境是这样的：</p>

<ul>
<li>CentOS release 5.4</li>
<li>gcc 版本 4.1.2 20080704</li>
<li>ruby 2.0.0p247 (2013-06-27) [i686-linux]</li>
<li>rails 4</li>
</ul>


<p>在本地运作良好的rails4应用，部署到生产环境后发生下面两个异常：</p>

<p>1 <code>rake db:migrate</code>每次只能成功一个migrate，但经反复执行后，能够migrate完整</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SQLite3::SQLException: SQL logic error or missing database: INSERT INTO "schema_migrations" ("version") VALUES (?)</span></code></pre></td></tr></table></div></figure>


<p>2 开发环境下正常，生产环境下会报告<code>nil?</code>在某个object上不存在。</p>

<p>为此，则折腾掉了很多的业余时间。</p>

<p>怀疑过是Gem的版本问题，怀疑过是ruby版本的问题,也怀疑过是ruby编译问题。</p>

<p>针对第一种可能，重新生成了一个rails应用，执行的结果照旧。<br/>
为了第二种可能，使用了ruby2.0.0p195，异常依旧；换成ruby1.9.3，但发现有个atom的gem都不能bundle上去。<br/>
随后，针对第三个可能，不惜<strong>升级的了CentOS到5.9</strong>(<code>yum upgrade</code>),为此下载了600MB的更新包。 <br/>
又重新编译安装了ruby2.0.0p0, 哦?!，世界太平了。虽然第一个异常依然，但第二个异常没了，应用是能够跑的起来了。
之后，再重新编译另外两个ruby版本就都可以正常工作了（第一个问题还是在的）。</p>

<p>由此可见，这是一个和gcc版本、os版本及ruby版本都相关的bug。</p>

<h3>教训</h3>

<p>新版的ruby或Rails同CentOS接触的并不好，如果要少麻烦的话，APP的OS还是应该选择Ubuntu。从生态的情况来看，这个责任只能怨CentOS支持的内核、gcc、lib库都过于老旧了。<br/>
之所以这么说，不单单是因为在ruby上碰到这种要比在ubuntu上麻烦的多的情形。从七周七语言的情况看，CentOS即使是CentOS6，也不支持对Haskell的安装，在安装其他语言时，多多少少都会遇到编译麻烦的问题。<br/>
CentOS是基于Redhat的，以稳定（老旧）为荣。而APP则是迅速发展的，因此二者极其容易脱节。所以，APP服务器首选Ubuntu。</p>

<h3>题外话</h3>

<p>从对OS的依赖少这点来看，Java确实做了件很漂亮的事情。一个编译好的jdk文件，可以在几乎全部的主流linux下解压，然后即可使用。部署时也不用担心底层OS是什么实现。所以，如果是Java的应用，继续用CentOS也是不会有很多坑的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure is really pesky]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/07/09/clojure-is-really-pesky/"/>
    <updated>2013-07-09T22:07:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/07/09/clojure-is-really-pesky</id>
    <content type="html"><![CDATA[<p>最早知道clojure，是在Heroku宣布<a href="https://blog.heroku.com/archives/2011/7/5/clojure_on_heroku">支持</a><a href="http://devcenter.heroku.com/articles/clojure">它</a>，这是Heroku支持的第三种语言。知道彼时这个东西挺火。应该和闭包什么的有关联。</p>

<p>这次看七周七语言，终于得以一睹真容。知道了clojure其实就是Lisp的一个JVM实现。
不过今天试用了一下clojure，感觉这个东西不太灵。
基于JVM的设计思路听上去不错，但仔细想想JVM的lib真有那么大的意义吗？答案是否定的。我不太相信用惯了其他语言的人会喜欢在新语言中继续调用java的内容。在ruby中，我不会有兴趣去调用java。一旦用惯了clojure也不太可能再接受调用java的api。对比起来，scala倒是和java结合的挺紧密。</p>

<p>变成jvm的一部分，一大恶果就是启动变慢，从而作为脚本功能来跑很不美。毕竟一个jvm启动的时间很长，内存消耗也很大，对于处理任务极其简单的情况下，jvm启动的时间和内存开销显然过大了。
其次，融入jvm中，意味着需要ide的配合。无论哪种ide，都是很重的，因此很是麻烦。
叠加起来，就是导致这种基于jvm模式的开发是不令人愉快的。</p>

<p>而Lisp程序员似乎都喜欢用emacs，emacs和ide兼容，呵呵，这是在开什么玩笑。注定这东西的推广在开发层面会存在很大的障碍。</p>

<p>当然，天下英雄用java做clojure scala甚至jruby也不是没原因的。Jvm的性能确实很好，底层的库也很齐全，安装clojure也比较方便，但clojure又引入了leinxxx。不过Java的开发效率毕竟比C高，基于java开发新的语言大概也容易一些。另外就是需要连接数据库等组件都是现成的。这就使得在java上涌现出了很多二次开发的语言。可能，这才是那么多Java实现的根本原因。</p>

<p>但是，个人不太看好就因为用java实现，这些新语言就会被java开发的主流程接纳。道理很简单，混在jvm里面只是有利于复用已有jvm的机器（这点其实也不太重要），好歹部署还算方便，然而对开发而言完全是另学一套，而同时加上的枷锁和限制却更多了。</p>

<p>真的要给java注入活力，最直接了当的办法是让java中调用ruby clojure等，而且是要方便地调用。   伟大语言才会诞生伟大的框架和lib，而现在这种只解决新语言中调用java lib，其实是不利于java王者归来的。只是这条路这些年已经无人深入了。</p>

<p>除了和JVM跳舞令人哭笑不得外，Clojure自身的语法也很难让人爱。基本就是Lisp那套，写啥都已左右括号为主，这样的感觉其实是不太棒的。特别好这口的人除外。这个不是通过教育就能改变的。</p>

<p>所以看了一圈clojure的内容后，觉得这个语言目前还是浅尝辄止为好。</p>

<p>最后，需要提一下的是，这个语言的性能也比较普通。比普通脚本语言快，但比JS V8慢。相较于Scala Haskell，Clojure还是弱了一些。 <br/>
<img src="http://octopresszhangyu.herokuapp.com/images/screen_print/programming_performance.jpg" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prolog]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/06/16/prolog/"/>
    <updated>2013-06-16T22:46:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/06/16/prolog</id>
    <content type="html"><![CDATA[<p>七周七语言看完了Ruby，又继续看了Io，这是一个prototype的语言，确实和js很像，也挺有启发。不过决定还是
好好去学javascript吧。其实<a href="http://www.w3school.com.cn/js/index.asp">w3school</a>的这份js教程很棒，
相当言简意赅。入门是最重要的。入门之后才能走的更远。很多时候究竟有多远看的还是基础，但没有摸起来，那
基本功就无从发挥了。</p>

<p>随后看了<a href="http://www.gprolog.org">Prolog</a>，其实是<strong>gprolog</strong>。
这个语言跟我过去学习的语言都很不一样。完全抛弃了过程语言所拥有的能力，全部都集中在了逻辑判断上。实际上其组成结构是这样的：</p>

<ul>
<li>事实。就是自己先设定一些前提，指定一些事实，比如<code>likes(wallace, cheese).</code></li>
<li>规则。规则就是关于一些事实的推论。比如<code>friend(X, Y) :- \+(X = Y), likes(X, Z), likes(Y, Z).</code>，这个规则由3个条件构成，

<ul>
<li>第一个是X！=Y</li>
<li>第二个和第三个是X和Y都喜欢Z，然后他们就符合friend这条规则</li>
</ul>
</li>
<li>查询。查询就是使用时给出问题，然后让prolog根据规则库（<strong>事实</strong>+<strong>规则</strong>）循环访问得出结果或判断出结果。</li>
</ul>


<p>本质上，应该是用过程语言写了一系列的判断和分析语句（<strong>引擎</strong>）,这样使用时使得编码行为就完全不一样了。</p>

<h3>最大的启发</h3>

<p>最大的启发在于，这一门应该算是我首次学的不是过程式的编程语言。当然，前提是HTML和CSS不能算编程语言。其他的，如C、C++、Java、Ruby、Python、Javascript乃至shell等，虽然有的是纯过程式的，有的是面向对象的，但实际上都<strong>包含了过程式</strong> 的风格。</p>

<h3>试用体验</h3>

<p>还是有点别扭的。它的语法确实很古老，而且很不顺手，这点和<code>erlang</code>有的一拼。
不过确实是只要树立规则，就能输出结果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个App站点的人员组织]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/06/14/the-orgnization-of-an-app-site/"/>
    <updated>2013-06-14T15:08:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/06/14/the-orgnization-of-an-app-site</id>
    <content type="html"><![CDATA[<p>参考了一下残游记的组织与分工，小结如下：</p>

<ul>
<li><p>产品经理，1，老板</p></li>
<li><p>后端开发，1, 技术负责人</p></li>
<li><p>前端，1，解决浏览器兼容等问题, 也可以转app开发，总之就是UI工程师</p></li>
<li><p>视觉设计师，2</p></li>
<li><p>ios开发，1，</p></li>
<li><p>运营，2，应该就是管理员和推销员</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my first gem]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/06/12/my-first-gem/"/>
    <updated>2013-06-12T17:02:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/06/12/my-first-gem</id>
    <content type="html"><![CDATA[<p>今天终于尝试做了第一个<code>gem</code>，其实挺简单的，至少在有了bundler之后。</p>

<p>先 <code>bundle gem act_as_xxx</code>，随后就可以编辑里面的内容，比如在<code>*.gemspec</code>里面加入描述。编辑好自己的gem后，运行<code>gem build act_as_xxx.gemspec</code>，这样一个新的gem就会编译出来。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  Successfully built RubyGem
</span><span class='line'>  Name: act_as_xxx
</span><span class='line'>  Version: 0.1.1
</span><span class='line'>  File: act_as_xxx-0.1.1.gem</span></code></pre></td></tr></table></div></figure>


<p>最后<code>gem push act_as_xxx-0.1.1.gem</code> 就发布到rubygems.org上面了。</p>

<p>基本的流程是走通了，不过怎么怎么测试怎么调试等还需要进一步摸索。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[7dbs in 7wks]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/06/06/7dbs-in-7wks/"/>
    <updated>2013-06-06T05:59:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/06/06/7dbs-in-7wks</id>
    <content type="html"><![CDATA[<p>花了2个礼拜的时间，看完了七天七数据库。这是又一本在kindle上看完的epub格式的书籍。阅读体验的效果还是很不错的。</p>

<p>书籍受了七天七语言的启发，整本书的胶水语言主要是用了ruby，也伴随使用了一些javascript。作者对redis做了特别多的介绍，HBase等的描述也很精彩。Neo4J对我而言还属新生事物。</p>

<p>这本书区别于其他数据库图书的价值就在于比较与分析，呵呵，话说这个和我的撰文风格挺类似的。</p>

<p>首先，从RDBMS(PostgreSQL)开始，描述了SQL设计时的世界是查询的弹性要求远大于结构的弹性。回想一下，彼时的数据库查询都是由开发人员或者公司信息科的人来完成的，也就是直接使用SQL。而在如今，操作人员全部通过界面，可能是Web也可能是client，SQL都是后台自己拼接而成，于是SQL最强悍的地方其实已经打了折扣。而业务上，甚至统计方面，经常会对schema参数剧烈变化的要求。还有很重要的一点，就是关系型数据库是大家思想统一的东西，沟通方便。<br/>
关系型数据库最大的优势在于acid的操作支持，以及运行多年而证明的稳定可靠。但在大规模访问和灵活性方面确实存在缺陷。</p>

<p>然后，介绍了面向列的数据库。其实面向列就是存放是按照一列一列内容来存放的，有版本和时间戳的自动功能，适合于存放大数据。甚至还有压缩的功能。作者把HBase比喻为钉子气枪（nail gun)。他的每个查询都不快，但最强大之处在于<strong>遍历巨量数据集合</strong>。<br/>
所以常常被大公司用了作为日志和搜索系统。<br/>
column里面存放的是map。<br/>
journaling = write-ahead logging.</p>

<p>Riak是一个key-value数据库，不过更适合存放S3D那样的存放二进制的内容。基于Erlang编写。
N, W, R, N是最终数据需要分发到的节点数量，W是写入多少就可以认为写入成功，R则是读取多少就认为读取成功。</p>

<p>也谈到了这些数据库中实现Map-Reduce的哲学是把算法分发给各个节点，而不是把数据集中起来送给算法。毕竟传输算法肯定比传输数据的开销要少。</p>

<p>MongoDB则是在关系型和扩展性强的数据库中取到了一个黄金百分点。可以存放复杂的对象是文档数据库最大的优势。CouchDB不如MongoDB灵活，采用视图查询法（事先定义map-reduce），</p>

<p>最后，则主要还是介绍redis，及混合的多数据库应用开发。内建的可以让key失效，以及丰富的数据结构数据库，是redis脱颖而出的法宝。使得极其适合作为缓存使用。</p>

<p>小结，过去人们依赖一个数据库来实现多个应用的整合。现在整合的能力更多地交给了中间层模式，往往多种语言都是基于HTTP实现服务层之间的通信的。这样就使得服务程序从db的限制中解脱了出来，变得可以根据需要选用多种数据库组合。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[匆匆半年]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/06/05/cong-cong-ban-nian/"/>
    <updated>2013-06-05T23:10:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/06/05/cong-cong-ban-nian</id>
    <content type="html"><![CDATA[<p>不知不觉，宝宝出生和研究生毕业都已经快半年了。这半年里书是读了不少，事情也做了一些，突破性的的东西还是没有什么。也抽空去做了一个手术。总而言之，辛苦又忙碌的半年吧。</p>

<p>有了宝宝以后，自己的时间少了，晚上好睡的日子也少了，不过看着宝宝健康成长，那么这一切还是很有意义的。</p>

<p>说句实话，这半年过的还不错。只是飙升的体重真的要想办法调整才行了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端到底重要不重要]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/06/05/qian-duan-dao-di-zhong-yao-bu-zhong-yao/"/>
    <updated>2013-06-05T21:32:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/06/05/qian-duan-dao-di-zhong-yao-bu-zhong-yao</id>
    <content type="html"><![CDATA[<p>最近发现淘宝的前端大牛似乎想往后端发展，摆脱只做前端的印象；<br/>
另一方面, teahour上的人却认为越来越多的工作从服务器往前端在靠，投入在javascript上面的工作量和时间越来越多。单用围城效应这个不是太能解释的通。</p>

<p>以我个人这段时间的开发经验来看，前端很多事情和很细小，消耗的时间确实很多。比较起来，在这方面花费太多的时间如果能移到后端的话，确实可以完成更多的事情。从Get Things Done的角度而言，前端的意义是不如后端的。毕竟无论界面多么花哨，真正值得关注的还是内容。就像我们去淘宝，不是因为界面有多炫，而是里面的商品价格等吸引着我们。</p>

<p>然而，事情又不那么简单。首先，世上的事情一定要Get Done的讲穿了也不多，如果只盯着最有意义的事情，那么只有长生不老，而这个完成不了的话其实做任何事情最后都是徒劳的。因此，忽视前端的效果是不对的。   其次，前端可以吸引眼球，也和少挨骂有重要相关的作用。虽然吸引我上淘宝的不是其界面，但如果他的界面很傻，那么作为用户还是会骂的。当然，比起完事界面确实是次要的。就像我能忍受12306的界面，只要他能让我订完票能兑现就一切ok。<br/>
还有一点，没有好的前端，服务根本吸引不了人。毕竟大部分人也不会有什么杀手级的内容，这个时候比拼界面反而是能反应团队的水平及做事用心的程度。</p>

<p>所以，我的结论是，如果后端和内容有足够重要的事情，那么还是围绕后端。反之，有余力后可关注前端。毕竟门面功夫也不可小觑。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[折腾记]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/05/25/zhe-teng-ji/"/>
    <updated>2013-05-25T14:35:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/05/25/zhe-teng-ji</id>
    <content type="html"><![CDATA[<p>人总是免不了折腾。用什么虚拟机工具可以折腾，用什么linux发行版本也可以折腾。这些都搞定了，发行墙又来和我们折腾。
Heroku能访问80端口，22端口莫名其妙被封。好歹找了个解决方案，但发现还真是折腾。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软考的名次]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/04/08/ruankao-qian-jiming/"/>
    <updated>2013-04-08T20:36:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/04/08/ruankao-qian-jiming</id>
    <content type="html"><![CDATA[<p>不知为何, 这次软考名次出来的特别晚. 往年2月底3月中旬就都出来了, 这次却直到今天, <a href="http://www.rkb.gov.cn/jsj/cms/s_contents/download/s_dt2013040802.html">4月8日才将将公布</a>. 可能是好事多磨吧.</p>

<p>尽管知道自己的成绩有望排进前50, 甚至前十前五都很正常, 不过最后的名次还是让我激动了一小把.</p>

<p><img src="http://octopresszhangyu.herokuapp.com/images/screen_print/ruankaopaimin.png" alt="image" /></p>

<p>必须得说, 这个名次还真的是挺高的.</p>

<p>这个好名次献给我亲爱的外婆.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim and lampbrother]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/04/05/vim-and-lampbroter/"/>
    <updated>2013-04-05T11:34:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/04/05/vim-and-lampbroter</id>
    <content type="html"><![CDATA[<p>中了vim的毒之后, 开始学起了vim. 这东西在windows下也能用,而且扩展性极佳, 确实值得学学. 添加syntax和
snippet都极其简单, 如果还要写代码的话, 确实值得掌握. 主要是发现这个工具就是给我这类人用的.</p>

<p>台湾人的视频太简单, 很多基础的东西没有讲好, 好处就是他是按照git加载众多挂件之后演示并授课的, 所以
比较吸引人. 但光那些显然也不够, 而且他本身也不算很熟练. 于是开始找其他视频. 找了一圈以后, 发现了
<a href="http://www.lampbrother.net/">lamp兄弟连</a>的视频. 我个人比较喜欢里面李强强的linux课程. 另一位稍早录制
的李阳的linux视频也很不错. 这家培训机构感觉还是很不错的, 培养的确实是业界最急需的一线工人.不过他的培训主要
针对全脱产的、尤其是那些正要找工作的20岁出头的年轻人, 我是挺难报他们的班. 毕竟不太可能有什么时间和精力能够
连续坐在实验机房里一整天. 而且这样的效率其实也不高.</p>

<p>然后顺便看了一下RHCE和RHCA. 发现lampbrother的课程基本是按RHCE的脉络来的, 这门课其实可以直接改为通过RHCE.
RHCE的范围基本如下:</p>

<ul>
<li>Hardware installation and configuration</li>
<li>The boot process</li>
<li>Linux filesystem administration</li>
<li>Package management and Kickstart</li>
<li>User and group administration</li>
<li>System administration tools</li>
<li>Kernel services and configuration</li>
<li>Apache and Squid</li>
<li>Network file sharing services (NFS, FTP, and Samba)</li>
<li>Domain Name System (DNS)</li>
<li>E-mail (servers and clients)</li>
<li>Extended Internet Services Daemon (xinetd), the Secure package, and DHCP</li>
<li>The X Window System</li>
<li>Firewalls, SELinux, and troubleshooting</li>
</ul>


<p>只是这家机构的目的培训直接能工作的学生而不是考证为主的, 猜测因此没有开这门课吧. 课程的那些实验都会做的话,基本也就可以当一个称职的系统管理员了.</p>
]]></content>
  </entry>
  
</feed>
