<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2016-04-06T07:24:20+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[openwrt n56u 和iptv]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/04/05/openwrt-n56u-he-iptv/"/>
    <updated>2016-04-05T12:14:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/04/05/openwrt-n56u-he-iptv</id>
    <content type="html"><![CDATA[<p>四年以前写的<a href="http://octopresszhangyu.herokuapp.com/blog/2012/02/20/the-way-to-link-to-iptv-in-shanghai-through-vlan/">上海电信IPTV的VLAN ID和通过交换机连接两路IPTV</a>，而由于4k高清IPTV机顶盒的推广，
当时的内容已经有些不合时宜。尽管，用一个交换机还是可以实现连接两路iptv。</p>

<p>区别主要在于新的4k高清机顶盒同小红等盒子一样，需要双平面才能跑得起来。所谓双平面就是在专网之外机顶盒也要能够连接公网。
这个变化其实是带来一大好处的，即通过一个路由设备接光猫的一个口子，也可以让iptv和公网业务同时跑起来。下面记录一下操作过程。</p>

<h3>openwrt</h3>

<p>首先，这么灵活的配法，当前asus netgear等原厂的固件是不支持此种功能的，所以需要第三方固件，如openwrt dd-wrt。我选择了openwrt，是因为其官网支持asus-n56u路由器。
<a href="https://wiki.openwrt.org/toh/asus/rt-n56u">官方链接</a> ，可以从前面这个链接获得操作过程和固件。注意下载<code>squashfs-factory.bin</code>，不要下载chaos版。我就误下了chaos版，导致只能采用reset的办法重新装回了华硕的固件。openwrt很贴心的一点就是在网页里提供了恢复固件的操作步骤</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Download &amp; Install the asus <span class="s2">&quot;Firmware Restoration&quot;</span> from asus website
</span><span class='line'>Download the factory image from asus
</span><span class='line'>Enter Recovery Mode
</span><span class='line'>Unplug Router
</span><span class='line'>Hold Reset Button and Plug in Router
</span><span class='line'>Release button when front LED flashes slowly
</span><span class='line'>Use the following to <span class="nb">set </span>up your TCP/IP settings:IP address: 192.168.1.x Subnet mask: 255.255.255.0
</span><span class='line'>Select firmware *.trx and upload
</span></code></pre></td></tr></table></div></figure>


<p>要点是把本机的ip设置成192.168.1.2,而且如果本机有多块网卡（包括虚拟网卡）则只保留一个连接路由器lan口的网口活跃。这样华硕的固件才
明确会打开这个网口并同已进入恢复模式的路由器相连。有了这个恢复模式存在，意味着asus的这款路由器基本是刷不死的。</p>

<p>安装完openwrt，设置好基本的wan口，我是采用的dhcp方式获取wan地址，就可以进入配置iptv vlan的过程了。</p>

<h3>关于4k高清机顶盒获取公网和专网IP的流程</h3>

<p>参考<a href="https://www.ydkfblog.com/?m=201602">上海电信光猫一体机配合Openwrt拨号正常使用OTT 4K IPTV</a>，
找到了iptv dhcp的流程
<img src="http://octopresszhangyu.herokuapp.com/images/openwrt/4kiptvdhcp.png" alt="image" /></p>

<p>看清流程后，就可以知道：
1. 要先让4k iptv机顶盒接入公网<br/>
2. 路由器要支持DHCP-Option：125<br/>
3. 路由器要支持vlan 85的进出</p>

<p>公网配置是基础，剩余两点的配置可以归纳为</p>

<blockquote><ol>
<li><p>接在自备路由器上时，将路由器WAN口、CPU口、接IPTV的口 一起新建一个VLAN 85，3个端口全部为tagged</p></li>
<li><p><code>/etc/dnsmasq.conf</code>中要加入<code>dhcp-option-force=125,00:00:00:00:1b:02:06:48:47:57:2d:43:54:03:05:48:47:32:32:31:0a:02:20:00:0b:02:00:55:0d:02:00:2e</code> ,即对Option 125的支持</p></li>
</ol>
</blockquote>

<p>做完这些之后，至少目前中兴的机顶盒是全面支持了。</p>

<p>配置附录</p>

<p>/etc/config/network</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>config switch
</span><span class='line'>        option name <span class="s1">&#39;switch0&#39;</span>
</span><span class='line'>        option reset <span class="s1">&#39;1&#39;</span>
</span><span class='line'>        option enable_vlan <span class="s1">&#39;1&#39;</span>
</span><span class='line'>        option enable_vlan4k <span class="s1">&#39;1&#39;</span>
</span><span class='line'>
</span><span class='line'>config switch_vlan
</span><span class='line'>        option device <span class="s1">&#39;switch0&#39;</span>
</span><span class='line'>        option vlan <span class="s1">&#39;1&#39;</span>
</span><span class='line'>        option ports <span class="s1">&#39;0 1 2 3 8t&#39;</span>
</span><span class='line'>
</span><span class='line'>config switch_vlan
</span><span class='line'>        option device <span class="s1">&#39;switch0&#39;</span>
</span><span class='line'>        option vlan <span class="s1">&#39;2&#39;</span>
</span><span class='line'>        option ports <span class="s1">&#39;4 8t&#39;</span>
</span><span class='line'>
</span><span class='line'>config switch_vlan
</span><span class='line'>        option device <span class="s1">&#39;switch0&#39;</span>
</span><span class='line'>        option vlan <span class="s1">&#39;85&#39;</span>
</span><span class='line'>        option vid <span class="s1">&#39;85&#39;</span>
</span><span class='line'>        option ports <span class="s1">&#39;1t 2t 4t 8t&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>/etc/dnsmasq.conf</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#cname=bertand,bert</span>
</span><span class='line'>dhcp-option-force<span class="o">=</span>125,00:00:00:00:1b:02:06:48:47:57:2d:43:54:03:05:48:47:32:32:31:0a:02:20:00:0b:02:00:55:0d:02:00:2e
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[试用Cap3]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/02/15/shi-yong-cap3/"/>
    <updated>2016-02-15T16:42:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/02/15/shi-yong-cap3</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>diff --git a/Capfile b/Capfile
</span><span class='line'>new file mode 100644
</span><span class='line'>index 0000000..51c3955
</span><span class='line'>--- /dev/null
</span><span class='line'>+++ b/Capfile
</span><span class='line'>@@ -0,0 +1,29 @@
</span><span class='line'>+# Load DSL and set up stages
</span><span class='line'>+require 'capistrano/setup'
</span><span class='line'>+
</span><span class='line'>+# Include default deployment tasks
</span><span class='line'>+require 'capistrano/deploy'
</span><span class='line'>+
</span><span class='line'>+require 'capistrano/rails'
</span><span class='line'>+
</span><span class='line'>+# Include tasks from other gems included in your Gemfile
</span><span class='line'>+#
</span><span class='line'>+# For documentation on these, see for example:
</span><span class='line'>+#
</span><span class='line'>+#   https://github.com/capistrano/rvm
</span><span class='line'>+#   https://github.com/capistrano/rbenv
</span><span class='line'>+#   https://github.com/capistrano/chruby
</span><span class='line'>+#   https://github.com/capistrano/bundler
</span><span class='line'>+#   https://github.com/capistrano/rails
</span><span class='line'>+#   https://github.com/capistrano/passenger
</span><span class='line'>+#
</span><span class='line'>+# require 'capistrano/rvm'
</span><span class='line'>+# require 'capistrano/rbenv'
</span><span class='line'>+# require 'capistrano/chruby'
</span><span class='line'>+# require 'capistrano/bundler'
</span><span class='line'>+# require 'capistrano/rails/assets'
</span><span class='line'>+# require 'capistrano/rails/migrations'
</span><span class='line'>+# require 'capistrano/passenger'
</span><span class='line'>+
</span><span class='line'>+# Load custom tasks from `lib/capistrano/tasks` if you have any defined
</span><span class='line'>+Dir.glob('lib/capistrano/tasks/*.rake').each { |r| import r }
</span><span class='line'>diff --git a/Gemfile b/Gemfile
</span><span class='line'>index 9786bc1..60dd07d 100644
</span><span class='line'>--- a/Gemfile
</span><span class='line'>+++ b/Gemfile
</span><span class='line'>@@ -10,11 +10,11 @@ gem 'mysql2'
</span><span class='line'> # Use SCSS for stylesheets
</span><span class='line'> gem 'sass-rails', '~&gt; 5.0.0.beta1'
</span><span class='line'> # Use Uglifier as compressor for JavaScript assets
</span><span class='line'>-gem 'uglifier', '&gt;= 1.3.0'
</span><span class='line'>+#gem 'uglifier', '&gt;= 1.3.0'
</span><span class='line'> # Use CoffeeScript for .js.coffee assets and views
</span><span class='line'> gem 'coffee-rails', '~&gt; 4.1.0'
</span><span class='line'> # See https://github.com/sstephenson/execjs#readme for more supported runtimes
</span><span class='line'>-# gem 'therubyracer',  platforms: :ruby
</span><span class='line'>+gem 'therubyracer',  platforms: :ruby
</span><span class='line'> 
</span><span class='line'> # Use jquery as the JavaScript library
</span><span class='line'> gem 'jquery-rails'
</span><span class='line'>@@ -46,7 +46,10 @@ gem 'unicorn'
</span><span class='line'> gem 'thin'
</span><span class='line'> # Use Capistrano for deployment
</span><span class='line'> # gem 'capistrano-rails', group: :development
</span><span class='line'>-
</span><span class='line'>+group :development do
</span><span class='line'>+    gem 'capistrano', '~&gt; 3.1'
</span><span class='line'>+    gem 'capistrano-rails', '~&gt; 1.1'
</span><span class='line'>+end
</span><span class='line'> 
</span><span class='line'> gem 'kaminari', github: 'amatsuda/kaminari', branch: 'master'
</span><span class='line'> gem 'nokogiri'
</span><span class='line'>diff --git a/config/deploy.rb b/config/deploy.rb
</span><span class='line'>new file mode 100644
</span><span class='line'>index 0000000..7af9419
</span><span class='line'>--- /dev/null
</span><span class='line'>+++ b/config/deploy.rb
</span><span class='line'>@@ -0,0 +1,60 @@
</span><span class='line'>+# config valid only for current version of Capistrano
</span><span class='line'>+lock '3.4.0'
</span><span class='line'>+
</span><span class='line'>+set :application, 'xincheping'
</span><span class='line'>+set :repo_url, 'git@github.com:swachian/xincheping.git'
</span><span class='line'>+
</span><span class='line'>+# Default branch is :master
</span><span class='line'>+# ask :branch, `git rev-parse --abbrev-ref HEAD`.chomp
</span><span class='line'>+
</span><span class='line'>+# Default deploy_to directory is /var/www/my_app_name
</span><span class='line'>+set :deploy_to, '/opt/deploy/xincheping'
</span><span class='line'>+
</span><span class='line'>+# Default value for :scm is :git
</span><span class='line'>+# set :scm, :git
</span><span class='line'>+
</span><span class='line'>+# Default value for :format is :pretty
</span><span class='line'>+# set :format, :pretty
</span><span class='line'>+
</span><span class='line'>+# Default value for :log_level is :debug
</span><span class='line'>+# set :log_level, :debug
</span><span class='line'>+
</span><span class='line'>+# Default value for :pty is false
</span><span class='line'>+# set :pty, true
</span><span class='line'>+
</span><span class='line'>+# Default value for :linked_files is []
</span><span class='line'>+set :linked_files, fetch(:linked_files, []).push('config/database.yml', 'config/secrets.yml')
</span><span class='line'>+
</span><span class='line'>+# Default value for linked_dirs is []
</span><span class='line'>+# set :linked_dirs, fetch(:linked_dirs, []).push('log', 'tmp/pids', 'tmp/cache', 'tmp/sockets', 'vendor/bundle', 'public/system')
</span><span class='line'>+ set :linked_dirs, fetch(:linked_dirs, []).push('log', 'tmp/pids', 'tmp/cache', 'tmp/sockets')
</span><span class='line'>+
</span><span class='line'>+# Default value for default_env is {}
</span><span class='line'>+set :default_env, { path: "/home/zhangyu/.rbenv/versions/ruby-2.3/bin:$PATH" }
</span><span class='line'>+
</span><span class='line'>+# Default value for keep_releases is 5
</span><span class='line'>+# set :keep_releases, 5
</span><span class='line'>+
</span><span class='line'>+namespace :deploy do
</span><span class='line'>+
</span><span class='line'>+  after :restart, :clear_cache do
</span><span class='line'>+    on roles(:web), in: :groups, limit: 3, wait: 10 do
</span><span class='line'>+      # Here we can do anything such as:
</span><span class='line'>+      # within release_path do
</span><span class='line'>+      #   execute :rake, 'cache:clear'
</span><span class='line'>+      # end
</span><span class='line'>+    end
</span><span class='line'>+  end
</span><span class='line'>+
</span><span class='line'>+  task :restart_server do
</span><span class='line'>+    on roles(:web) do
</span><span class='line'>+      within current_path do
</span><span class='line'>+        with rails_env: fetch(:rails_env), rails_relative_url_root: '/xincheping' do
</span><span class='line'>+          execute :rake, 'thin:restart', env: {rails_env: fetch(:rails_env) }
</span><span class='line'>+        end
</span><span class='line'>+      end
</span><span class='line'>+    end
</span><span class='line'>+  end
</span><span class='line'>+  after "deploy:published", "restart_server"
</span><span class='line'>+
</span><span class='line'>+end
</span><span class='line'>diff --git a/config/deploy/production.rb b/config/deploy/production.rb
</span><span class='line'>new file mode 100644
</span><span class='line'>index 0000000..a396f40
</span><span class='line'>--- /dev/null
</span><span class='line'>+++ b/config/deploy/production.rb
</span><span class='line'>@@ -0,0 +1,61 @@
</span><span class='line'>+# server-based syntax
</span><span class='line'>+# ======================
</span><span class='line'>+# Defines a single server with a list of roles and multiple properties.
</span><span class='line'>+# You can define all roles on a single server, or split them:
</span><span class='line'>+
</span><span class='line'>+# server 'example.com', user: 'deploy', roles: %w{app db web}, my_property: :my_value
</span><span class='line'>+# server 'example.com', user: 'deploy', roles: %w{app web}, other_property: :other_value
</span><span class='line'>+# server 'db.example.com', user: 'deploy', roles: %w{db}
</span><span class='line'>+
</span><span class='line'>+
</span><span class='line'>+
</span><span class='line'>+# role-based syntax
</span><span class='line'>+# ==================
</span><span class='line'>+
</span><span class='line'>+# Defines a role with one or multiple servers. The primary server in each
</span><span class='line'>+# group is considered to be the first unless any  hosts have the primary
</span><span class='line'>+# property set. Specify the username and a domain or IP for the server.
</span><span class='line'>+# Don't use `:all`, it's a meta role.
</span><span class='line'>+
</span><span class='line'>+role :app, %w{zhangyu@192.168.203.198}, my_property: :my_value
</span><span class='line'>+role :web, %w{zhangyu@192.168.203.198}, other_property: :other_value
</span><span class='line'>+role :db,  %w{zhangyu@192.168.203.198}
</span><span class='line'>+
</span><span class='line'>+
</span><span class='line'>+
</span><span class='line'>+# Configuration
</span><span class='line'>+# =============
</span><span class='line'>+# You can set any configuration variable like in config/deploy.rb
</span><span class='line'>+# These variables are then only loaded and set in this stage.
</span><span class='line'>+# For available Capistrano configuration variables see the documentation page.
</span><span class='line'>+# http://capistranorb.com/documentation/getting-started/configuration/
</span><span class='line'>+# Feel free to add new variables to customise your setup.
</span><span class='line'>+
</span><span class='line'>+
</span><span class='line'>+
</span><span class='line'>+# Custom SSH Options
</span><span class='line'>+# ==================
</span><span class='line'>+# You may pass any option but keep in mind that net/ssh understands a
</span><span class='line'>+# limited set of options, consult the Net::SSH documentation.
</span><span class='line'>+# http://net-ssh.github.io/net-ssh/classes/Net/SSH.html#method-c-start
</span><span class='line'>+#
</span><span class='line'>+# Global options
</span><span class='line'>+# --------------
</span><span class='line'>+#  set :ssh_options, {
</span><span class='line'>+#    keys: %w(/home/rlisowski/.ssh/id_rsa),
</span><span class='line'>+#    forward_agent: false,
</span><span class='line'>+#    auth_methods: %w(password)
</span><span class='line'>+#  }
</span><span class='line'>+#
</span><span class='line'>+# The server-based syntax can be used to override options:
</span><span class='line'>+# ------------------------------------
</span><span class='line'>+# server 'example.com',
</span><span class='line'>+#   user: 'user_name',
</span><span class='line'>+#   roles: %w{web app},
</span><span class='line'>+#   ssh_options: {
</span><span class='line'>+#     user: 'user_name', # overrides user setting above
</span><span class='line'>+#     keys: %w(/home/user_name/.ssh/id_rsa),
</span><span class='line'>+#     forward_agent: false,
</span><span class='line'>+#     auth_methods: %w(publickey password)
</span><span class='line'>+#     # password: 'please use keys'
</span><span class='line'>+#   }
</span><span class='line'>diff --git a/config/deploy/staging.rb b/config/deploy/staging.rb
</span><span class='line'>new file mode 100644
</span><span class='line'>index 0000000..4fc06fa
</span><span class='line'>--- /dev/null
</span><span class='line'>+++ b/config/deploy/staging.rb
</span><span class='line'>@@ -0,0 +1,61 @@
</span><span class='line'>+# server-based syntax
</span><span class='line'>+# ======================
</span><span class='line'>+# Defines a single server with a list of roles and multiple properties.
</span><span class='line'>+# You can define all roles on a single server, or split them:
</span><span class='line'>+
</span><span class='line'>+# server 'example.com', user: 'deploy', roles: %w{app db web}, my_property: :my_value
</span><span class='line'>+# server 'example.com', user: 'deploy', roles: %w{app web}, other_property: :other_value
</span><span class='line'>+# server 'db.example.com', user: 'deploy', roles: %w{db}
</span><span class='line'>+
</span><span class='line'>+
</span><span class='line'>+
</span><span class='line'>+# role-based syntax
</span><span class='line'>+# ==================
</span><span class='line'>+
</span><span class='line'>+# Defines a role with one or multiple servers. The primary server in each
</span><span class='line'>+# group is considered to be the first unless any  hosts have the primary
</span><span class='line'>+# property set. Specify the username and a domain or IP for the server.
</span><span class='line'>+# Don't use `:all`, it's a meta role.
</span><span class='line'>+
</span><span class='line'>+# role :app, %w{deploy@example.com}, my_property: :my_value
</span><span class='line'>+# role :web, %w{user1@primary.com user2@additional.com}, other_property: :other_value
</span><span class='line'>+# role :db,  %w{deploy@example.com}
</span><span class='line'>+
</span><span class='line'>+
</span><span class='line'>+
</span><span class='line'>+# Configuration
</span><span class='line'>+# =============
</span><span class='line'>+# You can set any configuration variable like in config/deploy.rb
</span><span class='line'>+# These variables are then only loaded and set in this stage.
</span><span class='line'>+# For available Capistrano configuration variables see the documentation page.
</span><span class='line'>+# http://capistranorb.com/documentation/getting-started/configuration/
</span><span class='line'>+# Feel free to add new variables to customise your setup.
</span><span class='line'>+
</span><span class='line'>+
</span><span class='line'>+
</span><span class='line'>+# Custom SSH Options
</span><span class='line'>+# ==================
</span><span class='line'>+# You may pass any option but keep in mind that net/ssh understands a
</span><span class='line'>+# limited set of options, consult the Net::SSH documentation.
</span><span class='line'>+# http://net-ssh.github.io/net-ssh/classes/Net/SSH.html#method-c-start
</span><span class='line'>+#
</span><span class='line'>+# Global options
</span><span class='line'>+# --------------
</span><span class='line'>+#  set :ssh_options, {
</span><span class='line'>+#    keys: %w(/home/rlisowski/.ssh/id_rsa),
</span><span class='line'>+#    forward_agent: false,
</span><span class='line'>+#    auth_methods: %w(password)
</span><span class='line'>+#  }
</span><span class='line'>+#
</span><span class='line'>+# The server-based syntax can be used to override options:
</span><span class='line'>+# ------------------------------------
</span><span class='line'>+# server 'example.com',
</span><span class='line'>+#   user: 'user_name',
</span><span class='line'>+#   roles: %w{web app},
</span><span class='line'>+#   ssh_options: {
</span><span class='line'>+#     user: 'user_name', # overrides user setting above
</span><span class='line'>+#     keys: %w(/home/user_name/.ssh/id_rsa),
</span><span class='line'>+#     forward_agent: false,
</span><span class='line'>+#     auth_methods: %w(publickey password)
</span><span class='line'>+#     # password: 'please use keys'
</span><span class='line'>+#   }
</span><span class='line'>diff --git a/config/environments/production.rb b/config/environments/production.rb
</span><span class='line'>index f572341..cd0d766 100644
</span><span class='line'>--- a/config/environments/production.rb
</span><span class='line'>+++ b/config/environments/production.rb
</span><span class='line'>@@ -19,7 +19,7 @@ Rails.application.configure do
</span><span class='line'>   config.public_file_server.enabled = ENV['RAILS_SERVE_STATIC_FILES'].present?
</span><span class='line'> 
</span><span class='line'>   # Compress JavaScripts and CSS.
</span><span class='line'>-  config.assets.js_compressor = :uglifier
</span><span class='line'>+  #config.assets.js_compressor = :uglifier
</span><span class='line'>   # config.assets.css_compressor = :sass
</span><span class='line'> 
</span><span class='line'>   # Do not fallback to assets pipeline if a precompiled asset is missed.
</span><span class='line'> 
</span><span class='line'>diff --git a/lib/tasks/sync.rake b/lib/tasks/sync.rake
</span><span class='line'>index 6d371d6..bd87ca3 100644
</span><span class='line'>--- a/lib/tasks/sync.rake
</span><span class='line'>+++ b/lib/tasks/sync.rake
</span><span class='line'>@@ -1,10 +1,10 @@
</span><span class='line'> namespace :sync do
</span><span class='line'>-  desc "TODO"
</span><span class='line'>+  desc "长测新车评同步"
</span><span class='line'>   task changce: :environment do
</span><span class='line'>     Changce.fetch
</span><span class='line'>   end
</span><span class='line'> 
</span><span class='line'>-  desc "TODO"
</span><span class='line'>+  desc "新车评内容全部同步"
</span><span class='line'>   task all: :environment do
</span><span class='line'>     Daogoulist.all.each {|dgl| dgl.sync_daogous(2)}
</span><span class='line'>     Guandian.fetch
</span><span class='line'>@@ -12,4 +12,8 @@ namespace :sync do
</span><span class='line'>     Changce.fetch_changceing
</span><span class='line'>   end
</span><span class='line'> 
</span><span class='line'>+  desc "同sh.122.gov.cn同步电子警察信息"
</span><span class='line'>+  task police2: :environment do
</span><span class='line'>+    ElectronicPoloce2.test_fetch_one_page
</span><span class='line'>+  end
</span><span class='line'> end
</span><span class='line'>diff --git a/lib/tasks/thin.rake b/lib/tasks/thin.rake
</span><span class='line'>new file mode 100644
</span><span class='line'>index 0000000..9fa35cd
</span><span class='line'>--- /dev/null
</span><span class='line'>+++ b/lib/tasks/thin.rake
</span><span class='line'>@@ -0,0 +1,8 @@
</span><span class='line'>+namespace :thin do
</span><span class='line'>+  desc "重启thin"
</span><span class='line'>+  task restart: :environment do
</span><span class='line'>+    system " if [ -f tmp/pids/thin.pid ]; then kill `cat tmp/pids/thin.pid` && rm tmp/pids/thin.pid; fi"
</span><span class='line'>+    system  "./bin/thin start --prefix=/xincheping  -p 3001 -P tmp/pids/thin.pid -d"
</span><span class='line'>+  end
</span><span class='line'>+
</span><span class='line'>+end
</span><span class='line'>diff --git a/lib/tasks/unicorn.rake b/lib/tasks/unicorn.rake
</span><span class='line'>new file mode 100644
</span><span class='line'>index 0000000..7df54be
</span><span class='line'>--- /dev/null
</span><span class='line'>+++ b/lib/tasks/unicorn.rake
</span><span class='line'>@@ -0,0 +1,8 @@
</span><span class='line'>+namespace :unicorn do
</span><span class='line'>+  desc "重启unicorn"
</span><span class='line'>+  task restart: :environment do
</span><span class='line'>+    system " if [ -f tmp/pids/unicorn.pid ]; then kill `cat tmp/pids/unicorn.pid`; fi"
</span><span class='line'>+    system  "./bin/unicorn -c unicorn.conf.rb -D"
</span><span class='line'>+  end
</span><span class='line'>+
</span><span class='line'>+end</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[时间长了发现还是挺喜欢本田的]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/02/11/shi-jian-chang-liao-fa-xian-huan-shi-ting-xi-huan-ben-tian-de/"/>
    <updated>2016-02-11T09:42:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/02/11/shi-jian-chang-liao-fa-xian-huan-shi-ting-xi-huan-ben-tian-de</id>
    <content type="html"><![CDATA[<p>开CRV有半年多了，近来发现越发喜欢这个车甚至本田这个品牌。喜欢的原因首先是来源于和日产两个细节的比较。<br/>
东本CRV的<strong>说明书</strong>是写的比日产好许多的，读起来很易读，不像日产是标准的非面向人类的说明书。而且这个说明书
里面还会教用户如何自己拆换空调滤芯，而日产翻遍了也是没有的。在说明书的信息化方面，东本的app有详细的pdf说明书可供参考检索，
而日产在这一部分是完全空白。对于和用户实际沟通上，本田要好出许多。</p>

<p>另一个细节则来自<strong>智能钥匙</strong>。根据同事八代雅阁的经历，五六年前本田的智能钥匙是一块很简陋的电路板，更换电池时是直接
以电路板示人的。但经过几年发展后，我的CRV上这个细节得到了很大的改善，电路板不再是粗糙地打开即见，然而仍然可以换电池。
轮到日产的话，则所有的钥匙还是本田五六年前的水准，一块电路板大大裸露在外面。</p>

<p>这个车之所以越开越喜欢，主要原因就是确实很对技术男的味。实际上美版的前雷达什么更对我的胃口，只是被东本改乱了。</p>

<p>而之前一直不满的手机连接导航，用的多了感觉还是可以的。尽管连线比较麻烦，系统也还不够稳定，发展方向却是极其正确的。
目前的水平也足以一用，虽然希望可以更方便些更快捷些更稳定些。对本田的倒车无力和杂音遍地有各种不满，至今依然不满，但鉴于CRV和本田实际各种良好的体验，
这车确实越来越让人喜欢了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 上折腾Ruby 2.2(续)]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/12/24/mac-shang-zhe-teng-ruby-2-dot-2/"/>
    <updated>2015-12-24T21:24:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/12/24/mac-shang-zhe-teng-ruby-2-dot-2</id>
    <content type="html"><![CDATA[<p>又是一年圣诞了，继去年<a href="http://octopresszhangyu.herokuapp.com/blog/2014/12/31/mac-shang-zhe-teng-ruby-2-dot-2/">Mac上折腾Ruby</a>之后，这次继续折腾。只是版本换成了<del>2.2.4</del> 2.3 以及
是为了解决readline的问题。</p>

<p>按 https://github.com/guard/guard/wiki/Add-Readline-support-to-Ruby-on-Mac-OS-X<br/>
的说法:</p>

<blockquote><p>If you are on Mac OS X and have problems with either Guard not reacting to file changes or Pry behaving strangely, then you probably suffer under a Ruby build that uses libedit instead of readline.</p></blockquote>

<p>所以在前次的基础上，要进一步增加编译选项。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./configure --with-openssl-dir<span class="o">=</span><span class="sb">`</span>brew --prefix openssl<span class="sb">`</span> --disable-install-doc --prefix<span class="o">=</span>/Users/me/.rbenv/versions/ruby-2.3  --with-readline-dir<span class="o">=</span><span class="sb">`</span>brew --prefix readline<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>--with-readline-dir<span class="o">=</span><span class="sb">`</span>brew --prefix readline<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p> 就是针对readline增加的选项。</p>

<p>加上之后，irb支持中文了，pry也支持历史记录浏览了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deutschland Holiday]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/12/22/deutschland-holiday/"/>
    <updated>2015-12-22T15:14:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/12/22/deutschland-holiday</id>
    <content type="html"><![CDATA[<p>8月底9月初的德国之旅，不过拖了很久才发上来。</p>

<p>D0: 浦东机场12小时航班直飞法兰克福，难得一见公务舱登机也要排长队。</p>

<p>D1：飞行12小时后，当地时间凌晨5点抵达法兰克福机场，出关取行李因为是凌晨都很迅速。随后买从法兰克福去斯图加特的高铁票，单人单程63欧/张，一个半小时后抵达斯图加特。德国的火车站都没检票口，导致我们寻找车站入口还费了点脑筋。
到斯图加特火车站旁的旅馆checkin，由于太早只能寄存行李，随后坐地铁S线前往奔驰博物馆。中午游览完毕后回酒店休息。</p>

<p>D2： 德国的礼拜天，商场全部关门，于是前往路德维希堡，距离斯图加特坐火车20分钟。王宫在广场的参观都是不要门票的，德国大部分王宫都是这个样子的，只有内饰参观才要买门票，而且习惯是让一个导游带着10来个人一起走。内部参观要持续一个半小时，不过一圈下来基本各个房间都了解了，之后几天参观其他王宫也差不多是一样的格局。</p>

<p>D3： 麦琴根购物村购物。斯图加特出发火车半个多小时可达。这其实是一个outlets，东西还是比较多的，当然本身都是打折货品。</p>

<p>D4： 海德堡。海德堡和斯图加特一样都位于德国巴符州，所以可以买巴符州的州票，州票比较便宜28欧两个人可以当天在州内随意坐火车和各类公交。就是海德堡在巴符州的西北角，州票只能坐慢车，将近两个小时才到。古堡本身是破损的，不过这个山区小镇倒是让人想起中国的庐山。回程走了一下商业街，长一公里多，里面东西还是蛮多的，也是很适合购物的商业街。</p>

<p>D5: 斯图加特的游程基本结束，坐高铁前往慕尼黑，2个小时不到即可到达,不过慕尼黑开始下雨了。提前一天买票，优惠还是很大的，这次的距离比第一天坐的还要长，但两人票单程只要48欧，相当于原价的40%。中午抵达慕尼黑后，这次倒是可以直接入住酒店了。随后坐公共电车前往宁芬堡宫。宁芬堡很棒，绝对值得一去。里面的马车展览让我很感叹，德国人会造车绝非偶然。</p>

<p>D6： 天鹅堡。去传说中的天鹅堡。买巴伐利亚州的州票即可，天鹅堡实际位于小镇福森境内，坐两个小时的火车可以抵达，随后坐公交10分钟即可。这个地方很商业化了，城堡外墙也是在不断翻新的。其实德国的景区都是不用买票的，爬爬山拍拍照其实已经足够了。如果要进去参观城堡内饰，就需要买票，买完票还要在门口等待排队入场。堪比世博会，等了将近两个小时才进去草草参观了15分钟。但由此才终于明白德国的景区本身确实都是不收费的，我们的排队纯粹是按中国旅游思维导致的自找麻烦。</p>

<p>D7：雨中的天鹅堡并不太好玩，本来我们想隔天再去国王湖的，但一看天气预报隔天国王湖那边下雨，而D7倒是一个好天气，于是临时调整行程前往国王湖。国王湖实际上位于贝希特斯加登小镇上，离奥地利的萨尔茨堡很近只要40分钟车程。慕尼黑和萨尔茨堡之间的交通很密集，M线几乎每小时就有一班，只要一小时多一些即可到达萨尔茨堡。但从慕尼黑只坐火车周转需要2个半小时才能到贝希斯特加登。国王湖本身不错，但整个小镇更有意思。可惜我们安排的不好，这地方应该住个两晚，这样就能把耶拿峰和著名的鹰巢都玩到。国王湖游船中的小号回声表演，本来以为是很无聊的一个项目，但实际参加下来却感觉很有意思，也是开开心心付给了表演导游小费。当天下午4点折回慕尼黑，一天总计坐了5个小时火车，也是坐的累了。当天是周五而当晚正好是德国国家足球队对阵波兰的欧洲杯预选赛，火车开过基姆湖后，一车子上很多球迷，大部分是年轻的德国男女，普遍穿着巴伐利亚传统服装外加一人一瓶啤酒，一路上吵吵闹闹，老外确实能吵。</p>

<p>D8: 宝马博物馆和慕尼黑奥林匹克体育场。宝马博物馆比奔驰差了许多。奥林匹克公园倒是鸟巢+世纪公园，当天是周六，老外周六不少也是在公园遛娃遛狗的。下午可以趁着周日商店关门前继续购物。慕尼黑是个商业发达的城市，买东西还是很方便的。</p>

<p>D9： 上午慕尼黑市中心参观。到了周日人就很少了，马路上基本只有游客，所以一早很空，顺便还去了王宫博物馆，也看见了玛利亚广场是钟人表演。下午则是去安联足球场和拜仁慕尼黑足球纪念馆参观，对中国人来讲也就是看一个水立方的体育场版本。</p>

<p>D10： 上午又在市中心逛了一下，随后就直接出发去慕尼黑机场，地铁40分钟可达，距离类似上海从市中心去虹桥机场。早早checkin，随后等登机，又经过10小时的飞行我们终于回到了上海。回程的飞机经济舱没卖光，商务舱却都售罄了。不过这种直飞的长途，经济舱和公务舱的差异确实类似以前火车硬座和软卧的差异。也难怪公务舱的比例会那么高。慕尼黑后3天都碰到了难民问题。我们住在火车站旁边，所以看见很多难民和警察，秩序虽不乱但总让我感到紧张。回来后，还是发现上海更好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文艺的HashMap初始化]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/11/23/wen-yi-de-hashmapchu-shi-hua/"/>
    <updated>2015-11-23T20:33:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/11/23/wen-yi-de-hashmapchu-shi-hua</id>
    <content type="html"><![CDATA[<p>多年以来，受制于java没有初始设置<code>hash</code>对-值的方法，例如js有：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby在借鉴js的文法之前，有著名的rocket标注</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:a</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span> <span class="ss">:b</span><span class="o">=</span><span class="p">:</span><span class="mi">2</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>而java则只能继续使用过程定义来描述</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">integer</span><span class="o">&gt;();</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>而最近发现了一种文艺一些的写法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">integer</span><span class="o">&gt;(){</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="n">put</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="n">put</span><span class="o">(</span><span class="s">&quot;b&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此种写法是利用了创建一个匿名类的文法，该匿名类直接继承自HashMap，而第二套花括弧则是实例初始化。</p>

<p>实例初始化是对应于静态初始化，后者属于整个类，而前者属于某个对象初始化时进行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">demo</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">do</span> <span class="n">sth</span> <span class="n">of</span> <span class="kd">class</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    <span class="k">do</span> <span class="n">sth</span> <span class="n">of</span> <span class="n">instance</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实这种写法的代码行数并不少，但是语意，主要是段落的分割清楚了许多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring的@SessionAttributes和@ModelAttribute在Redirect时的特殊表现]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/11/14/springde-at-sessionattributeshe-at-modelattribute/"/>
    <updated>2015-11-14T22:50:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/11/14/springde-at-sessionattributeshe-at-modelattribute</id>
    <content type="html"><![CDATA[<p><code>@ModelAttribute</code> 在Spring中有两个地方可以填写：</p>

<ul>
<li>Controller的Action method的参数前标注，提示需要设置该值</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@ModelAttribute</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">getUser</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">HttpSession</span> <span class="n">session</span><span class="o">,</span> <span class="n">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;mdn&quot;</span><span class="o">,</span> <span class="n">mdn</span><span class="o">);</span>
</span><span class='line'>  <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;userInfo&quot;</span><span class="o">,</span> <span class="n">userInfo</span><span class="o">);</span>
</span><span class='line'>  <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;helper&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">HomeHelper</span><span class="o">(</span><span class="n">userInfo</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Controller中单独的方法前标注，该方法通常不是action，但加注<code>@ModelAttribute</code>后会在Action method执行前被调用</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/addDiy&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">ModelAndView</span> <span class="nf">addDiy</span><span class="o">(</span><span class="nd">@ModelAttribute</span><span class="o">(</span><span class="s">&quot;operator&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">operator</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用效果来讲就是确保第一种情况下，action method的参数会被设置，而设置的根据主要是以下4种：</p>

<ol>
<li>来自<code>@SessionAttributes</code>使用中被设置在session中的<code>ModelAttribute</code></li>
<li>上面提到的第二个使用的方法中产生的对象</li>
<li>基于URI的模板变量+type converter</li>
<li>直接new的，即默认的构建方法</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/home&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@SessionAttributes</span><span class="o">({</span><span class="s">&quot;operator&quot;</span> <span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HomeController</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="cm">/*登陆验证，成功后转至home action，验证失败则继续显示login页面*/</span>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">&quot;login&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">loginPost</span><span class="o">(</span><span class="n">HttpSession</span> <span class="n">session</span><span class="o">,</span> <span class="n">Model</span> <span class="n">model</span><span class="o">,</span> <span class="n">String</span> <span class="n">username</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">,</span> <span class="n">String</span> <span class="n">yzm</span><span class="o">,</span> <span class="n">RedirectAttributes</span> <span class="n">redirectAttributes</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">redirectAttributes</span><span class="o">.</span><span class="na">addFlashAttribute</span><span class="o">(</span><span class="s">&quot;username&quot;</span><span class="o">,</span> <span class="n">username</span><span class="o">);</span>
</span><span class='line'>      <span class="n">redirectAttributes</span><span class="o">.</span><span class="na">addFlashAttribute</span><span class="o">(</span><span class="s">&quot;password&quot;</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/*检测验证码是否正确*/</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(!</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">equals</span><span class="o">((</span><span class="n">String</span><span class="o">)</span> <span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;rand&quot;</span><span class="o">),</span> <span class="n">yzm</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">redirectAttributes</span><span class="o">.</span><span class="na">addFlashAttribute</span><span class="o">(</span><span class="s">&quot;errorMessage&quot;</span><span class="o">,</span> <span class="s">&quot;验证码不正确，请输入正确的验证码&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="s">&quot;redirect:/home/login&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">CInterfaceOper</span> <span class="n">ciop</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">status</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ciop</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CInterfaceOper</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span><span class='line'>          <span class="n">status</span> <span class="o">=</span> <span class="n">ciop</span><span class="o">.</span><span class="na">getUserStatus</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">status</span><span class="o">,</span> <span class="n">ConstVar</span><span class="o">.</span><span class="na">Status</span><span class="o">.</span><span class="na">Normal</span><span class="o">))</span> <span class="o">{</span> <span class="c1">//用户业务状体正常</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>          <span class="c1">//由modelattribute获取operator时使用</span>
</span><span class='line'>          <span class="c1">// redirect的情况下，加在model里面不会被sessionAttributes处理到session中</span>
</span><span class='line'>          <span class="c1">//model.addAttribute(&quot;operator&quot;, operator);</span>
</span><span class='line'>          <span class="n">redirectAttributes</span><span class="o">.</span><span class="na">addFlashAttribute</span><span class="o">(</span><span class="s">&quot;operator&quot;</span><span class="o">,</span> <span class="n">username</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">String</span> <span class="n">lastUri</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="n">ConstVar</span><span class="o">.</span><span class="na">REQUEST_URI</span><span class="o">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">lastUri</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="s">&quot;redirect:/home&quot;</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="s">&quot;redirect:&quot;</span><span class="o">+</span><span class="n">lastUri</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">redirectAttributes</span><span class="o">.</span><span class="na">addFlashAttribute</span><span class="o">(</span><span class="s">&quot;errorMessage&quot;</span><span class="o">,</span> <span class="s">&quot;登录失败，请检查用户名和密码&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="s">&quot;redirect:/home/login&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在<code>Controller</code>类前标注的<code>@sessionAttributes</code>就可以把action中的model包含的同名属性固化在session中。
但是，因为整个action的返回不是直接渲染jsp，而是使用了<code>redirect:/home</code>这样的重定向语句，所以起初并没有奏效。
而是要把<code>operator</code>放在<code>redirectAttributes</code>中，才会被固化。这说明spring选择固化属性是当且仅当
在渲染页面前。</p>

<p>在需要使用该session的属性action处，直接使用下面代码即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/addDiy&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">ModelAndView</span> <span class="nf">addDiy</span><span class="o">(</span><span class="nd">@ModelAttribute</span><span class="o">(</span><span class="s">&quot;operator&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">operator</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">ModelAndView</span> <span class="n">mav</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ModelAndView</span><span class="o">();</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">RingRequest</span><span class="o">&gt;</span> <span class="n">ringrequest</span><span class="o">=</span><span class="n">ConstVar</span><span class="o">.</span><span class="na">DIV_LIST</span><span class="o">;</span>
</span><span class='line'>    <span class="n">RingRequest</span> <span class="n">ringrequest1</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">ringrequest</span><span class="o">!=</span><span class="kc">null</span><span class="o">&amp;&amp;</span><span class="n">ringrequest</span><span class="o">.</span><span class="na">size</span><span class="o">()&gt;</span><span class="mi">0</span><span class="o">){</span>
</span><span class='line'>       <span class="n">ringrequest1</span><span class="o">=</span><span class="n">lingyingdiyService</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">ringrequest</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span> <span class="n">operator</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="n">mav</span><span class="o">.</span><span class="na">setViewName</span><span class="o">(</span><span class="s">&quot;webapp/ringDiy/lingyindiy4&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">mav</span><span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="s">&quot;ringrequest&quot;</span><span class="o">,</span> <span class="n">ringrequest1</span><span class="o">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">mav</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在Session范围内使用注入的逻辑还是很清晰的，只是需要注意一下redirect带来的坑。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安卓开发初体验]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/10/18/an-zhuo-kai-fa-chu-ti-yan/"/>
    <updated>2015-10-18T17:08:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/10/18/an-zhuo-kai-fa-chu-ti-yan</id>
    <content type="html"><![CDATA[<p>鉴于项目形势所迫，对一个安卓的demo只能自己直接来了。
也算半逼之下入门了安卓开发。以下面这张图来论，</p>

<p><img src="../images/androidmap.jpg" alt="安卓学习路线图" /></p>

<p>基础部分基本上java web开发工程师都是具备的，入门部分大致跟着google的开发
文档做完第一个例子也就都接触到了。
高级主题里面倒是碰了百度地图和Webview这两个必须接触的东西。</p>

<p>就入门而言，学习资料很丰富，尤其是安卓的开发文档还是很全面的，比大部分开源软件的
教程要强许多，毕竟是有正经的商业公司全面支持的。</p>

<p>就编程而言，全部基于Java的，不像Web开发要再切换到Javascript，整个体系的一致性
更好，编写起来还是轻松愉快的。而传递参数方面，摆脱了必须从客户端到服务端，如果是在
界面中跳转其实要比Web方便。这其实也是一个进程间、线程间通信的事情，而作为App，
其通信的方式还是很丰富的。从最基础的Intent，到手机上各应用系统的彼此调用，
以及Json传递会服务端等，可以玩的花样很多。</p>

<p>对于任何写过界面的Java程序员，上手安卓应用开发应该还都是挺轻松的。
毕竟大部分需要的技能有重合，而体系上安卓也更适合学习。当然，学安卓也有特定的痛苦，
比如屏幕尺寸及比例、API升级快导致节奏混乱。不过在手机端确实是个值得投入的东西。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[看了新逍客的定价和配置庆幸没等待]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/10/17/kan-liao-xin-xiao-ke-de-ding-jie-he-pei-zhi-qing-xing-mei-deng-dai/"/>
    <updated>2015-10-17T19:11:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/10/17/kan-liao-xin-xiao-ke-de-ding-jie-he-pei-zhi-qing-xing-mei-deng-dai</id>
    <content type="html"><![CDATA[<p>逍客一直挺心仪的一辆车，原本是替换家里老凯越的重要备选对象。老一代的逍客据说做工和用料越来越渣，尽管车价也是越来越便宜了，所以主要考虑换代的新逍客。无奈车险八九月间就要到期，而之前逍客说要到11月份才会上市，于是来不及等待改提了CRV 2.4的入门版。</p>

<p>但新逍客出来之后，老实讲挺让人失望的。于是反而庆幸没有等逍客而入手了CRV。拿2.4入门版和逍客2.0顶配版来论，逍客作为一个全新换代的车型，配置上竟然比配置已经很一般的CRV还要渣。顶配还算比crv多了前雷达和全景视频系统，但次配以下竟然雷达基本不配，一副有了摄像头就不要雷达的样子。但根据我的经验，雷达的帮助绝对比视频多。而且也同样没有很有用的自动大灯，比起crv还少了后排出风口、后视镜电动折叠这样一些很实用的舒适性配置。可能逍客在高速、操控等方面是有优势的，但确实和我的需求关系不大。至于价钱，目录价只差4万，以本田这样一路奔着3万优惠下去的腔调，实在还是CRV值多了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[老罗和锤子899元的坚果手机]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/08/26/lao-luo-he-chui-zi-899yuan-de-jian-guo-shou-ji/"/>
    <updated>2015-08-26T23:08:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/08/26/lao-luo-he-chui-zi-899yuan-de-jian-guo-shou-ji</id>
    <content type="html"><![CDATA[<p>老罗这次在梅赛德斯奔驰中心开了坚果手机的发布会。
发布会一如老罗既往的表现一样好看，相较于一年多以前的3k元的锤子手机，这款定价
899/999的坚果手机倒是可以一战的。原因么也很简单，就是够便宜也够有性价比。这个价位
能买到5.5寸1080p的屏确实已经很不错了。</p>

<p>工业设计方面推出了自己的设计师，整个造型确实很iphone，同时正面是用的白色边框，这点很不容易。
因为13年的时候我就发现为啥那么多手机都是黑的，而白的往往要贵一些。按老罗的说法这是色差导致了良品率不同。</p>

<p>软件的话，还是在一个红海里面做道场。但是，锤子确实开发出了一些很不错的应用。在一个竞争那么白热化的
市场，能想出这些东西来必然是废了很多脑细胞的。</p>

<p>硬件方面倒是用的高通的芯片，那配置基本就算过得去了。</p>

<p>这款手机肯定能卖的比锤子好许多，至少会帮老罗在这个市场占的一席之地。
定位确实低端了点，利润方面能不能维持锤子生存下去，还是比较难讲的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zz 日本的房产税]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/08/06/zz-ri-ben-de-fang-chan-shui/"/>
    <updated>2015-08-06T22:19:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/08/06/zz-ri-ben-de-fang-chan-shui</id>
    <content type="html"><![CDATA[<p>转载自<a href="http://www.517japan.com/viewnews-8652.html">http://www.517japan.com/viewnews-8652.html</a></p>

<p>日本的房产税叫做“不动产固定资产税”，跟“都市计画税”捆绑在一起。征收的条款很简单，下面就给大家介绍一下。这里需要说明的是，日本土地是私有制，买到手以后，就世世代代是自己的了，也是世世代代要缴纳资产税的了。</p>

<p>一、不动产固定资产税</p>

<p>1、不动产固定资产税是一种地方税，是以每年1月1日为时点，对在城市规划内的不动产（土地、房屋）的所有人征收的一个税种。</p>

<p>2、税额的计算方法：税额=课税标准× 1.4%，课税标准是当地政府机关登录的不动产台帐的固定资产的评价额。</p>

<p>3、住宅用地的减免政策：住宅用地200平方米以下的部分，称为“小规模住宅用地”，按课税标准额度的六分之一计算。200平方米以上的部分，称为“一般住宅用地”，按课税标准额度的三分之一计算。但是，土地上的建筑面积，不能超过土地面积的10倍。</p>

<p>4、建筑物的减免政策：新建的建筑物到120平方米为止的部分，一般住宅的前三年，三层以上的耐火或者准耐火住宅的前5年，固定资产税减半。但必须住宅的居住部分是建筑物面积的1/2以上；或者：居住面积是100平方以上200平方以下，出租用住宅35平方以上200平方以下，而且，1平方的评价额有限制，木造不超过112000日元，准耐火构造不超过144000日元，耐火构造176000日元。</p>

<p>5，纳税日期：每年4-5月收到纳税通知书，纳税者可以选择一次或者分季度缴纳。</p>

<p>二、都市计画税</p>

<p>1、都市计画税也是一种地方税，也是以每年1月1日为时点，对在城市规划内的不动产（土地、房屋）的所有人征收的一个税种。与固定资产税一起缴纳。</p>

<p>2、税额的计算方法：税额=课税标准× 0.3%，课税标准是当地政府机关登录的不动产台帐的固定资产的评价额。</p>

<p>3、住宅用地的减免政策：住宅用地200平方米以下的部分，称为“小规模住宅用地”，按课税标准额度的三分之一计算。200平方米以上的部分，称为“一般住宅用地”，按课税标准额度的三分之二计算。</p>

<p>4，建筑物的减免政策：没有。</p>

<p>三、举例计算</p>

<p>有了上面的政策解释，所有人都可以比较轻松的计算出每年的应缴纳税额，下面举一个一般情况的例子来计算一下，看看日本人一年缴纳多少房产税。比如：一家人刚买了一套新建的别墅，土地面积是165，建筑面积是100，
其中，土地的评价额为1800万，建筑物的评价额为1200万。计算方法如下：</p>

<p>固定资产税为=土地部分+建筑物部分</p>

<pre><code>               = 1800 × 1/6 × 1.4% + 1200 × 1.4% × 1/2
               = 12.6万
</code></pre>

<p>都市计画税=土地部分+建筑物部分</p>

<pre><code>             = 1800 × 1/3 × 0.3% + 1200 × 0.3%
             = 5.4万
</code></pre>

<p>年度缴纳税额=固定资产税+都市计画税= 18万日元</p>

<p>房产总评估价值为3000万日元，年度税率为：0.6%。实际上，固定资产的评价额是有些水分的，土地价格一般是按照当时土地价格的60%&#8211;70%、建筑物价格是按照建筑费的50%&#8211;70%进行评价的，所以，评价额度为3000万的别墅式住宅实际购置价格是4500万或者更多，这样看来，日本人房产税的年度实际税率为：0.4%。其中评价额尤其是土地的评价额是随着市场状况的变化而变化的。</p>

<p>给出的是某块土地价格变化的曲线图，用的是日本年度，2年是平成2年，也就是1990年，3年是1991年，以此类推。可以看出，日本泡沫经济时代的土地价格以及泡沫破灭以后房地产价格的连年下降，需要注意的是，日本房产泡沫（1993年）破灭稍稍晚于日本经济泡沫破灭（1991年）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于handling rails view的神作]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/08/01/guan-yu-handling-rails-viewde-shen-zuo/"/>
    <updated>2015-08-01T22:25:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/08/01/guan-yu-handling-rails-viewde-shen-zuo</id>
    <content type="html"><![CDATA[<p>http://tutor.lugolabs.com/articles/18-handling-csv-views-in-ruby-on-rails</p>

<p>确实扩展的够方便，实施的够优雅。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么车牌换号不用去验车]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/07/24/wei-shi-yao-che-pai-huan-hao-bu-yong-qu-yan-che/"/>
    <updated>2015-07-24T21:26:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/07/24/wei-shi-yao-che-pai-huan-hao-bu-yong-qu-yan-che</id>
    <content type="html"><![CDATA[<p>上海由于车牌最早拍卖的缘故，所以一直允许换车的时候可以保留原号牌。也算是一种对私人财产的尊重。
这次买车，一直不太理解为什么重新换个号不需要开车去验车，但保留原号就必须去验车。</p>

<p>后来跟师傅了解了一下，原因倒是也很简单，更换新号码的话是可以在4S的社会上牌点搞定的，
而保留原号码这必须到交管所才能办理，交管所的办理新牌又是要新车上门验车的。实际上如果你是去交管所上
新的牌照号码，也是要验车。是否需要验车和是否要保留号码没有直接关系，是由在哪里办理决定的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于OAuth的API Token生成]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/07/22/ji-yu-oauthde-api-tokensheng-cheng/"/>
    <updated>2015-07-22T16:00:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/07/22/ji-yu-oauthde-api-tokensheng-cheng</id>
    <content type="html"><![CDATA[<p>基本思路是对方要先注册一下，<strong>注册的时候提供回调地址</strong>，服务平台生成一个<strong>id</strong>给该用户。</p>

<p>然后，用户用这个id来访问平台公开的认证链接，平台生成<strong>code</strong>并通过注册时提供的<strong>回调地址</strong>发送给对方。</p>

<p>对方最后根据code到<strong>token</strong>获取地址拿到实际的token内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "access_token":"01234567-89ab-cdef-0123-456789abcdef",
</span><span class='line'>  "expires_in":28799,
</span><span class='line'>  "refresh_token":"01234567-89ab-cdef-0123-456789abcdef",
</span><span class='line'>  "token_type":"Bearer",
</span><span class='line'>  "user_id":"01234567-89ab-cdef-0123-456789abcdef",
</span><span class='line'>  "session_nonce":"2bf3ec81701ec291"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015款本田CR-V 2.4两驱版入手]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/07/03/2015kuan-ben-tian-cr-v-2-dot-4liang-qu-ban-ru-shou/"/>
    <updated>2015-07-03T15:39:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/07/03/2015kuan-ben-tian-cr-v-2-dot-4liang-qu-ban-ru-shou</id>
    <content type="html"><![CDATA[<p>这次买车和一年多前买天籁已经完全不一样了。那时候对驾车用车并没有多少了解，总以为车是越大越舒服，
而实际当上司机之后，开始明白大车其实在上海开顾忌的东西多，停车也不方便，尽管车子本身的品质还是很好的。
对自己需要什么，什么开起来方便不再是懵懵懂懂的，有了较明确的想法。而里面最关键的一条就是不要比凯越长，
这属于整个购车的核心需求。</p>

<p>整个看车的过程持续的很长。从去年9月<a href="http://octopresszhangyu.herokuapp.com/blog/2014/09/10/you-dian-wu-liao-de-qi-che-fa-bu-hui/">缤智、昂科威准备发布开始</a>，备选名单可以有一长串，主要就是<a href="http://octopresszhangyu.herokuapp.com/blog/2014/09/30/yi-kuan-jin-qi-bi-jiao-guan-zhu-de-che-bin-zhi-vezel/">缤智、昂科威、换代逍客</a>，<a href="http://octopresszhangyu.herokuapp.com/blog/2014/10/18/ding-jie-huan-suan-he-li-de-lei-ke-sa-si-nx/">nx200</a>，再到<a href="http://octopresszhangyu.herokuapp.com/blog/2015/04/18/xin-kuan-crvhe-q3/">X1, Q3</a>以及<a href="http://octopresszhangyu.herokuapp.com/blog/2015/04/20/crv/">CR-V, RAV4</a>。</p>

<p>可以说把大部分国内销售的suv，35w以下的都考察过了。整个pk历程如下：</p>

<ul>
<li>缤智

<ul>
<li>9月发布时就看中了，但我不喜欢1.8排量的发动机，倾向于1.5直喷地球梦的，但后来3月底出来的1.5L的配置有太低了，于是放弃</li>
</ul>
</li>
<li>换代逍客

<ul>
<li>这个不提了，至今我仍然认为是最合适的，只是逍客可能要11月才上市，9月份是赶不上了，只能放弃</li>
</ul>
</li>
<li>昂科威

<ul>
<li>尺寸略微大了些，4米6多了。老婆还是认为太像GL8，而新出的1.5T又是搭配双离合的，于是放弃</li>
</ul>
</li>
<li>X1

<ul>
<li>认识的熟人说不好，家里也不想我们买bba，于是放弃</li>
</ul>
</li>
<li>Q3

<ul>
<li>优惠很多但服务费也很高，无试驾车，销售也比较傲慢，同属bba，也放弃了</li>
</ul>
</li>
<li>Nx200

<ul>
<li>虽然定价都还算合理，但2.0的版本配置太差，2.0T的价格还是有点高，小区停车环境也不好，不太舍得停那么贵的车，放弃</li>
</ul>
</li>
<li>RAV4

<ul>
<li>最后其实主要就是RAV4 pk CRV</li>
<li>试驾后不喜欢RAV4的A柱和方向盘转向，尽管其动力总成确实够强悍</li>
<li>无后排空调出风口、后备箱突出来一块也不爽，最后还是放弃了</li>
</ul>
</li>
<li>CRV

<ul>
<li>最大的原因是因为CRV在15年4月进行了大改款，而正好和我的购车周期碰上了，毕竟买新不买旧</li>
<li>2.4的地球梦直喷发动机也很馋人，而CVT试驾后感觉还是很轻快，至少也让我满意</li>
<li>新加的一些配置还是挺吸引人的，比如日行灯带、胎压校验、DA屏、蓝牙、发动机启停、并线辅助</li>
</ul>
</li>
</ul>


<p>上面还有3款销量很出色的SUV没有提到，途观、奇骏和翼虎。不选奇骏的理由很简单，已经有天籁了，同一品牌下的，实在太类似了不想再买一部几乎一样的车子。途观和翼虎没考虑的原因有点个性化，周边买的人太多了，老婆直接就给否了。莫非如此，奇骏、途观至少会比RAV4让我更加纠结买什么。 <br/>
而CRV的样子、品牌、尺寸、动力也让全家人达成了一致，所以很顺利地就下单提车了。
配置的选择也比较简单。肯定是要2.4地球梦发动机的，倾向于不要四驱系统，因为城市里开着没用反而增加上百斤的重量。而2.4顶配多的电动尾门和HID大灯对我的吸引力有限，如果是自动大灯的话可能又要纠结一番。所以直接选定2.4两驱。基本上该有的也有了，没有的再升级也没用。</p>

<p>两天开下来的驾驶感受。好的方面来讲，crv的开车压力还是比较小的，反光镜很大，视野也很好，车头很短所以看左右边距、转弯都比较轻松，方向盘很轻松，确实很好开。我感觉和4米5多一点的A级车驾驶感受更接近些，比开B级车的压力小。</p>

<p>不好的方面，发动机启停很鸡肋，每次上去都要关。这个倒也开始习惯了。
另一个不太习惯的地方是松刹车的时候总有声响。有人说是自动变速箱都有的特性，有人说是本田特色，还有说新车都这样。好吧，看看几个月后车子是否会改善。</p>

<p>方向盘倒是很好。怠速挪车时，方向盘很轻盈，速度起来之后方向盘又会加重，转起来都很舒适。
方向盘上的多功能按钮用起来也很爽，切换电台、切换里程信息、接听电话等都已十分方便。</p>

<p>配置上，还是有点无奈了，手动的东西多了些。比如无自动大灯，无感应雨刷，无自动落锁。比起B级轿车，SUV的配置始终是个短板.</p>

<p>137mm离地间隙是满载，大部分时候是不止的。正面上下马路很轻松，完全没压力。
目前来讲真正让我不满的主要是2点：
1. 倒车扭力太弱，屁股要直着倒进很小坡度的斜坡都要大脚轰油门到3000转。
2. DA屏很鸡肋，基本用不起来。</p>

<p>其他的都是小问题或者以后可能会好。比如松刹车时有格叽的声音（非自动启停），无法在停车场用遥控钥匙让车子发出声音提示车子所在方位（据说本田的车都这样，雅阁思域也这样子）。</p>

<p>另外就是配置少，这个只是看厂家的选择了，但是顶配也没自动大灯，没自动落锁，有自动启停却无电子驻车。可能，这对于一款日系家用suv来讲要求太多了。最大的缺点我目前认为还是倒车太无力，大脚轰油门是有很大隐患的。</p>

<p>总体说来，开起来还是挺开心的一款SUV。</p>

<h2>Updated on 2015.08.12</h2>

<p>目前大陆地区最好的车评人颜宇鹏在今天语音评价了CRV约10分钟，尽管他的评价比老款高，但打分却从原来的9分降到了8.5分。不过他介绍的优缺点基本还算靠谱。除了松刹车响的毛病没说之外，其他基本挺全面了。听写记录如下：</p>

<p>前后车门开关的质感差，[x]<br/>
发动机点火后声音挺安静，怠速很平稳<br/>
过减速带动作非常好，好过9代雅阁、杰德等<br/>
上坡中间响应好，动力能渐进增加，大部分cvt上坡时做不到<br/>
自动启停顿挫大[x]<br/>
转速愿意上去，发动机声音好听，更类似at搭配的效果<br/>
破损路容易颠，[x]<br/>
悬架贴服性不错<br/>
过弯车身侧倾很好，方向指向性好，视野很好<br/>
2.4L动力很够用<br/>
路噪声音大，隆隆声，本田特色[x]<br/>
和大巴平行时显示车窗隔离效果不错，车厢隔音效果不错，玻璃挺厚，车厢隔音下过功夫<br/>
没自动大灯、自动雨刷、导航，天窗也不是全景的，总之装备确实不好[x]<br/>
后座翻折方便<br/>
顶配是米其林的胎，不过我的是普利司通DUELER H/T 225/65R17</p>

<p>近期本田最好的车，好过雅阁和杰德。功能性、动力操控、机械底子确实好</p>

<p>另外，关于<strong>机油</strong>的选用，以绿罐0w-20的机油为佳。SN，GF-5 级别，建议全合成，周期长一些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[试驾CR-V]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/06/20/shi-jia-crv/"/>
    <updated>2015-06-20T14:29:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/06/20/shi-jia-crv</id>
    <content type="html"><![CDATA[<p>大约1个月前，去邯郸路上的东本4s店看了CR-V，无奈当时的4s还没试驾车，于是只能静态考察。
今天再去4s，终于有了新的试驾车，可以试驾了。</p>

<p>既然再去试驾了，意味着静态考察的结果是令人满意的。这车本身的空间是最让人满意的，后备箱十分平整，
尾门开关的感觉很爽。车子内部的空间也不小，前后排的距离都很宽裕，座椅高低也很适合中国人，无论男女。
对大块头来讲，上上下下进进出出车门也比轿车方便。后排的地台也很平整，中间几乎没有突起，后排也有空调出风口。
这些都是CR-V有优势的地方。</p>

<p>静态不满的地方，还是这个中控和内饰显得确实太廉价了。低廉的气息扑面而来。虽然用了些软性材质，但塑料感依然很强。
2.0的内饰是比较差的。对比同样是日系的天籁，皮革、中控的高级感都是明显不如的。</p>

<p>今天试驾的是2.4顶配，加速很轻巧，本田的CVT看来挺强悍。方向盘也是轻的，不过比rav4重一点。
A柱和rav4也差不多，有点档视线。当初2.0的内饰让人感觉比较粗陋，
到了2.4全皮的座椅，坐在里面依然掩饰不了铺面而来的廉价感，车厢感觉真的比天籁这类车差很多。
虽然是皮质的座椅和搁手的，但这个皮质手感不佳。
不过想要的是suv，也只能这样了。
后视镜的视野很好，看的很清楚。加速方面和凯越不比了，比天籁也还是快，看来直喷真有直喷的好处。开起来后方向盘会加重，
原地挪车的话方向盘可是足够轻的，适合单手揉轮。</p>

<p>总的来讲，此次试驾的结果让我相当满意，原本打算立刻下单的，不过因为家长的原因还要再等几天。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nscd]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/06/19/nscd/"/>
    <updated>2015-06-19T13:56:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/06/19/nscd</id>
    <content type="html"><![CDATA[<p>NSCD是name service cache daemon的缩写，主要用于在linux下对dns查询的结果进行缓存。
默认情况下，linux是不对dns进行缓存的，因此可能会对应用的性能产生影响。只有开启了nscd服务，才会拥有缓存。</p>

<p>服务的安装很简单，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>yum install nscd
</span><span class='line'>service nscd start
</span></code></pre></td></tr></table></div></figure>


<p>这样就可以开启nscd的服务了。
如果本身就面临性能问题，可以直接测试一下看看性能有没有提高。除此之外可以通过下列命令检查一下效果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nscd -g | grep <span class="s1">&#39;hosts cache&#39;</span> -A 22
</span></code></pre></td></tr></table></div></figure>


<p>可以得到如下的信息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>hosts cache:
</span><span class='line'>
</span><span class='line'>            yes  cache is enabled
</span><span class='line'>            yes  cache is persistent
</span><span class='line'>             no  cache is shared
</span><span class='line'>            211  suggested size
</span><span class='line'>         216064  total data pool size
</span><span class='line'>            336  used data pool size
</span><span class='line'>           3600  seconds <span class="nb">time </span>to live <span class="k">for </span>positive entries
</span><span class='line'>             20  seconds <span class="nb">time </span>to live <span class="k">for </span>negative entries
</span><span class='line'>            139  cache hits on positive entries
</span><span class='line'>              4  cache hits on negative entries
</span><span class='line'>              8  cache misses on positive entries
</span><span class='line'>              6  cache misses on negative entries
</span><span class='line'>             91% cache hit rate
</span><span class='line'>              2  current number of cached values
</span><span class='line'>              4  maximum number of cached values
</span><span class='line'>              1  maximum chain length searched
</span><span class='line'>              0  number of delays on rdlock
</span><span class='line'>              0  number of delays on wrlock
</span><span class='line'>              0  memory allocations failed
</span><span class='line'>            yes  check /etc/hosts <span class="k">for </span>changes
</span></code></pre></td></tr></table></div></figure>


<p>其中有命中率，cache命中的次数等信息。positive是指查询成功，negative是指查询失败。</p>

<p>但是，很多情况下，可能开启nscd之后，会发现命中率一直为0。原因在于很多linux服务会采用直接访问的模式来读取缓存，
直读的模式性能更好，但因为不经过daemon，所以无法进行统计。解决办法是把<code>shared</code>的属性关闭。</p>

<p>修改<code>/etc/nscd.conf</code>，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   <span class="nb">enable</span>-cache            hosts           yes
</span><span class='line'>    positive-time-to-live   hosts           3600
</span><span class='line'>    negative-time-to-live   hosts           20
</span><span class='line'>    suggested-size          hosts           211
</span><span class='line'>    check-files             hosts           yes
</span><span class='line'>    persistent              hosts           yes
</span><span class='line'>    shared                  hosts           no
</span><span class='line'>    max-db-size             hosts           3355443
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[云梯越来越烂了]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/06/16/yun-ti-yue-lai-yue-lan-liao/"/>
    <updated>2015-06-16T21:46:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/06/16/yun-ti-yue-lai-yue-lan-liao</id>
    <content type="html"><![CDATA[<p>唉，云梯是越来越不给力了。之前的新加坡1站点还能用用，最近这个月来基本是没法用了。
绝对令人失望。</p>

<p>Update on 2015.07.22: 据说是因为517电信网通大提速后国内开展了大量50M 100M的带宽，导致骨干网资源严重不足造成的。
客服mm回答根据以往的经验一般电信等运营商在2周左右会调整好。而后续的发展也证明了此种说法，只是时间稍微又长了一两个礼拜。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring In Action 4]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/06/01/spring-in-action-4/"/>
    <updated>2015-06-01T10:31:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/06/01/spring-in-action-4</id>
    <content type="html"><![CDATA[<p>大约两年前，又读了In action的第三版，感觉离实际的开发已经有点远了，里面讲的内容反应不了当时Spring主要的用法。于是换了
《Spring In Practice》学习，比当时的in action贴近实际反应现状多了。<br/>
好在，In action在14年年末又出了新的版本。
经典的Spring系列又出了第4版，这一版是完全跟上了Spring发展的脚步，呈现的也是最新的Spring开发内容，而且聚焦于Spring Web。</p>

<p>内容比较新颖，作者的文章也总喜欢和读者拉拉家常，所以整个书读起来也比较有意思。不过，这本书不适合完全没Java Web开发基础的读者，
其整个书还是写给已经使用Spring进行开发或者至少已经略懂什么是Java Web开发的人，所以，学这本书前必须要有一点基础。</p>

<h2>Spring的基础介绍</h2>

<p>这部分也是整个系列一直的拿手好戏，现在总结的是越来越精彩，在Xml配置和Java Config中也完全倒向后者了，不过更多的也是通过这两个配置结合了自动扫描的配置方法，即Annotation。</p>

<h3>Spring 的四大法宝：</h3>

<ol>
<li>PoJo</li>
<li>DI（依赖注入，取代各个类之间的内部new）</li>
<li>Aspect（Feature），给每个method加上chain，主要用于Transaction、logging、security、cacching这些领域</li>
<li>Template（JDBCTemplate等等)，即模板方法，用于减少冗长代码的写入。</li>
</ol>


<p>而这一切的基础是Java的动态编程，除了Java自带的反射，其实大量使用了CGLib库。</p>

<h3>Profile</h3>

<p>通过<code>@Profile("dev")</code>来表明在什么情况下使用下面的标注或配置，即激活哪一种配置属性。有两个变量可以指定值</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spring.profiles.active
</span><span class='line'>spring.profiles.default</span></code></pre></td></tr></table></div></figure>


<p>其中，<code>default</code>可以在web.xml中定义，而<code>active</code>可以在系统属性、环境变量、JNDI或者@ActiveProfiles中定义，因为<code>active</code>的优先级更高。</p>

<h3>其他一些标注</h3>

<p>@Primary 用于消除bean的歧义性（比如有多个同名或同类型、同接口），在声明是可以使用表明这个为主。<br/>
@Qualifier，用于一步一步的Narrow指定匹配，不过似乎耦合了点，个人觉得不推荐使用<br/>
@Scope，这个很关键，指定了生成bean使用的容器, Prototype是每次new一个，大部分默认是单例，还有基于Session和Scope的bean注入，解决了web开发时的有些信息注入的难题。具体可参看<a href="http://octopresszhangyu.herokuapp.com/blog/2015/05/19/httpsessionzai-springzhong-de-pei-fa-he-wen-ti/">HttpSession在Spring中的配法和问题</a>。</p>

<h2>Aop</h2>

<p>Aop 提供了在method的前后增加功能（Feature）的能力，而这些功能往往是针对业务某些统一的能力的，所以称之为切面，意在把日志、事物、安全等功能提取出来，并且Spring配套了一系列术语称呼AOP中的各个角色。
但本质上还是一种定义Hook的模式。</p>

<ul>
<li>Advice ， 功能本身</li>
<li>PointCut，实际需要使用的Join Points</li>
<li>Joinpoints，在哪些点（方法中插入）</li>
</ul>


<p>插入的时机有：
1. Before: method调用前
2. After all: method调用后
3. After returning success: method调用成功
4. After throwing: method调用出现例外
5. Around: 写法最复杂，需要把调用的chain写在Advice里面</p>

<p>具体用分为:<br/>
1. Introductions: 给现有的class <strong>加</strong>(新增)方法或属性, 类似加入一个模块
2. weaving（编织、插入）：代理插入，可以在编译时、加载class时以及运行时混入</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HttpSession在Spring中的配法和问题]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/05/19/httpsessionzai-springzhong-de-pei-fa-he-wen-ti/"/>
    <updated>2015-05-19T17:22:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/05/19/httpsessionzai-springzhong-de-pei-fa-he-wen-ti</id>
    <content type="html"><![CDATA[<p>最早出于使用struts2的习惯，在Spring中如果需要使用<code>HttpSession</code>，做法是把这个对象作为整个类的一个实例对象。</p>

<p>1</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Log</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">LogFactory</span><span class="o">.</span><span class="na">getLog</span><span class="o">(</span><span class="n">TestController</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Autowired</span>
</span><span class='line'>  <span class="n">HttpSession</span> <span class="n">session</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>后来因为担心Controller在Spring中是单例的（在struts2中是多例的），怕引出线程安全问题，于是把<code>session</code>放入了method中进行注入。</p>

<p>2</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@ResponseBody</span>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span>  <span class="n">produces</span> <span class="o">=</span> <span class="n">MediaTypes</span><span class="o">.</span><span class="na">TEXT_HTML_UTF_8</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">testSession</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">Model</span> <span class="n">model</span><span class="o">,</span> <span class="n">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">hashCode</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>  <span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;val&quot;</span><span class="o">)!=</span><span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;val&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">i</span><span class="o">++;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&quot;val&quot;</span><span class="o">,</span> <span class="n">i</span><span class="o">%</span><span class="mi">3</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;hashCode: &quot;</span> <span class="o">+</span> <span class="n">hashCode</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">+</span><span class="n">hashCode</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>近日在学习Spring in Action的过程中，发现其实第一种方式下使用了<code>proxy 模式</code>, 实际被注入的类是<code>session  $Proxy38</code>这样的代理类，
类似于避免反复调用<code>createEntityManager</code>的做法，该代理类会寻找实际对应的session并进行操作,只是给controller注入了一个壳。</p>

<p>而第2种方法中，注入的则是标准的容器session: <code>org.apache.catalina.session.StandardSessionFacade</code></p>

<p>3</p>

<p>此外，受到推崇的是第三种写法，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="nd">@Scope</span><span class="o">(</span><span class="n">proxyMode</span><span class="o">=</span><span class="n">ScopedProxyMode</span><span class="o">.</span><span class="na">TARGET_CLASS</span><span class="o">,</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;session&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShoppingCart</span> <span class="kd">implements</span> <span class="n">Serializable</span><span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种写法将整个购物车变成一个scope属于session的bean，由spring注入并负责保存。</p>

<p>但这种写法我个人感觉有点过于抛离了web开发。尽管Spring的一大好处是取消对容器的依赖，从而做到测试的方便。但完全和Web容器隔离，变得不像Web开发也不是什么好的策略。
毕竟Session的概念几乎每个Web开发者都有，而scope=session则反而会增加沟通的难度。</p>
]]></content>
  </entry>
  
</feed>
