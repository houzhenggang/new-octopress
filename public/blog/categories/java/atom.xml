<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: java | Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2015-06-16T21:50:59+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring In Action 4]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/06/01/spring-in-action-4/"/>
    <updated>2015-06-01T10:31:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/06/01/spring-in-action-4</id>
    <content type="html"><![CDATA[<p>大约两年前，又读了In action的第三版，感觉离实际的开发已经有点远了，里面讲的内容反应不了当时Spring主要的用法。于是换了
《Spring In Practice》学习，比当时的in action贴近实际反应现状多了。<br/>
好在，In action在14年年末又出了新的版本。
经典的Spring系列又出了第4版，这一版是完全跟上了Spring发展的脚步，呈现的也是最新的Spring开发内容，而且聚焦于Spring Web。</p>

<p>内容比较新颖，作者的文章也总喜欢和读者拉拉家常，所以整个书读起来也比较有意思。不过，这本书不适合完全没Java Web开发基础的读者，
其整个书还是写给已经使用Spring进行开发或者至少已经略懂什么是Java Web开发的人，所以，学这本书前必须要有一点基础。</p>

<h2>Spring的基础介绍</h2>

<p>这部分也是整个系列一直的拿手好戏，现在总结的是越来越精彩，在Xml配置和Java Config中也完全倒向后者了，不过更多的也是通过这两个配置结合了自动扫描的配置方法，即Annotation。</p>

<h3>Spring 的四大法宝：</h3>

<ol>
<li>PoJo</li>
<li>DI（依赖注入，取代各个类之间的内部new）</li>
<li>Aspect（Feature），给每个method加上chain，主要用于Transaction、logging、security、cacching这些领域</li>
<li>Template（JDBCTemplate等等)，即模板方法，用于减少冗长代码的写入。</li>
</ol>


<p>而这一切的基础是Java的动态编程，除了Java自带的反射，其实大量使用了CGLib库。</p>

<h3>Profile</h3>

<p>通过<code>@Profile("dev")</code>来表明在什么情况下使用下面的标注或配置，即激活哪一种配置属性。有两个变量可以指定值</p>

<p><code>
spring.profiles.active
spring.profiles.default
</code></p>

<p>其中，<code>default</code>可以在web.xml中定义，而<code>active</code>可以在系统属性、环境变量、JNDI或者@ActiveProfiles中定义，因为<code>active</code>的优先级更高。</p>

<h3>其他一些标注</h3>

<p>@Primary 用于消除bean的歧义性（比如有多个同名或同类型、同接口），在声明是可以使用表明这个为主。<br/>
@Qualifier，用于一步一步的Narrow指定匹配，不过似乎耦合了点，个人觉得不推荐使用<br/>
@Scope，这个很关键，指定了生成bean使用的容器, Prototype是每次new一个，大部分默认是单例，还有基于Session和Scope的bean注入，解决了web开发时的有些信息注入的难题。具体可参看<a href="/blog/2015/05/19/httpsessionzai-springzhong-de-pei-fa-he-wen-ti/">HttpSession在Spring中的配法和问题</a>。</p>

<h2>Aop</h2>

<p>Aop 提供了在method的前后增加功能（Feature）的能力，而这些功能往往是针对业务某些统一的能力的，所以称之为切面，意在把日志、事物、安全等功能提取出来，并且Spring配套了一系列术语称呼AOP中的各个角色。
但本质上还是一种定义Hook的模式。</p>

<ul>
<li>Advice ， 功能本身</li>
<li>PointCut，实际需要使用的Join Points</li>
<li>Joinpoints，在哪些点（方法中插入）</li>
</ul>


<p>插入的时机有：
1. Before: method调用前
2. After all: method调用后
3. After returning success: method调用成功
4. After throwing: method调用出现例外
5. Around: 写法最复杂，需要把调用的chain写在Advice里面</p>

<p>具体用分为:<br/>
1. Introductions: 给现有的class <strong>加</strong>(新增)方法或属性, 类似加入一个模块
2. weaving（编织、插入）：代理插入，可以在编译时、加载class时以及运行时混入</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HttpSession在Spring中的配法和问题]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/05/19/httpsessionzai-springzhong-de-pei-fa-he-wen-ti/"/>
    <updated>2015-05-19T17:22:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/05/19/httpsessionzai-springzhong-de-pei-fa-he-wen-ti</id>
    <content type="html"><![CDATA[<p>最早出于使用struts2的习惯，在Spring中如果需要使用<code>HttpSession</code>，做法是把这个对象作为整个类的一个实例对象。</p>

<p>1</p>

<p>```java
public class TestController {</p>

<p>  private static final Log logger = LogFactory.getLog(TestController.class);</p>

<p>  @Autowired
  HttpSession session;</p>

<p>  ...
}
```</p>

<p>后来因为担心Controller在Spring中是单例的（在struts2中是多例的），怕引出线程安全问题，于是把<code>session</code>放入了method中进行注入。</p>

<p>2</p>

<p>```java
@ResponseBody
  @RequestMapping(method = RequestMethod.GET,  produces = MediaTypes.TEXT_HTML_UTF_8)
  public String testSession(HttpServletRequest request, HttpServletResponse response, Model model, HttpSession session) {</p>

<pre><code>int hashCode = session.hashCode();

int i = 0  ;
if (session.getAttribute("val")!=null) {
  i = (int)session.getAttribute("val");
  i++;
} 

session.setAttribute("val", i%3);

logger.info("hashCode: " + hashCode);

return ""+hashCode + ": " + i;
</code></pre>

<p>  }
```</p>

<p>近日在学习Spring in Action的过程中，发现其实第一种方式下使用了<code>proxy 模式</code>, 实际被注入的类是<code>session  $Proxy38</code>这样的代理类，
类似于避免反复调用<code>createEntityManager</code>的做法，该代理类会寻找实际对应的session并进行操作,只是给controller注入了一个壳。</p>

<p>而第2种方法中，注入的则是标准的容器session: <code>org.apache.catalina.session.StandardSessionFacade</code></p>

<p>3</p>

<p>此外，受到推崇的是第三种写法，</p>

<p><code>java
@Component
@Scope(proxyMode=ScopedProxyMode.TARGET_CLASS, value="session")
public class ShoppingCart implements Serializable{
}
</code></p>

<p>这种写法将整个购物车变成一个scope属于session的bean，由spring注入并负责保存。</p>

<p>但这种写法我个人感觉有点过于抛离了web开发。尽管Spring的一大好处是取消对容器的依赖，从而做到测试的方便。但完全和Web容器隔离，变得不像Web开发也不是什么好的策略。
毕竟Session的概念几乎每个Web开发者都有，而scope=session则反而会增加沟通的难度。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring 4 中的新东西]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/05/04/spring-4-zhong-de-xin-dong-xi/"/>
    <updated>2015-05-04T14:30:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/05/04/spring-4-zhong-de-xin-dong-xi</id>
    <content type="html"><![CDATA[<p>Spring还在继续提高与演进中。</p>

<h3>3.1中的新东西</h3>

<ul>
<li>environment profiles，支持development、test和production等条件下独特的配置</li>
<li>增加enable annotations，在Java文件配置中</li>
<li>Declarative caching support，像支持事务一样支持缓存</li>
<li>支持Servlet 3.0，包括在java文件中声明servlets和filters，而不仅仅是在web.xml中</li>
<li>JPA支持的提升，可以不再需要persistence.xml</li>
<li>自动绑定路径便利给model属性</li>
<li>支持对Accept和Content-Type消息头的匹配，通过@RequestMappingproduces</li>
<li>绑定部分二进制表单请求给方法参数，通过@RequestPart，比@RequestParam更强大（只能对请求参数数据绑定，key-alue格式），而@RequestPart支持如JSON、XML内容区数据的绑定</li>
<li>flash属性的支持</li>
<li>JpaTemplate和JpaDaoSupport让位于EntityManager</li>
</ul>


<h3>3.2中的新东西</h3>

<ul>
<li>支持servlet 3中的异步请求，使得一个请求可以在独立的线程中被处理，让servlet线程可以处理更多的请求</li>
<li>Spring MVC的test框架，包括RestTemplate的测试支持</li>
<li>@controllerAdvice使得@ModelAttributes等控制器的方法可以在单个类中重新组织</li>
<li>ContentNegotiatingViewResolver</li>
<li>@MatrixVariable</li>
<li>Rest方面的改进与支持</li>
</ul>


<h3>4.0中的新东西</h3>

<ul>
<li>WebSocket的支持，包括JSR-356中Java API对WebSocket的支持</li>
<li>SockJS/STOMP对WebSocket和消息模块的封装</li>
<li>Java 8 特性的应用，比如lambda。callback interface的使用变简单了，如RowMapper和JdbcTemplate</li>
<li>Java 8中的时间日期api</li>
<li>RestTemplate的一个异步版实现</li>
<li>新增对JMS 2.0 JTA 1.2， JPA 2.1的支持</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[静态文件的url后缀md5化]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/01/22/jing-tai-wen-jian-de-urlhou-zhui-md5hua/"/>
    <updated>2015-01-22T09:55:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/01/22/jing-tai-wen-jian-de-urlhou-zhui-md5hua</id>
    <content type="html"><![CDATA[<p>长久以来，在jsp中引入css和JavaScript都是手工硬编的:</p>

<p>```jsp
<link href='http://octopresszhangyu.herokuapp.com/toolbar/static/orderFlow/css/reset.css' rel="stylesheet" type="text/css" /></p>

<script src="http://octopresszhangyu.herokuapp.com/toolbar/static/jquery/jquery.min.js" charset="utf-8"></script>


<p>```</p>

<p>好处很明显，最接近实际生成的html，很直观。坏处在于重复性高，而且无法控制后台生成的随机数，这样不太利于nginx等处理静态资源的缓存。终极方案莫过于在后缀上加上md5指纹信息，这样既可以让nginx等通知浏览器长期缓存，而一旦文件发生变化也必然可以让浏览器再次发起请求获得css和JavaScript。最终生成的页面信息达到下面的效果：</p>

<p>```jsp</p>

<script src="http://octopresszhangyu.herokuapp.com/toolbar/static/jquery/toolbar.js?2dc0cb76e7faa4c150fca76981cbcd20" charset="utf-8"></script>


<p>```</p>

<p>实现包含两部分，一方面需要可以计算出静态文件的md5值，另一方面则是可以在jsp中调用并生成上述html。多番比较后，发现jsp中还是使用标签比较合适，所以继续写tag文件：</p>

<p>style.tag
<code>jsp
&lt;%@ tag pageEncoding="UTF-8" import="com.sanss.toolbar.hepler.BaseHelper" %&gt;
&lt;%@ attribute name="file" type="java.lang.String" required="true" %&gt;
&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;
&lt;c:set var="ctx" value="${pageContext.request.contextPath}" /&gt;
&lt;link href='${ctx}&lt;%=BaseHelper.rtg(file) %&gt;' rel="stylesheet" type="text/css" /&gt;
</code></p>

<p>javascript.tag
```jsp
&lt;%@tag pageEncoding="UTF-8" import="com.sanss.toolbar.hepler.BaseHelper"%>
&lt;%@ attribute name="file" type="java.lang.String" required="true"%>
&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
&lt;c:set var="ctx" value="${pageContext.request.contextPath}" /></p>

<script src="${ctx}<%=BaseHelper.rtg(file) %>" charset="utf-8"></script>


<p>```</p>

<p>其中使用到了BaseHelper里面的生成md5后缀级链接的方法<code>rtg(filepath)i</code></p>

<p>```java
/<em>* 生成静态文件链接的公共方法，加上md5后缀或者时间戳。
   * @param resource
   * @return
   </em>/
  public static String rtg(String resource) {</p>

<pre><code>String fileMd5 = fileMD5s.get(resource);
if (StringUtils.isEmpty(fileMd5)) {
  System.out.println(System.getProperty("user.dir"));
  fileMd5 = getFileMD5("../webapps/toolbar/static/"+resource);
  if (StringUtils.isEmpty(fileMd5)) {
    fileMd5 = timestamp;
  }
  fileMD5s.put(resource, fileMd5);
}

return "/static/"+resource+"?"+fileMd5;
</code></pre>

<p>  }
```</p>

<p>最不济的情况下，也能给文件加上启动日期的时间戳。</p>

<p>而在布局或者其他需要引入css和js的页面，直接使用这种代码即可:</p>

<p><code>jsp
&lt;tags:style file="styles/css1.css" /&gt;
&lt;tags:javascript file="jquery/jquery.min.js" /&gt;
&lt;tags:javascript file="jquery/tl.js" /&gt;
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Safari不支持第三方cookie引起的session改造]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2015/01/21/safaribu-zhi-chi-di-san-fang-cookieyin-qi-de-sessiongai-zao/"/>
    <updated>2015-01-21T13:48:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2015/01/21/safaribu-zhi-chi-di-san-fang-cookieyin-qi-de-sessiongai-zao</id>
    <content type="html"><![CDATA[<p>近日的一个项目中，经常出现部分浏览器的session无法写入的事情。观察一番后，发现这些浏览器大都属于iPhone的Safari浏览器，尤其以iOS7版本居多。
问题本身并不难猜，应该就是cookie无法写入引起的。奇怪的是，部分同版本的Safari又是可以写入session的，所以这个问题很让人困惑。
反复查找，最后明白原因是：首先，对于第三方cookie，Safari升级后确实有禁止写入cookie的特性；其次，但是对于已存在cookie的情况，则尽管是第三方cookie依然还会写入。</p>

<p>就是因为其次这个因素存在，所以之前进行测试的一些手机照样可以写入session了。</p>

<p>问题是找到了，但怎么解决呢？Java中最简单就是让url中带入jsessionid，只是这个方式确实有好多年没有使用过了。虽然是第三方cookie，但因为测试时有过session了，所以还能继续写入。</p>

<p><code>response.encodeURL(url)</code></p>

<p>-- 查文档，这个api的含义是对于如果是可以用cookie追踪sessionid的则不会在url后加入jsessionid，而对于不支持cookie追踪的则会在url中写入id。<br/>
这引发了我的好奇心，只有response怎么能判断cookie是否能追踪呢？</p>

<p>一看Tomcat的源码，实现倒也简单，就是根据当前session的id是否从cookie中获取的来决定的。如果首次访问网站，此时不会有sessionid，则自然不是从cookie追踪的，于是生成的url都有jsessionid。
二次请求上来，如果是cookie中读取的，则不再写入了。如果不是从cookie中读取的，则继续写入jsessionid。也就是说，<strong>不管是不是支持cookie写入，第一笔encodeURL的调用都会加上jessionid</strong>。</p>

<p>例如，第一次访问都会生成这样的链接 <code>http://192.168.202.72:8080/toolbar/home/nav;jsessionid=EFC1A53F48CC5BC9BE58F50830296FBB</code>, 如果再次访问就是<code>http://192.168.202.72:8080/toolbar/home/nav</code>.</p>

<p>这个东西的缺点公开的说法有如下两点：</p>

<ol>
<li>sessionid暴露在url链接中并不安全；</li>
<li>sessionid这样子会保存在地址栏中，容易引发保存后歧义，因为sessionid其实每一次都会是不一样的。</li>
</ol>


<p>简而言之就是这样的链接不好看外加安全性有一定的问题。</p>

<p>不过这个安全性问题如果从网络的角度来看有点勉强。因为http头也是明文传输的，只是浏览器中不显示罢了。以机器的角度来看，jsessionid放在header还是uri中的区别并不大。鉴于业务需要，还是采用吧。于是引发这种写法最大的毛病，需要在jsp中每个自己的链接都加上<code>&lt;%=response.encodeURL(url)%&gt;</code> 。此时不免想起如果都像<code>link_to</code>那样生成链接的话，改起来就方便多了。</p>

<p>Java Web的开发至今没有很方便的helper机制，能用用的还是tags的办法，于是写一个hrefto.tag放到tags下面。</p>

<p>hrefto.tag
```jsp
&lt;%@tag pageEncoding="UTF-8"%>
&lt;%@ attribute name="uri" type="java.lang.String" required="true"%></p>

<p>&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%></p>

<p>&lt;% String ctx = request.getContextPath(); %>
&lt;%= response.encodeURL(ctx + uri) %>
```</p>

<p>在jsp中的应用主要是两句话，第一是引入，第二是调用</p>

<p><code>jsp
&lt;%@ taglib prefix="tags" tagdir="/WEB-INF/tags"%&gt; &lt;!--hrefto.tag存放的位置--&gt;
&lt;a id="help" href='&lt;tags:hrefto uri="/home" /&gt;' target="_blank"&gt;&lt;/a&gt;
</code>
其中<code>&lt;tags:hrefto uri="/home" /&gt;</code>就会调用hrefto.tag中的内容，生成链接。</p>
]]></content>
  </entry>
  
</feed>
