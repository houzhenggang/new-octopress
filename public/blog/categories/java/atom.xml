<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: java | Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2017-01-01T21:44:00+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[spring boot in action]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/09/19/spring-boot-in-action/"/>
    <updated>2016-09-19T14:47:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/09/19/spring-boot-in-action</id>
    <content type="html"><![CDATA[<ul>
<li>Auto-Config</li>
<li>用starter处理依赖</li>
<li>CLI 命令行处理启动等</li>
<li>Actuator 监控组件 , 通过web或者shell</li>
</ul>


<p><code>
spring version
spring --version
spring shell # windows下打开可以自动补全的功能
</code></p>

<h3>工程初始化</h3>

<p><code>
spring init -dweb,jpa,security --build gradle -p jar -x //-x表示生成到当前目录
spring init -dweb,jpa,security --build gradle -p war myapp //表示生成工程到myapp目录
</code></p>

<p>```
@SpringBootApplication
public class DemoddfApplication {</p>

<p>public static void main(String[] args) {
SpringApplication.run(DemoddfApplication.class, args);
}
}
```</p>

<p>@SpringBootApplication 起到了过去3个标注的作用，打开了自动配置和自动扫描。如果有新的配置要求，@Configuration用在其他配置类中进行配置的扩充。而主class可以不必修改</p>

<p>用starter定义可实现更高度的抽象，也不必给出每个组件的版本号。通过<code>mvn dependency:tree</code>可查看实际的包依赖关系.
starter就是普通的maven或gradle依赖，所以可以exclude也可以指定更直接的版本。</p>

<h3>自动配置定制化的举例</h3>

<p>安全是最好的需要自己自行设置的例子，not one--size-fits-all。
这是yml方式
<code>
server:
port: 8443
ssl:
key-store: file:///path/to/mykeys.jks
key-store-password: letmein
key-password: letmein
</code></p>

<p>配置数据源</p>

<p><code>
spring:
datasource:
url: jdbc:mysql://localhost/readinglist
username: dbuser
password: dbpass
driver-class-name: com.mysql.jdbc.Driver
</code></p>

<h3>属性信息的几种来源</h3>

<ol>
<li>Command-line arguments</li>
<li>JNDI attributes from java:comp/env</li>
<li>JVM system properties</li>
<li>Operating system environment variables</li>
<li>Randomly generated values for properties prefixed with random.* (referenced when setting other properties, such as `${random.long})</li>
<li>An application.properties or application.yml file outside of the application</li>
<li>An application.properties or application.yml file packaged inside of the application</li>
<li>Property sources specified by @PropertySource</li>
<li>Default properties</li>
</ol>


<p>在application.properties中指定<code>spring.profiles.active</code>的值后，boot就会读取application-{active}.properties的值</p>

<h3>自动化测试</h3>

<p>@WebIntegrationTest Test class有这个标注就会让spring启动一个测试的tomcat或jetty进程</p>

<p>```
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(
classes=ReadingListApplication.class)
@WebIntegrationTest</p>

<p>public class SimpleWebTest {
@Test(expected=HttpClientErrorException.class)
public void pageNotFound() {
try {
RestTemplate rest = new RestTemplate();
rest.getForObject(
"http://localhost:8080/bogusPage", String.class);
fail("Should result in HTTP 404");
} catch (HttpClientErrorException e) {
assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());
throw e;
}
}
}
```</p>

<p>代入参数
<code>@WebIntegrationTest(value={"server.port=0"})</code> 和 <code>@WebIntegrationTest("server.port=0")</code></p>

<p>selenium的用ie模拟访问自己的服务很有意思，值得制作一个。</p>

<p>```java</p>

<pre><code>            FirefoxDriver browser = new FirefoxDriver();
browser.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
String baseUrl = "http://www.baidu.com/";
browser.get(baseUrl);
String currentUrl = browser.getCurrentUrl();
assertEquals(baseUrl +"/readingList", currentUrl);

assertEquals("You have no books in your book list", 
             browser.findElementByTagName("div").getText());

browser.findElementByName("title").sendKeys("BOOK TITLE");
browser.findElementByName("author").sendKeys("BOOK AUTHOR");
browser.findElementByName("isbn").sendKeys("1234567890");
browser.findElementByName("description").sendKeys("DESCRIPTION");
browser.findElementByTagName("form").submit();

WebElement dl = 
    browser.findElementByCssSelector("dt.bookHeadline");
assertEquals("BOOK TITLE by BOOK AUTHOR (ISBN: 1234567890)", 
             dl.getText());
WebElement dt = 
    browser.findElementByCssSelector("dd.bookDescription");
assertEquals("DESCRIPTION", dt.getText());
</code></pre>

<p>```</p>

<p>《Selenium WebDriver in Practice》但还没完成，可能要到2016年10月份才能出版</p>

<p>/beans 列出创建的全部bean<br/>
/autoconfig 列出自动配置生效和未生效的内容<br/>
/env 列出设置的环境<br/>
/configprops 列出所有的参数<br/>
/metrics 列出访问的指标<br/>
/trace 给出近100个http请求的处理信息<br/>
/dump 给出所有线程的情况<br/>
/health 表明是否UP<br/>
/info 列出属性文件中info.开头的信息，但似乎有乱码</p>

<p>actuator的remote shell
默认启动一个端口在2000，每次启动时会生成一个密码，可以用ssh访问</p>

<p><code>
ssh user@localhost -p 2000
Password authentication
Password:
</code></p>

<p>自己定义metrics：</p>

<p>actuator有CounterService服务，可以用于增加值。
```
public interface CounterService {
void increment(String metricName);
void decrement(String metricName);
void reset(String metricName);
}</p>

<p>```</p>

<p>GaugeService是记录值</p>

<p><code>
public interface GaugeService {
void submit(String metricName, double value);
}
</code></p>

<p>自定义Health</p>

<p>```
@Component
public class AmazonHealth implements HealthIndicator {
@Override
public Health health() {
try {
RestTemplate rest = new RestTemplate();
rest.getForObject("http://www.amazon.com", String.class);
return Health.up().build();
} catch (Exception e) {
return Health.down().build();
}
}
}</p>

<p>//还可以加入更多的细节内容，使用withDetail</p>

<p>return Health.down().withDetail("reason", e.getMessage()).build();</p>

<p>```</p>

<p>上述endPoint的保护需采用所有spring暴露的链接一致的方式</p>

<p><code>management.context-path=/mgmt</code>，其中的<code>management.context-path</code>可以给spring actuator定义全部的前缀</p>

<p>这样可便于统一控制
<code>.antMatchers("/mgmt/**").access("hasRole('ADMIN')")</code></p>

<h3>部署时调整production环境变量</h3>

<p><code>@Profile("production")</code></p>

<p><code>export SPRING_PROFILES_ACTIVE=production</code></p>

<p>最简单的是export active的环境变量为<code>production</code></p>

<h3>spring的db migrate，不算很实用吧</h3>

<p>Spring Boot includes auto-configuration support for two popular database migration
libraries:<br/>
■ Flyway (http://flywaydb.org)  --- 直接采用SQL编写ddl<br/>
■ Liquibase (www.liquibase.org) --- 使用yaml json等</p>

<h3>附录</h3>

<p><code>
&lt;dependency&gt;
&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></p>

<p>开发工具具备自动重启的功能，但下面这些静态资源默认是exclude的: /META-INF/resources, /resources, /static, /
public, /templates.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[禁用http的一些方法]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/06/03/jin-yong-httpde-%5B%3F%5D-xie-fang-fa/"/>
    <updated>2016-06-03T14:24:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/06/03/jin-yong-httpde-[?]-xie-fang-fa</id>
    <content type="html"><![CDATA[<p>本来是挺正常的HTTP方法，现在变成了安全隐患。当然，也不能说不合理，毕竟基于能关的都关掉的思路，不使用的东西是可以禁掉。</p>

<p>Nginx的配法</p>

<p>```
if ($request_method !~* GET|HEAD|POST) {</p>

<pre><code>        return 403;
</code></pre>

<p>}
```
对于请求方法不是GET HEAD和POST的都返回403.</p>

<p>Tomcat的配法</p>

<p>```
&lt;security-constraint></p>

<pre><code>    &lt;web-resource-collection&gt;
            &lt;web-resource-name&gt;fortune&lt;/web-resource-name&gt;
            &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
            &lt;http-method&gt;PUT&lt;/http-method&gt;
            &lt;http-method&gt;DELETE&lt;/http-method&gt;
            &lt;http-method&gt;OPTIONS&lt;/http-method&gt;
            &lt;http-method&gt;TRACE&lt;/http-method&gt;
    &lt;/web-resource-collection&gt;
    &lt;auth-constraint&gt;&lt;/auth-constraint&gt;
</code></pre>

<p>&lt;/security-constraint>
&lt;login-config></p>

<pre><code>    &lt;auth-method&gt;BASIC&lt;/auth-method&gt;
</code></pre>

<p>&lt;/login-config>
```</p>

<p>这里面login-config可以不配，也不会影响效果。auth-constraint一定要配，如果不出现（即值为null），则全部的限制将不起作用。
元素出现而值不填，则所有的这种请求都会被拒绝。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[StringHttpMessageConverter的头属性]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/05/19/stringhttpmessageconverterde-tou-shu-xing/"/>
    <updated>2016-05-19T17:22:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/05/19/stringhttpmessageconverterde-tou-shu-xing</id>
    <content type="html"><![CDATA[<p>使用Spring MVC中的<code>@ResponseBody</code>或者<code>@RestController</code>产生的json消息格式会产生一个很大的响应头。
其主要内容就是<code>Accept-Charset</code>会罗列几乎所有的charset变量，从utf到gbk再到iso等等。而这很大程度上是无谓的开销。</p>

<p>要解决可以在xml的配置中设置</p>

<p>```xml</p>

<p>  &lt;mvc:annotation-driven></p>

<pre><code>&lt;mvc:message-converters register-defaults="true"&gt;
  &lt;!-- 将StringHttpMessageConverter的默认编码设为UTF-8 --&gt;
  &lt;bean class="org.springframework.http.converter.StringHttpMessageConverter"&gt;
    &lt;constructor-arg value="UTF-8" /&gt;
    &lt;property name="writeAcceptCharset" value="false" /&gt;
  &lt;/bean&gt;
&lt;/mvc:message-converters&gt;
</code></pre>

<p>  &lt;/mvc:annotation-driven>
```</p>

<p>注意给<code>StringHttpMessageConverter</code>的属性<code>writeAcceptCharset</code>设置成<code>false</code></p>

<p>---- update on 2016.10.17</p>

<p><code>RestTemplate</code>作为客户端发送请求时也有类似的问题，会带出一串过长的Charset。解决办法如下:</p>

<p>```java
static RestTemplate restTemplate = new RestTemplate();
  static {</p>

<pre><code>List&lt;HttpMessageConverter&lt;?&gt;&gt; converts = restTemplate.getMessageConverters();
for (HttpMessageConverter&lt;?&gt; convert : converts) {
  if (convert.getClass() == StringHttpMessageConverter.class) {
    ((StringHttpMessageConverter) convert).setWriteAcceptCharset(false);
  }
}
</code></pre>

<p>  }
```</p>

<p>获得converts，然后对String的Convert进行设置</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven的Dependency和打包]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/04/21/mavende-dependencyhe-da-bao/"/>
    <updated>2016-04-21T11:32:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/04/21/mavende-dependencyhe-da-bao</id>
    <content type="html"><![CDATA[<p>使用Maven一大便捷之处就是管理依赖变得方便了，另一个好处就是打包更加灵活。</p>

<p>以前全部用jar包加入到工程里面，如果实际部署的时候需要剔除个别包，就需要自己手工在war包里删除。
而实际上需要这么干的情况还是有一些的，比如一些公共的包像ojdbc.jar，都已经放到容器里面了，如果war包里再有，则容易引发冲突。
删除公共的包，另一个好处就是可以给war包瘦身，这样在传递、部署时都会更加便捷。</p>

<p>6种范围依赖：</p>

<ul>
<li>compile: 默认的选项，会在export的时候加入全部依赖</li>
<li>provided: 由其他环境提供，如容器或jdk，但在编译和测试的时候还是会导入，对于容器公共的包，可以使用这个选项</li>
<li>runtime</li>
<li>test</li>
<li>system: 和provided很类似，但需要自己指名jar所处的位置，类似于以前直接把jar包加到工程里面的做法</li>
<li>import</li>
</ul>


<p>个人用的比较多的还是compile和provided两种。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JPA的naming strategy]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2016/04/08/jpade-naming-strate/"/>
    <updated>2016-04-08T17:08:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2016/04/08/jpade-naming-strate</id>
    <content type="html"><![CDATA[<p>JPA的配置通常如下即可：</p>

<p>```
  <!-- Jpa Entity Manager 配置 -->
  &lt;bean id="entityManagerFactory"</p>

<pre><code>class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"&gt;
&lt;property name="dataSource" ref="dataSource" /&gt;
&lt;property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" /&gt;
&lt;property name="packagesToScan" value="com.sanss." /&gt;
&lt;property name="jpaProperties"&gt;
  &lt;props&gt;
    &lt;!-- 命名规则 My_NAME-&gt;MyName --&gt;
    &lt;prop key="hibernate.ejb.naming_strategy"&gt;org.hibernate.cfg.DefaultComponentSafeNamingStrategy&lt;/prop&gt;
    &lt;prop key="hibernate.show_sql"&gt;true&lt;/prop&gt;
  &lt;/props&gt;
&lt;/property&gt;
</code></pre>

<p>  </bean>
```</p>

<p>其中值得注意的是Resposity的生成其实依赖于里面的<code>packagesToScan</code>，而表名、表字段和对象之间的映射转换则依赖于<code>hibernate.ejb.naming_strategy</code></p>

<p>此属性共有四个选项：</p>

<p><code>
org.hibernate.cfg.DefaultComponentSafeNamingStrategy
org.hibernate.cfg.DefaultNamingStrategy
org.hibernate.cfg.EJB3NamingStrategy
org.hibernate.cfg.ImprovedNamingStrategy
</code></p>

<p>首两个选项基本就是不做命名的转换，后面两个会把大小写的骆驼写法转换成带下划线的小写字符。同时，这个类可以自己继承并进行扩展定制，如果命名要求实在特殊，可以自行编写。
甚至表名后带日期等均可以自行定制。</p>
]]></content>
  </entry>
  
</feed>
