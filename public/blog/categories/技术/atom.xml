<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 技术 | Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/blog/categories/技术/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2014-07-15T10:09:23+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tomcat7 采用 redis作为session store]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/07/14/tomcat7-cai-yong-rediszuo-wei-session-store/"/>
    <updated>2014-07-14T15:57:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/07/14/tomcat7-cai-yong-rediszuo-wei-session-store</id>
    <content type="html"><![CDATA[<p>有个项目部署了几套Tomcat，而前置分发又不是按ip映射的，所以无法象往常一样继续使用内存作为session存放的介质。
同时，业务主要由使用移动互联网的手机来访问，ip也存在随时切换的可能，所以按ip进行映射在此场景下并不是一个好的办法。因此，最终决定使用redis来作为公共的session存储空间，实现session的共享。</p>

<p>主要用到的工具包:</p>

<ul>
<li><a href="https://github.com/jcoleman/tomcat-redis-session-manager#readme">tomcat-redis-session-manager</a></li>
<li>jedis</li>
<li>commons-pool</li>
</ul>


<p>需要注意的是，这个session manager已经有挺长时间停止开发了，从issues来看，表现还算基本稳定。目前也已经支持tomcat6和tomcat7，jdk也是6和7均支持。但是，上述几个包却存在着特定的版本依赖。必须为：</p>

<ol>
<li>tomcat-redis-session-manager-1.2-tomcat-7.jar</li>
<li>jedis-2.0.0.jar</li>
<li>commons-pool-1.3.jar<br/>
尤其是最后一个，千万马虎不得。上述三个包必须放入tomcat的lib目录下。</li>
</ol>


<p>然后，再在应用的context.xml,可以是应用的该文件也可以是tomcat/conf目录下的该文件，加入下列配置即可：</p>

<p>```xml
<Valve className="com.radiadesign.catalina.session.RedisSessionHandlerValve" />
&lt;Manager className="com.radiadesign.catalina.session.RedisSessionManager"</p>

<pre><code>     host="192.168.203.198" 
     port="6379" 
     database="1" 
     maxInactiveInterval="600" /&gt; 
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发语言还真是一个问题]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/07/04/kai-fa-yu-yan-huan-zhen-shi-%5B%3F%5D-ge-wen-ti/"/>
    <updated>2014-07-04T22:22:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/07/04/kai-fa-yu-yan-huan-zhen-shi-[?]-ge-wen-ti</id>
    <content type="html"><![CDATA[<p>使用Node.js开发Express框架的的牛人TJ Holowaychuk宣布
<a href="https://medium.com/code-adventures/farewell-node-js-4ba9e7f3e52b">退出使用Node.js</a>。
这个效果有点类似于如果DHH宣布不再使用Ruby进行开发。</p>

<p>此牛希望开发分布式的系统，但受不了Node倾向于性能而忽略
使用的便利性（usability）和鲁棒性（robustness）。
而他使用Go语言开发的分布式系统，则坚固，表现的也更好，代码也更易维护。
他也提到了同步式的代码比异步式的还是容易测试及理解。</p>

<p>从我个人的经历而言，有一阵子仔细研究过Node，我的硕士毕业论文中Node是最重要的一个组成部分。
也开发了一个不错的HTTP分发系统。但是，最终我并没有采用Node在生产系统中。
原因在于，尽管Node的基于事件的并发模式很易于处理大并发的慢速请求，
但除非去做云计算级别的分发，不然Java的NIO已足够应付性能方面的需要。</p>

<p>而在Node的web开发方面，Node及Express提供的基础设施比Rails差的很远，开发效率和体验都是不能比的。
所以，看来看去在服务端并没有很适用Node.js的场景。
至少，在Java和Ruby可以作为选择的场合下，没有Node的发挥空间。</p>

<p>至于Go为什么适合分布式开发，则需要进一步了解。不过以前看见go编译输出的是<code>a.out</code>就很让人有使用的欲望。</p>

<p>Node的崛起很大程度上托V8引擎性能优异的福，在脚本语言中，Node的运行性能就是独一无二的。
但和编译型语言比起来，Node就没什么优势了。只是有一阵子大家都相信脚本语言天生可以比编译型开发的更有
效率些，所以万众瞩目于Node。很多受Ruby运行性能之苦的开发者，也转到了Node开发服务。随后，
移动引用的兴盛使得JSON成为一种标准的传输形式，也由此Node成为了很多接口服务的开发选择。</p>

<p>然而，对此我还是秉承我的观点，仅仅开发接口的话，Java的开发效率也不低，性能一般也不会成为瓶颈。
而Node的开发还是不如Java方便，人才和教育的基础二者差距就更大了。Javascript只有在浏览器中才是王者。
因为浏览器的单线程，以及等待事件发生，才是天生适合他的。而且，世上浏览器那么多，所有的浏览器都只认可
Javascript。
至于服务端，只有在特定的少数的场合，
Node才具备突出的优势。</p>

<p>Ruby和Rails的优势是在于开发效率以及让人快乐，性能始终是不让人满意的一个环节。<br/>
Java的优势是大量的人才基础和教育基础，强大的性能和稳定性。也因为人才众多，所以才有足够的人力来打造像Spring这样的
开发工具。对很多语言来讲，如果像Java那样啰嗦，是很难得到足够多的产出的。<br/>
Javascript，还是在浏览器中发挥威力吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSP中的EL表达式和Helper]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/06/12/jspzhong-de-elbiao-da-shi-he-helper/"/>
    <updated>2014-06-12T19:05:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/06/12/jspzhong-de-elbiao-da-shi-he-helper</id>
    <content type="html"><![CDATA[<h2>JSP中的代码</h2>

<h3>传统的老三样</h3>

<p>长久以来的Java Web开发，在jsp层面进行读取或逻辑控制等行为时主要有<strong>Scriptlet</strong>、<strong>Helper</strong>和<strong>标签</strong>三种方式。</p>

<p>其中，Scriptlet是最不受推荐的方式，最为推荐的是用 <strong>标签</strong> 的方式，而Helper因为免不了会使用Scriptlet，所以流传的也不广。而标签方式中，不单有相对通用的JSTL（JSP Standard Tag Library，JSP标准标签库)，每个框架往往还有自己的标签库。</p>

<p>如struts1的：</p>

<p><code>&lt;bean:write name="spRinglib" property="down_cnt"/&gt;</code></p>

<p>struts2的：</p>

<p><code>&lt;s:property value="r.department" /&gt;</code></p>

<p>jstl的：</p>

<p><code>&lt;c:out value="${user.company}" escapeXml=="false"/&gt;</code></p>

<p>这种方式的一大特点就是冗长和啰嗦。信息的表达力很差。上述还只是用于输出的，一旦碰到条件判断等，标签的表现更是只能用拙劣二字来加以形容。同时，每个框架各搞一套，给程序员也会带来很大的负担，对项目维护也带来更多的成本。</p>

<p>然而，对于程序员而言，输出内容、流程控制等原本有着更直接和通用的描述方式： 编写代码。比如Java程序员自然用Java编写代码，Ruby的则自然用Ruby。
如果这些重新发明的标签，具有比语言更好的表达和组织能力，那么显然大家应该放弃语言本身，比如不使用java，而在MVC的各个部分都
使用标签。但既然这个没有发生，说明标签在大部分时候并不合适。</p>

<h3>新的变化-EL表达式的出现</h3>

<p>好在随着EL表达式的推出，情况逐步有所改观。比如同样是上面的输出，EL的写法可以是 <code>${r.department}</code>，调用数组也可以是<code>${list[0].name}</code> 。不过EL目前还没有支持逻辑控制，所以逻辑控制还是要用jstl的标签。</p>

<p>但至少在老三样之外提供了新的一种方式，并且使得使用<strong>Helper</strong>模式可以不需要必须用Scriptlet。</p>

<h2>EL中使用Helper</h2>

<p>说的简单点，其实就是在jsp页面中，通过EL表达式可以调用Java实现的方法。获得类似<code>${helper.getflow(userInfo.bendiAndNationFlux[2][0])}</code> 。 其中，getflow是一个用Java写的静态方法。</p>

<p>而使用Scriptlet配合helper，则会出现下面的代码：</p>

<p>```java
&lt;%
UserInfo userInfo = (UserInfo) request.getAttribute("userInfo");
long flow = (long[] )(userInfo.getBendiAndNationFlux().get(2))[0];
SheetAttendAction helper = (com.sanss.richtone.web.action.request.SheetAttendAction )request.getAttribute("helper");
%></p>

<p>&lt;%=  helper.cpSelectHelper(requestSheetForm.getManager(), spInfo.getCpCode(), spInfo.getCpName()) %>
```</p>

<p>光写出来的代码方面，不使用EL时已经要长很多了，明明只是一个调用取值显示的操作，却要先声明一系列的东西。同时，这些类型还要在jsp
的头上import进来。而IDE对jsp的import Class支持的并不好。所以确实相当麻烦。</p>

<p>对比一下可以发现，EL能够调用方法的话，可以带来多大的方便。使用Helper方法时，无论是Scriptlet还是EL表达式，在Controller层面，做
的事情都是类似的。</p>

<p>```java
//在controller里定义方法
  public static String getflow(long flow) {</p>

<pre><code>DecimalFormat format = new DecimalFormat("###0.0");
long tmpFlow = flow / 1024;
double df = 0;
if (tmpFlow &lt; 1) {
  return flow + "K";
} else if (tmpFlow &lt; 1024.0) {
  df = flow / 1024.0;

  return format.format(df) + "M";
} else {
  df = flow / 1024.0 / 1024;
  return format.format(df) + "G";
}
</code></pre>

<p>  }</p>

<p>  //在action中，注入属性
  @RequestMapping(value = "myflow", method = RequestMethod.GET)
  public String myflow(Model model, @ModelAttribute("mdn") String mdn, @ModelAttribute("userInfo") UserInfo userInfo) {</p>

<pre><code>model.addAttribute("helper", this);
return "nubia/myflow";
</code></pre>

<p>  }
```</p>

<p>这样一来，定义自己的方法和使用这个方法就极为简便了。需要指出的是，EL表达式里面可以调用方法，即支持el里面带()调用，是<strong>直到
servlet3.0标</strong>准出现才成形的，只有在tomcat7使用，即便是<del>tomcat6也不支持</del>这种调用方式。从中，可以看出EL越来越强大趋势。
但也反过来可以证明过去方法之错误。</p>

<h2>EL难道就不是Scriptlet？</h2>

<p>如果使用过其他Web开发语言的话，可以发现EL表达式和在页面模板里写脚本语言很类似。比如 <code>${r.department}</code> 和 <code>&lt;%= r.department%&gt;</code>
除了把${}换成了&lt;%=%>实在没有其他区别， <code>${helper.getflow(userInfo.bendiAndNationFlux[2][0])}</code> 可能是写成了 <code>&lt;%= getflow(userInfo.bendiAndNationFlux[2][0])%&gt;</code> 。</p>

<p>实际上，目前的EL，除了没有逻辑判断的能力之外，已经具备了很多Scriptlet的特性。那么区别在哪里呢？</p>

<p>我觉得最关键的区别在于语言本身。所谓Scriptlet其实是Java Scriptlet，需要一系列的声明才能使用。强类型编译语言有很多的好处，但在页面
显示方面，并非其所长。所以，不得不发明一套新语言来走Scriptlet的路子。 而对于另外一些本身就是脚本的语言，重新发明一套EL就显得没有必要了。</p>

<p>EL的Scriptlet和Java的Scriptlet完全是两码事情，倒是和ruby的Scriptlet几乎没有区别。
EL的支持来的有点慢，但好歹还是来了！</p>

<h3>对EL未来的期盼</h3>

<p>作为一个开发者，十分期望未来的EL能够再走一步，增加对 <code>if</code> <code>for</code>的原生支持，而不再需要使用麻烦的标签。能否发生这样的变化，就只有
再看发展了。</p>

<h3>标签适用的情况</h3>

<p>标签其实也有其存在的价值，至少包括：</p>

<ol>
<li>分页等相对组件化的元素；</li>
<li>风格一致的表单。</li>
</ol>


<p>对于那些有组件化特征的东西，标签还是很适用的。</p>

<p>而在EL有了调用method的能力后，helper模式可以做的更多，很多页面逻辑可以放到helper中去完成，即把<code>if</code> <code>for</code>封装在helper里面。
这应该是目前最值得推崇的一种页面代码模式了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[士别三日 Jave Web非复昔日阿蒙]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/05/31/shi-bie-san-ri-jave-webfei-fu-xi-ri-a-meng/"/>
    <updated>2014-05-31T10:16:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/05/31/shi-bie-san-ri-jave-webfei-fu-xi-ri-a-meng</id>
    <content type="html"><![CDATA[<p>六七年来，小组的Java Web开发是用SSH（Struts2+Spring+Hibernate）的框架。
Struts2充当胶水层，完成request参数的封装、controller的映射以及视图和控制层之间的参数传递。
Spring在其中充当了注入的角色。Hibernate负责数据持久化。
这个架构稳定使用了五年以上。</p>

<p>之所以一直使用，一方面在于对Webwork(Struts2)的感情，
毕竟曾经这个东西在替换struts1时让人映像深刻。其次，
一个开发架构的迁移牵涉到整个小组，引入、推广和维护都有成本的，
一成不变固然不行，一直切换也难免开销过大。同时，SSH招收熟手也相对容易些。</p>

<p>然而，Struts2毕竟多年已经没什么发展，
同时它的安全漏洞始终没能很好地解决，加上老架构也确实使用的时间有点长了。
因此开始尝试新的方案。主要目标就是替换掉Struts2，也就是选用其他的Controller组件。
而考察的对象就是Spring，确切地说是Spring MVC。</p>

<p>而在了解的过程中，又仔细学习了一下Spring JPA。当MVC+JPA结合在一起后，
发现Java Web的进步已然很大。而Spring MVC可以说是Rails的山寨版，
或者可以称之为 Java on Rails with Java Style。Spring MVC的设计者
可以说从Rails中借鉴了很多东西，但又最终使用Java的方式实现了出来。</p>

<p>在初学Rails的时候，彼时的版本是1.2.6，一直有个疑问，就是Java能否也有一个
像Ruby on Rails那样好的Web开发框架？当时有的牛人给出的答案是不依赖Ruby，
DHH变不出那么多魔术。但是，如今的Spring MVC至少已经赶上了Rails 2的开发便利程度，
虽然还逊于最新的Rails版本。所以，确切地说，Java至少也可以拥有和Rails 2 <strong>一样方便</strong>的Web框架，
只是需要投入<strong>更多</strong>的人力，也需要等待长的多的时间。而最后出来的东西肯定还是充满Java味道的。
现在的Rails已经走的更远了，但Java Web提高的程度这几年却更加显著了。</p>

<p>看一下Controller：</p>

<p>```java</p>

<pre><code>@RequestMapping(value = "update/{id}", method = RequestMethod.GET)
public String updateForm(@PathVariable("id") Long id, Model model) {
    model.addAttribute("user", userService.getUser(id));
    model.addAttribute("action", "update");
    return "user/userForm";
}

@RequestMapping(value = "update/{id}", method = RequestMethod.POST)
public String update(@Valid @ModelAttribute("user") User user, RedirectAttributes redirectAttributes) {
    userService.updateUser(user, user.getNumber2(), user.getCurrentshownumber());
    redirectAttributes.addFlashAttribute("message", "更新任务成功");
    return "redirect:/simuser/";
}
</code></pre>

<p>```</p>

<p>Restful风格的Url，通过声明<code>@ModelAttribute</code>可以注入参数到模型中，
<code>@PathVariable</code>可以实现从url路径中获取参数，
<code>userService</code>是注入的服务组件，<code>model.addAttribute</code>则将controller的内容注入给页面模板。
整个风格已经十分简洁。如果需要其他组件，如<code>session</code>或者<code>request</code>，
只要在类或者方法的参数中声明即可。<code>return "user/userForm"</code>则通知渲染user目录下的userForm.jsp模板</p>

<p>Spring JPA则是最方便的Java ORM描述工具。寻找多年的Java版ActiveRecord终于有了着落。
需要定义两个文件：1：model本身，2：一个dao文件（reposity）</p>

<ul>
<li>model：</li>
</ul>


<p>```java</p>

<p>//JPA标识
@Entity
@Table(name = "users")
public class User extends IdEntity {</p>

<pre><code>private String login;
</code></pre>

<p>  ...</p>

<pre><code>private Set&lt;Phonenumber&gt; phonenumbers;
private List&lt;Useroperlog&gt; useroperlogs;

@NotBlank
public String getNumber1() {
    return number1;
}

public void setNumber1(String number1) {
    this.number1 = number1;
}

@Transient
public String getNumber2() {
    return number2;
}

public void setNumber2(String number2) {
    this.number2 = number2;
}

@Transient
public String getCurrentshownumber() {
    return currentshownumber;
}

public void setCurrentshownumber(String currentshownumber) {
    this.currentshownumber = currentshownumber;
}
// join column is in table for Phonenumber
@OneToMany(fetch=FetchType.LAZY,orphanRemoval=true,cascade=CascadeType.ALL)
@JoinColumn(name = "userid")
public Set&lt;Phonenumber&gt; getPhonenumbers() {
    return phonenumbers;
}

public void setPhonenumbers(Set&lt;Phonenumber&gt; phonenumbers) {
    this.phonenumbers = phonenumbers;
}

@OneToMany(fetch=FetchType.LAZY)
@JoinColumn(name = "userid")
public List&lt;Useroperlog&gt; getUseroperlogs() {
    return useroperlogs;
}

public void setUseroperlogs(List&lt;Useroperlog&gt; useroperlogs) {
    this.useroperlogs = useroperlogs;
}
@Override
public String toString() {
    return ToStringBuilder.reflectionToString(this);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>啰嗦是还是有点啰嗦，这个毕竟是java。DAO相对代码少一些。</p>

<ul>
<li>DAO文件：</li>
</ul>


<p>```java
public interface UserDao extends PagingAndSortingRepository&lt;User, Long>, JpaSpecificationExecutor<User> {</p>

<pre><code>//Page&lt;User&gt; findByUserId(Long id, Pageable pageRequest);

User findByNumber1(String number1);
</code></pre>

<p>}
<code>``
这个dao提供了很多默认的方法，包括</code>findAll<code>,</code>findOne<code>,</code>save`，底层的
实现还有很多内容，但使用的话确实只需要声明这些就行了。</p>

<ul>
<li>在Service文件中可这样使用:</li>
</ul>


<p>```java</p>

<pre><code>public void updateUser(User entity, String number2, String showNumber) {
    loadNumber2(entity);
    resetCurrentshownumber(entity, showNumber);
    resetNumber2(entity, number2);
    userDao.save(entity);
}

public void deleteUser(Long id) {
    userDao.delete(id);
}
</code></pre>

<p>```</p>

<p>而在页面处理上，几年前的Servlet 2.5开始，EL表达式取得了首要被支持的地位。</p>

<p><code>java
${user.name}
</code>
对比ruby在erb里常用的</p>

<p><code>&lt;%=user.name%&gt;</code></p>

<p>EL表达式其实就是代码了。Java不具备动态语言的特性，所以需要另外造一套表达式。
ruby的话，直接使用scriptlet其实效果更好也更直白。个人其实认为，逻辑判断、
取值等都应该使用语言本身，而不是要借助标签。EL表达式是对Java语言的一种很好的补充。
对Java Web的开发状况改善许多。但在迭代、逻辑判断方面，
标签使用的机会还是满多的，这个只能再等发展的变化了。</p>

<p>以上是已经进步显著的几个方面。但在布局、分页以及整合上，Spring并没有提供
一步到位的东西。所以需要进一步参考<a href="https://github.com/springside/springside4">SpringSide</a>。
这是一个中国人主推的Java Web开发实践整合的开源项目。里面提供了整合的样例，
其实本身也可以当做一个开发模板来对待。</p>

<p>从<a href="https://github.com/springside/springside4">SpringSide</a>上也可以追踪
Java Web开发历史的变迁，看了几年前的版本也是主要基于SSH的，最近一两年切换到了Spring MVC。
同时它也是使用的JPA来做ORM的描述。在各方面都很贴合我的需求和口味。考虑到这个项目维护多年，
且始终保持着很不错的实践，在此推荐一下。</p>

<p>花费多年时间，Jave Web非复昔日阿蒙。开发中的痛苦状况已经得到了极大的改善。
值得刮目相待。Spring确实极大地改变了Java Web开发，而Rails则影响了十年来的Web开发。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atom和Node-Webkit]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/05/07/atomhe-node-webkit/"/>
    <updated>2014-05-07T16:21:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/05/07/atomhe-node-webkit</id>
    <content type="html"><![CDATA[<p><a href="http://atom.io">Atom</a>是Github投入开发的一个<strong>新编辑器</strong>。 目前只有Mac版，我在mbp上使用之后感觉还可以。基本可以认为是一个结合了Textmate和Vi插件的产物。
比如，看界面很像Textmate，但又有Textmat始终也没有支持的Ctrl-P插件。初步使用下来唯一不满的就是软件包太大，170MB对于一个文本编辑器而言是很大了。毕竟Eclipse这样的IDE也只在200MB的规模。</p>

<p>在使用体验方面，比较起来，和Textmate更接近些，但扩展应该方便很多。而比起vi的话，主要优势在于是GUI的，支持command+s保存，也支持鼠标选取文本，对中文输入而言明显要比
vi更合适。高亮、快捷等简单用用差别并不大，美观度当然都可以配置的不错。</p>

<p>而在昨天，Atom进一步把他们的核心模块开源了，另外提到了他们是基于<a href="https://github.com/rogerwang/node-webkit/wiki">Node-Webkit</a> 开发的这款工具。</p>

<p>这个组合就让我有点费解了。因为webkit是一个当代浏览器的引擎，safari chrome chromium等都使用了webkit，可以理解webkit就是一个浏览器。而node是指的
Node.js，一个可以在服务器端编写javascript的平台，提供了很多的js库。而这么一个组合，干文本编辑器什么事情？在我开来，文本编辑器应该是很原生的一种应用软件。</p>

<p>仔细阅读了一下Node-Webkit的官方介绍以及一些其他材料，尤其是这篇<a href="http://blog.whattoc.com/2013/12/16/node-webkit01/">你所不知道的Node-webkit</a>
，忽然明白了所谓跑起来的Atom，其实就是运行了一个浏览器。只是这个浏览器里面的输入元素都是用HTML5编写的，而这个浏览器就是chromium，chrome的免安装的一个分支的名称。然后Atom又加了很多事件响应处理的注册代码段在里面。整个编辑类似于在线编辑，只是保存是在本地的。也因此，这个东西要往Linux和Windows迁移是轻而易举的。因为chromium和Node.js本来就是跨平台的。</p>

<p>然而，一旦有那么美好的事情，这个世界上就有银弹了。而历史的经验告诉我们，世上是没有银弹的。</p>

<p>Atom之所以在mbp上使用的体验还不错，主要是因为mbp搭载了大内存、ssd硬盘以及性能走在前列的x86处理器，所以并没有<strong>卡</strong>。而一旦这些条件不具备，情况就不是那么回事情了。这种类似phonegap，用浏览器来模拟原生应用的最大<strong>弱点</strong>无疑是性能差以及开销大。因此会有人提出打开大文件的效果不堪想象。<br/>
从口味上来讲，个人不太喜欢编辑器也Web化。虽然内存cpu的发展依然迅速，Atom的性能问题可能是可以被硬件性能的提升弥补的，但这种做法还是有其先天的缺陷。</p>

<p>所以，如果是脚本的开发，可能还是要继续用vi编写。如果是输入大量中文的话，Atom可以优先考虑。</p>
]]></content>
  </entry>
  
</feed>
