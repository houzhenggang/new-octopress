<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 技术 | Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/blog/categories/技术/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2013-07-05T17:12:06+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Prolog]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/06/16/prolog/"/>
    <updated>2013-06-16T22:46:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/06/16/prolog</id>
    <content type="html"><![CDATA[<p>七周七语言看完了Ruby，又继续看了Io，这是一个prototype的语言，确实和js很像，也挺有启发。不过决定还是
好好去学javascript吧。其实<a href="http://www.w3school.com.cn/js/index.asp">w3school</a>的这份js教程很棒，
相当言简意赅。入门是最重要的。入门之后才能走的更远。很多时候究竟有多远看的还是基础，但没有摸起来，那
基本功就无从发挥了。</p>

<p>随后看了<a href="http://www.gprolog.org">Prolog</a>，其实是<strong>gprolog</strong>。
这个语言跟我过去学习的语言都很不一样。完全抛弃了过程语言所拥有的能力，全部都集中在了逻辑判断上。实际上其组成结构是这样的：</p>

<ul>
<li>事实。就是自己先设定一些前提，指定一些事实，比如<code>likes(wallace, cheese).</code></li>
<li>规则。规则就是关于一些事实的推论。比如<code>friend(X, Y) :- \+(X = Y), likes(X, Z), likes(Y, Z).</code>，这个规则由3个条件构成，

<ul>
<li>第一个是X！=Y</li>
<li>第二个和第三个是X和Y都喜欢Z，然后他们就符合friend这条规则</li>
</ul>
</li>
<li>查询。查询就是使用时给出问题，然后让prolog根据规则库（<strong>事实</strong>+<strong>规则</strong>）循环访问得出结果或判断出结果。</li>
</ul>


<p>本质上，应该是用过程语言写了一系列的判断和分析语句（<strong>引擎</strong>）,这样使用时使得编码行为就完全不一样了。</p>

<h3>最大的启发</h3>

<p>最大的启发在于，这一门应该算是我首次学的不是过程式的编程语言。当然，前提是HTML和CSS不能算编程语言。其他的，如C、C++、Java、Ruby、Python、Javascript乃至shell等，虽然有的是纯过程式的，有的是面向对象的，但实际上都<strong>包含了过程式</strong> 的风格。</p>

<h3>试用体验</h3>

<p>还是有点别扭的。它的语法确实很古老，而且很不顺手，这点和<code>erlang</code>有的一拼。
不过确实是只要树立规则，就能输出结果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sass and Compass]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/03/16/sass-and-compass/"/>
    <updated>2013-03-16T21:29:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/03/16/sass-and-compass</id>
    <content type="html"><![CDATA[<p>Sass 和　Compass闻名已久，也接触过一些，不过始终没有仔细学过。这次因为要做移动互联页面的东西，又开始接触这部分内容。
看了下《Pragmatic Guide to Sass》, 理清了一下脉络。
顺便提一句，这本书是在kindle上看的，出版社和作者提供了epub的版本。  这可以算是第一本在kindle上看完的计算机技术类书籍。虽然效果还可以，
但是看了下原书的pdf版本，发现其版本也深受“小书”，小版面，的影响。这可能是未来计算机书籍的一个趋势吧。不过kindle还是最适合纯文字，
用来阅读计算机技术书籍的体验还是很一般。</p>

<p>Sass是最基础的，类似coffeeScript对Css的改写，当然引入的内容要多的多。毕竟js本身也是一种语言，但css很难算的上是一门编程语言。
Sass有自己的运行命令，由ruby实现，可以把scss文件编译成css文件，也能convert回去。</p>

<p>Compass则是sass的库和扩展，在sass的基础上提供了更丰富的样式、函数和变量以及模式。其本身也有了一套命令，也更适合于建项目。Sass如果是java，
那么compass就是J2EE+Eclipse。</p>

<p>如果不想安装那么多东西，那么可以直接使用scout这个GUI工具，工具本身集成了sass和compass的能力，只是又提供了图形化的集成界面。该界面可能是基于
Adobe的桌面技术编写的。如果要推荐美工使用sass，那么可以从scout入手。</p>

<p>compass是很神奇的，而它的spriting堪称神奇中的神奇。</p>

<p>但我发觉设计也是有天赋和术业专攻的。我们的美工完全不用这些东西，也很快就能搞出一个各种android上面看过去还不错的版本，我用这些东西去写出来的还是感觉很累。但至少比没有要好多了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[patch and diff]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/02/05/patch-and-diff/"/>
    <updated>2013-02-05T10:52:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/02/05/patch-and-diff</id>
    <content type="html"><![CDATA[<p>patch和diff确实是个神奇的东西，用来对现有版本的升级是最好不过了。
好处在于一来不用停业务，二来可以明确到底改了多少东西。</p>

<h3>diff</h3>

<p>首先来说说diff，毕竟patch是从此处产生。</p>

<p>```
diff -ruNa src dest  > a.patch</p>

<p>-r 针对整个目录<br/>
-u 以合并的方式来显示文件内容的不同
-N 新文件做空白文件
-a 包含二进制内容，如jar包，class等
```</p>

<p>据说这个东西是perl的发明者创建的工具，主要用于比较源码，通常不带<code>-a</code>。</p>

<h3>patch</h3>

<p>patch就比较强大了。如果是更改一个目录下面，最常见的做法是进入该目录，然后执行</p>

<p><code>
patch -p1 &lt; ../a.patch
</code></p>

<p>随后，两个目录就会变得一模一样了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Every language will implement a lisp interpreter in itself]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/02/03/every-language-will-implement-a-lisp-interpreter-in-itself/"/>
    <updated>2013-02-03T12:48:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/02/03/every-language-will-implement-a-lisp-interpreter-in-itself</id>
    <content type="html"><![CDATA[<p>H&amp;P里面这句话起初还有点琢磨不过来，后来看了下jstl等东西，这不就是表达式在java中的一个实现么。</p>

<p>从头开始讲的话，需要从web开发讲起。Web中最耗开发时间的是页面的开发，因为在这个环节一切编程的好东西都是没有引入的。比如C的头文件有include检察，
而css依然一团乱；其他语言有的各类引用机制，到了页面全部木有。而在页面上的代码，主要有下面两种模式：</p>

<ul>
<li><code>&lt;% %&gt;</code> <code>&lt;%= %&gt;</code>这样的代码嵌入</li>
<li>代码标签及各类膜拜，如jstl标签，struts2标签，velocity模板等</li>
</ul>


<p>仔细观察，可以发现第二种代码标签和模板其实就是实现了一套语言解析器。往往Java的就用Java实现，有些语言就用自己的实现。
正好印证了Paul的话。为了应付实际的表达困难，表达力弱一些的语言不得不自建一套<strong>类Lisp的语言表达解释器</strong>。</p>

<p>所以，表达力越差（可以理解成
啰嗦、信息量低）的语言，其搭配的解释器可能越五花八门，因为<code>&lt;% %&gt;</code>是很难适应这类语言嵌入在Html中的需求的。而能力强的语言，则模板就要少许多，
因为语言本身的表达力强大，使得再造一套标签显得很没有必要，自然也就无人发明此类模板。</p>

<p>从表达力而言，Java确实较次些。按Paul的理论那就Ruby更接近Lisp。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《白帽子讲Web安全》]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/01/26/bai-mao-zi-web/"/>
    <updated>2013-01-26T22:59:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/01/26/bai-mao-zi-web</id>
    <content type="html"><![CDATA[<p>一天半的功夫，书已经读了一半了。从这半本的情况来看，书写的很一般。首先，交代的不够细致。有些地方是不太能贯通的，背景知识和其间的逻辑推论
都做的很不扎实。其次，重点难点不突出。有些关键的地方并没有点出来，只能靠读者自己去审阅。第三，代码贴的太多，而且也是毫无重点的代码，
篇幅很大，但真正值得读的代码却很少。</p>

<p>本书好的地方就是给出了大量的实例，这些例子就在我们身边，百度的、搜狐的、MySpace的。跟着这些案例仔细自己再做分析应该还是会有很多收获的。
至少让人明白，第一网络确实不安全，第二值得研究的工作还有许多。</p>

<p>但是，被很多人推荐就有点不可理解了。从技术书籍的角度考量，这本书真的很一般。就清晰度、深度、整洁度来讲，都很平平。卖的好，可能主要还是营销
的好。</p>

<p>花了2天半，这本书也就翻完了。还是过得去的一本书，但有些评价显然过高。Yahoo的算法很有用。几个案例至少也提供了继续跟踪研究的线索。</p>

<p>这本书的总体风格就是这个样子，提供了足够多的案例作为进一步研究的入门线索，但书本身拼凑痕迹严重，存在大量的不负责代码黏贴，也缺乏作为一本技术书籍
尤其是畅销书籍应该具备的细致入微的分析。不过这个主题的其他书籍也确实不多，作者也算这个领域的牛人了。还是值得推荐给做Web开发的人员读读的，至少可以
增加点广度的认识。</p>

<p><a href="https://gist.github.com/f801d7015715f6f10098">gist</a></p>

<p>作者：</p>

<p>吴翰清，西安交通大学少年班，84年生人。<br/>
2007年，成为P7（初级技术专家）；<br/>
2010年，成为P8（高级技术专家）。<br/>
2012年下半年，跳槽去了安全宝，创新工场下面的一个企业。我对开复不感冒，甚至是负分的哦。</p>

<p><strong>白帽子</strong> 主守， <strong>黑帽子</strong> 主攻。</p>

<p>防火墙及ACL的控制，是的任意攻击系统端口的情况不再可能。而Web端口不能封。加之Web技术的普及和流行，黑客攻击转向Web。</p>

<h3>安全三要素(CIA)</h3>

<ul>
<li>机密性(Confidentiality)</li>
<li>完整性(Integrity)</li>
<li>可用性(Availability)</li>
</ul>


<p>其他还有可审计性、不可抵赖性等</p>

<p>第一章很一般，全部都是空谈，讲一些人人都懂的道理。而且归纳的也很不好，基本就是一个列表，列表之间没有逻辑关系。</p>

<p>作者的文字功底和解释能力相当一般。</p>

<h2>XSS(跨站脚本）</h2>

<p>这章前半部分很无聊，作者罗列了一堆xss的案例，其中贴的js代码就差不多有十页。但没解释，没重点。XSS防御部分介绍的还行。
xss可以分为参数安全和劫持Cookie两种。可以试试<a href="http://www.fiddler2.com/fiddler2/">fiddler</a>工具。</p>

<h3>XSS防御</h3>

<ul>
<li>HttpOnly</li>
</ul>


<p>是设置cookie的属性，即只能Http请求时上传，而不能让JS操作。这样就可以避免cookie被劫持。</p>

<ul>
<li>输入检查</li>
</ul>


<p>黑白名单过滤器</p>

<ul>
<li>输出检查</li>
</ul>


<p>在html文本中用HtmlEncode，在javascript中用JavascriptEncode。</p>

<p>在css和url的输出则较为复杂。 Anti-Samy是一个很好的XSS Filter。</p>

<h2>CSRF(Cross Site Request Forgery) 跨站点请求伪造</h2>

<p>有些浏览器本地cookie不会被提交，session型cookie则肯定会被提交。</p>

<p>解决办法是 <strong>验证码</strong> 和 <strong>Anti CSRF Token</strong></p>

<p>就是在表单和session中，都放一个token来确保这个form是本地服务产生的。<br/>
Token可以是一个，也可以是多个。</p>

<p>点击劫持和HTML5都讲的比较烂。总是缺乏画龙点睛的那一笔。</p>

<h2>SQL 注入</h2>

<p>此章依然很一般。介绍的内容相当不到位。比如只说出了是利用sql拼接的漏洞，但没说具体是怎么应用的。
不过在 <a href="http://vdisk.weibo.com/s/oHDMV/1359208976">SQL注入攻击技术初探</a> 中，终于搞懂了以前困惑过我的问题：内容到底是怎么显示出去的。道理在于让第一句（自己写的语句）出错无记录，而后面跟随union则返回攻击程序写出来的sql，这样自然内容就回显了。而参数数量等都是通过order by 16等试错来取得的。</p>

<p>使用预编译语句的效果主要是确保SQL语句的结构不会因为输入的参数发生变化。即实现了数据和代码（字段及从句的分离。</p>

<h2>访问控制</h2>

<p>依然讲的不清楚，懂的人不需要读，不懂的人读了也白读。</p>

<ul>
<li>垂直权限管理 -- 针对URL的访问控制，RBAC</li>
<li>水平权限管理 -- 面对数据资源的</li>
<li>OAuth -- 和我们的重定向类似，只是更加标准，返回的不是用户数据，而是token</li>
</ul>


<h2>加密算法和随机数</h2>

<p>这章还算有点料，从使用者的角度讲解了加密解密算法的用法。</p>

<p>建议：</p>

<ul>
<li>使用CBC模式的AES256用于加密；</li>
<li>使用HMAC-SHA512用于完整性检查；</li>
<li>使用带salt的SHA-256或SHA-512用于Hashing.</li>
</ul>


<h2>DDOS</h2>

<p>亮点在于给了Yahoo的专利，确实是绝佳的主意。
<a href="http://patft.uspto.gov">Detecting system abuse</a></p>

<p>本书不是一本讲解性质的。其特点是列出各个大门，然后读者自己进去领取东西。对比师傅领进门的模式，它的模式是门户告诉你，然后靠自己。</p>

<p>OWASP的ESAPI安全模块</p>

<p>安全监控、入侵检测、Web应用防火墙(Apache的一个模块）</p>
]]></content>
  </entry>
  
</feed>
