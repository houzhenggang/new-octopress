<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 技术 | Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/blog/categories/技术/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2014-08-16T17:12:34+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[被低估的JS： 「Pro JavaScript Techniques」读后感]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/07/23/pro-javascript-techniques/"/>
    <updated>2014-07-23T16:13:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/07/23/pro-javascript-techniques</id>
    <content type="html"><![CDATA[<p>作为一个Web开发者，无法绕开的一个点就是JavaScript。而对于经过C/Java训练出来的计算机专业人员而言，是很容易轻视JS，从而使得在这方面往往要经过很长的时间和经历，才能体会到
JS的与众不同及其能力。C或者Java同JS的不同已经不用多言，而同为脚本语言的Ruby Php Perl Python 同 JS的差别也是巨大的。有一定编程基础的人，学习其他大众性的语言，比如最常用的10种语言，
一般都是比较快的。但是，JS是如此的和其他语言不一样，以至于学习起来真的费一番功夫。</p>

<p>不过，直到读了John Resig的「Pro JavaScript Techniques」，终于令我豁然开朗。Resig是大名鼎鼎的JQuery的创始人，这本书中很多主要的API可以说就是介绍了JQuery是怎么实现的。包括Id的选择，
ajax方法等。最重要的，如他所说，就是第二章面向对象的JavaScript，或者说如何从其他编程语言来理解JavaScript。</p>

<p>笔记的流水账：</p>

<h1>第一章 现代化的JS</h1>

<p>JS和它的队友：</p>

<ul>
<li>Core Javascript 1.5</li>
<li>XML2（DOM）</li>
<li>XMLHttpRequest</li>
<li>CSS（style）</li>
<li>事件</li>
</ul>


<p>```javascript</p>

<h1>注意通过prototype定义公共函数的模式</h1>

<p>function Lecture(name, teacher) {</p>

<pre><code>this.name = name;
this.teacher = teacher;
</code></pre>

<p>}</p>

<p>// 实例method
Lecture.prototype.display = function() {</p>

<pre><code>return this.teacher  + " is teaching " + this.name;
</code></pre>

<p>}</p>

<p>function Schedule(lectures) {</p>

<pre><code>this.lectures = lectures;
</code></pre>

<p>}</p>

<p>Schedule.prototype.display = function() {</p>

<pre><code>var str = "";
for (var i = 0; i &lt; this.lectures.length; i++) {
     str += this.lectures[i].display;
}       
return str;
</code></pre>

<p>}</p>

<p>var mySchedule = new Schedule([</p>

<pre><code>new Lecture("Gym", "Mr. Smith");
new Lecture("Math", "Mrs. Jones");
new Lecture("English", "TBD");
</code></pre>

<p>]);</p>

<p>alert(mySchedule.display());
```</p>

<h1>第二章 面向对象的JS( javascript的精髓)</h1>

<h3>引用</h3>

<p>引用指向的是具体的对象，引用是一个变量。
JS中的引用不会指向引用，<code>var b = a;</code>的作用永远是让b指向a表示的实际对象</p>

<h3>参数类型检查和函数重载</h3>

<p><code>if (typeof msg == 'undefined') {}</code></p>

<p>以及js对象都有的属性：构造子</p>

<p><code>if (str.constructor == String) {}</code></p>

<p>后者能够找出具体的构造对象的函数，前者对通过函数构造的对象返回的也是'object'。</p>

<p>js在每个函数里面，有一个隐含属性 <code>arguments</code> ，这是一个伪数组，可以遍历、有.length属性，但不能被修改。可以通过复制遍历变成标准数组。</p>

<p>```javascript
function sendMessage(msg, obj) {</p>

<pre><code>if ( arguments.length == 2) 
      ojb.handleMsg(msg);
else
     alert( msg );
</code></pre>

<p>}
```</p>

<h3>作用域(Scope)</h3>

<p>js通过函数来划分作用域，而不是通过代码块</p>

<p>没有var声明的，则变成全局变量</p>

<h3>闭包</h3>

<p>闭包允许内层函数引用外围函数内的变量，即便外层函数已经终止。</p>

<p>```javascript
function delayedAlert( msg, time ) {</p>

<pre><code>setTimeoute( function() {
     alert(msg); // msg就是外围函数中的变量
}, time);
</code></pre>

<p>}
```</p>

<p>curry化： 利用函数生成函数</p>

<p>```javascript
function addGenerator(num) {</p>

<pre><code> return function( toAdd) {
    return num + toAdd;
 };
</code></pre>

<p>}</p>

<p>var addFive = addGenerator(5);
alert(addFive(4)==9);
```</p>

<h3>上下文对象</h3>

<p>通过<code>this</code>表示，永远指向当前代码所处的对象中。
是调用时确定的对象。</p>

<p>function都有call和apply两个方法，可以用于指定this是什么</p>

<p>```javascript
function changeColor( color ) {</p>

<pre><code>this.style.color = color;
</code></pre>

<p>}</p>

<p>changeColor.call(main, "black");</p>

<p>function setBodyColor() {</p>

<pre><code> changeColor.apply(main, arguments); //传入隐含的全部参数
</code></pre>

<p>}
setBodyColor( "black" );
```</p>

<h2>原型式继承</h2>

<p><code>javascript
User.prototype = new Person();
</code>
其效果是每次 new User()时同时执行了new Person，且user对象就这样拥有了person的全部方法</p>

<h2>类似继承</h2>

<p>Douglas Crockford创造的<code>method</code>, <code>inherits</code>, <code>swiss</code> 三个方法。</p>

<p>```javascript
User.inherits(Person);
User.method( 'getName', function(){
  return "My name is: " + this.uber('getName');
});</p>

<p>```</p>

<h2>Base 库</h2>

<h2>Prototype库</h2>

<p>就是rails原先自带的库</p>

<h2>命名空间</h2>

<p><code>$.</code>其实就是命名空间。
```javascript
var YAHOO = {};
YAHOO.util = {};
YAHOO.util.Event = {</p>

<pre><code>addEventListner: function() {}
</code></pre>

<p>};
YAHOO.util.Event.addEventListener(...);
```</p>

<h2>清理代码</h2>

<p><code>!=</code> 和<code>==</code> 会对变量进行求值，即把对象变成false或true后进行比较，
js中， null false 0 undefined 求值后都是false</p>

<p>js一行一行地写可以不用分号，但是一旦被压缩后，换行符号都将取消，此时没有分号就不行了。鉴于js的使用场景，还行建议每行都加上分号。</p>

<p>压缩代码的三种方式:
1. 只取出空白和注释
2. 压缩变量
3. both</p>

<p>IE 是不灵的，在调试方面</p>

<p>Firefox的调试是最好的，尤其搭配firebug和 View Rendered Source，Venkman也是一个ff的扩展</p>

<p>Safari还在迅速变化发展中，Chrome与之类似</p>

<h2>测试套件</h2>

<ul>
<li>JSUnit: 老牌的</li>
<li>J3Unit: 稍新的，通Java集成的更好</li>
<li>Test.Simple , Test.More</li>
</ul>


<h1>第三章 分离式的JavaScript</h1>

<p>DOM(Document Object Model)是表达XML文档的标准，并不是唯一的方式，但确实是应用最广泛的方式。这一点和js能统一浏览器的原因一致，就是因为被广泛使用了。</p>

<p>DOM的模型：
DOM是一个树结构，根节点是html，
下属节点分为元素和文本两种类型。
每个节点包括5个指针:
1. 父节点parentNode
2. 兄节点(previousSibling)
3. 弟节点(nextSibling)
4. 第一个子节点(firstChild)
5. 最后一个子节点(lastChild）</p>

<p>整个的遍历和渲染其实都是基于DOM模型的。</p>

<h2>DOM的加载</h2>

<ul>
<li>html解析完毕</li>
<li>src中的脚本和css加载完毕</li>
<li>脚本在文档内解析并执行（此时dom并未构造起来）</li>
<li>Html DOM完全构造起来</li>
<li><p>图片和外部内容加载</p></li>
<li><p>等待整个页面的加载，基于window对象的load事件，速度最慢，因为是在图片下载之后</p></li>
</ul>


<p><code>javascript
addEvent(window, "load", function (){
  net( id("everywhere") ).style.background = 'blue';
});
</code></p>

<ol>
<li><p>把script标签放置在页面的最后，这样确保执行的时候dom已建立</p></li>
<li><p>监听DOM的加载状态，实现复杂。
jquery实现的方法，$或者说domReady，其主要原理是检查document是否已存在，document.getElementsByTagName和document.getElementById两个函数是否已存在，以及document.body是否已存在。搭配setInterval不停地检查，检查到位后就清楚timer</p></li>
</ol>


<h2>在HTML中寻找元素</h2>

<p>cssQuery， jQuery
主要是css选择器和xpath选择器</p>

<h2>获取元素的内容</h2>

<ol>
<li>获取文本 text</li>
<li>获取 html</li>
</ol>


<h2>操作元素的属性(attribute)</h2>

<p>一旦元素加载到DOM中，元素会有一个管理数组，</p>

<p><code>javascript
formElem.attributes = {
  name: "myForm",
  action: "/test.cgi",
  method: "POST"
};
</code></p>

<p>实际提供了attr方法</p>

<h2>修改DOM</h2>

<ol>
<li><p>创建节点
createElement</p></li>
<li><p>插入到DOM中<br/>
insertBefore： 在子元素前插入
<code>parentOfNode.insertBefore(nodeToInsert, beforeNode)
appendChild: 插入一个父节点中最后一个子节点，</code>parenElem.appendChild(nodeToInsert);`</p></li>
</ol>


<h2>异步与事件处理</h2>

<h3>异步事件与线程</h3>

<h3>事件阶段</h3>

<p>捕获和冒泡，捕获是由外向内，冒泡是由内向外</p>

<p>是否能停止冒泡？</p>

<p>通过对按键事件的处理，停止textarea的正常响应
```html
<html>
<head></p>

<p></head></p>

<p><body></p>

<p><textarea rows="4" cols="50">
At w3schools.com you will learn how to</p>

<p>make a website. We offer free tutorials</p>

<p>in all web development technologies.
</textarea></p>

<script>
document.getElementsByTagName

("textarea")[0].onkeypress = function(e) 

{ 
e = e || window.event;
return true;

};
</script>


<p></body>
```</p>

<p>上面的e是事件对象</p>

<p><code>this</code>作为一种指代，可以泛化成各类元素，使得js的编写变得简单</p>

<p>```javascript
var li = document.getElemensByTagName("li");
for (var i = 0; i &lt; li.length; i++) {
  li[i].onclick = handleClik;
}</p>

<p>function handleClick() {
   this.style.backgroundColor = "blue";
   this.style.color = "white";
}
```</p>

<h3>取消冒泡（重载浏览器的事件处理）</h3>

<p>```javascript
function stopBubble(e) {
  //如果传入了事件对象，那么就是非IE浏览器
  if ( e &amp;&amp; e.stopPropagation ）</p>

<pre><code> e.stopPropagation();
</code></pre>

<p>  else // 否则使用IE的方式来取消事件冒泡</p>

<pre><code> window.event.cancelBubble = true;
</code></pre>

<p>}</p>

<p>```</p>

<h3>取消浏览器的默认行为（重载）</h3>

<p>```javascript
function stopDefault(e) {
  if (e &amp;&amp; e.preventDefault)</p>

<pre><code>e.preventDefault();
</code></pre>

<p>  else //windows 特供</p>

<pre><code>window.event.returnValue = false;
</code></pre>

<p>  return false;
}</p>

<p>li.onclick = function(e) {</p>

<pre><code>iframe.src = this.href
return stopDefault(e);
</code></pre>

<p>}
```</p>

<h2>绑定事件的3中方法</h2>

<ol>
<li>传统方法</li>
</ol>


<p><code>javascript
windo.onload = function() {};
</code></p>

<p>好处在于简单稳定，处理事件时可以使用this关键字；
坏处是事件只在冒泡时运行，捕获时不运行。且一个元素一次只能绑定一个处理函数，即onload=func2会替换前面已经注册过的函数。同时ie中，还不能得到事件对象e。</p>

<ol>
<li>W3C</li>
</ol>


<p>```javascript
window.addEventListener('load', function(){}, false);</p>

<p>```
相对于第一种，好处是第三个参数指明了哪个阶段处理事件：false（冒泡）或true(捕获)；事件对象可以通过处理函数的第一个参数获取；不会覆盖之前已绑定的事件。缺点就是老的ie不支持。</p>

<ol>
<li>IE绑定</li>
</ol>


<p><code>javascript
window.attachEvent('onload', function(){});
</code></p>

<p>粗看起来和w3c的类似，但细节有很多不同：
* 仅支持冒泡阶段
* this关键字指向了window对象
* 事件对象存在于window.event中
* 事件必须以ontype的形式命名，如onload而非load</p>

<ol>
<li>facade的addEvent和removeEvent</li>
</ol>


<p>```javascript
addEvent( window, "load", function() {</p>

<p>});
```</p>

<p>唯一的缺点是仅能工作在冒泡阶段</p>

<h2>事件类型</h2>

<ul>
<li>鼠标</li>
<li>键盘</li>
<li>UI，focus，blur</li>
<li>表单事件</li>
<li>加载和错误</li>
</ul>


<h2>分离式的javascript</h2>

<p>就是不在html里绑定怎么处理js，是的href可以是有意义的，使得js禁用时系统依然可以使用</p>

<h2>访问CSS属性</h2>

<h2>位置 尺寸和可见性</h2>

<h3>位置</h3>

<p>4种定位</p>

<p>position: static; //top和left不起作用，顺序排版
position: relative; //top和left相对于static进行偏移
position: absolute; //相对于它的第一个非静态定位的祖先元素而展示，如没有这样的祖先元素，就是相对于整个文档
position: fixed; //相对于浏览器窗口
top: 0px;
left: 0px;
right: ;
bottom: ;</p>

<h3>元素的可见性</h3>

<ul>
<li>visibility: hidden, visible</li>
<li>diplay: none, block, inline, ''</li>
<li>opacity:

<ul>
<li>filter: 'alpah(opacity='50)</li>
<li>opacity: 50/100</li>
</ul>
</li>
</ul>


<h2>动画效果</h2>

<p>1秒执行20帧动画</p>

<p>```javascript
for ( var i = 0; i &lt;= 100; i += 5 ） {</p>

<pre><code> (function(){
     var pos = i;
     setTimeout(function(){

        elem.style.height = (pos/100)*h + "px";
     }, (pos+1)*10);

 })();
</code></pre>

<p>}</p>

<p>```</p>

<h2>viewport是视口，就是浏览器滚动条内的一切东西</h2>

<p><code>window.scrollTo(0, 0)</code>可以移动浏览器窗口位置</p>

<h2>拖放功能</h2>

<p>使用拖放库可以</p>

<p>P145的悬停真是写的漂亮</p>

<h1>第四章 Ajax</h1>

<p>这部分其实主要就是举例ajax的例子，来做了综合的应用。</p>

<p>responseXML和responseText是xhttprequest的主要返回对象
其中，xml是响应头的content-type为xml时有效</p>

<p>一个$.ajax的实现，代码真精妙</p>

<p>返回响应的种类：</p>

<ul>
<li>xml</li>
<li>json</li>
<li>html ，可以直接注入html</li>
<li>script</li>
</ul>


<p>pageHeight(判断整个页面又多高)，scrollY(获知当前视口的顶部滚动到了哪里)，
windowHeight(获知视口有多高)</p>

<p>四步法：</p>

<ol>
<li>DOM操作</li>
<li>获取数据</li>
<li>事件监测</li>
<li>发起ajax请求</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomcat7 采用 redis作为session store]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/07/14/tomcat7-cai-yong-rediszuo-wei-session-store/"/>
    <updated>2014-07-14T15:57:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/07/14/tomcat7-cai-yong-rediszuo-wei-session-store</id>
    <content type="html"><![CDATA[<p>有个项目部署了几套Tomcat，而前置分发又不是按ip映射的，所以无法象往常一样继续使用内存作为session存放的介质。
同时，业务主要由使用移动互联网的手机来访问，ip也存在随时切换的可能，所以按ip进行映射在此场景下并不是一个好的办法。因此，最终决定使用redis来作为公共的session存储空间，实现session的共享。</p>

<p>主要用到的工具包:</p>

<ul>
<li><a href="https://github.com/jcoleman/tomcat-redis-session-manager#readme">tomcat-redis-session-manager</a></li>
<li>jedis</li>
<li>commons-pool</li>
</ul>


<p>需要注意的是，这个session manager已经有挺长时间停止开发了，从issues来看，表现还算基本稳定。目前也已经支持tomcat6和tomcat7，jdk也是6和7均支持。但是，上述几个包却存在着特定的版本依赖。必须为：</p>

<ol>
<li>tomcat-redis-session-manager-1.2-tomcat-7.jar</li>
<li>jedis-2.0.0.jar</li>
<li>commons-pool-1.3.jar<br/>
尤其是最后一个，千万马虎不得。上述三个包必须放入tomcat的lib目录下。</li>
</ol>


<p>然后，再在应用的context.xml,可以是应用的该文件也可以是tomcat/conf目录下的该文件，加入下列配置即可：</p>

<p>```xml
<Valve className="com.radiadesign.catalina.session.RedisSessionHandlerValve" />
&lt;Manager className="com.radiadesign.catalina.session.RedisSessionManager"</p>

<pre><code>     host="192.168.203.198" 
     port="6379" 
     database="1" 
     maxInactiveInterval="600" /&gt; 
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发语言还真是一个问题]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/07/04/kai-fa-yu-yan-huan-zhen-shi-%5B%3F%5D-ge-wen-ti/"/>
    <updated>2014-07-04T22:22:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/07/04/kai-fa-yu-yan-huan-zhen-shi-[?]-ge-wen-ti</id>
    <content type="html"><![CDATA[<p>使用Node.js开发Express框架的的牛人TJ Holowaychuk宣布
<a href="https://medium.com/code-adventures/farewell-node-js-4ba9e7f3e52b">退出使用Node.js</a>。
这个效果有点类似于如果DHH宣布不再使用Ruby进行开发。</p>

<p>此牛希望开发分布式的系统，但受不了Node倾向于性能而忽略
使用的便利性（usability）和鲁棒性（robustness）。
而他使用Go语言开发的分布式系统，则坚固，表现的也更好，代码也更易维护。
他也提到了同步式的代码比异步式的还是容易测试及理解。</p>

<p>从我个人的经历而言，有一阵子仔细研究过Node，我的硕士毕业论文中Node是最重要的一个组成部分。
也开发了一个不错的HTTP分发系统。但是，最终我并没有采用Node在生产系统中。
原因在于，尽管Node的基于事件的并发模式很易于处理大并发的慢速请求，
但除非去做云计算级别的分发，不然Java的NIO已足够应付性能方面的需要。</p>

<p>而在Node的web开发方面，Node及Express提供的基础设施比Rails差的很远，开发效率和体验都是不能比的。
所以，看来看去在服务端并没有很适用Node.js的场景。
至少，在Java和Ruby可以作为选择的场合下，没有Node的发挥空间。</p>

<p>至于Go为什么适合分布式开发，则需要进一步了解。不过以前看见go编译输出的是<code>a.out</code>就很让人有使用的欲望。</p>

<p>Node的崛起很大程度上托V8引擎性能优异的福，在脚本语言中，Node的运行性能就是独一无二的。
但和编译型语言比起来，Node就没什么优势了。只是有一阵子大家都相信脚本语言天生可以比编译型开发的更有
效率些，所以万众瞩目于Node。很多受Ruby运行性能之苦的开发者，也转到了Node开发服务。随后，
移动引用的兴盛使得JSON成为一种标准的传输形式，也由此Node成为了很多接口服务的开发选择。</p>

<p>然而，对此我还是秉承我的观点，仅仅开发接口的话，Java的开发效率也不低，性能一般也不会成为瓶颈。
而Node的开发还是不如Java方便，人才和教育的基础二者差距就更大了。Javascript只有在浏览器中才是王者。
因为浏览器的单线程，以及等待事件发生，才是天生适合他的。而且，世上浏览器那么多，所有的浏览器都只认可
Javascript。
至于服务端，只有在特定的少数的场合，
Node才具备突出的优势。</p>

<p>Ruby和Rails的优势是在于开发效率以及让人快乐，性能始终是不让人满意的一个环节。<br/>
Java的优势是大量的人才基础和教育基础，强大的性能和稳定性。也因为人才众多，所以才有足够的人力来打造像Spring这样的
开发工具。对很多语言来讲，如果像Java那样啰嗦，是很难得到足够多的产出的。<br/>
Javascript，还是在浏览器中发挥威力吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSP中的EL表达式和Helper]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/06/12/jspzhong-de-elbiao-da-shi-he-helper/"/>
    <updated>2014-06-12T19:05:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/06/12/jspzhong-de-elbiao-da-shi-he-helper</id>
    <content type="html"><![CDATA[<h2>JSP中的代码</h2>

<h3>传统的老三样</h3>

<p>长久以来的Java Web开发，在jsp层面进行读取或逻辑控制等行为时主要有<strong>Scriptlet</strong>、<strong>Helper</strong>和<strong>标签</strong>三种方式。</p>

<p>其中，Scriptlet是最不受推荐的方式，最为推荐的是用 <strong>标签</strong> 的方式，而Helper因为免不了会使用Scriptlet，所以流传的也不广。而标签方式中，不单有相对通用的JSTL（JSP Standard Tag Library，JSP标准标签库)，每个框架往往还有自己的标签库。</p>

<p>如struts1的：</p>

<p><code>&lt;bean:write name="spRinglib" property="down_cnt"/&gt;</code></p>

<p>struts2的：</p>

<p><code>&lt;s:property value="r.department" /&gt;</code></p>

<p>jstl的：</p>

<p><code>&lt;c:out value="${user.company}" escapeXml=="false"/&gt;</code></p>

<p>这种方式的一大特点就是冗长和啰嗦。信息的表达力很差。上述还只是用于输出的，一旦碰到条件判断等，标签的表现更是只能用拙劣二字来加以形容。同时，每个框架各搞一套，给程序员也会带来很大的负担，对项目维护也带来更多的成本。</p>

<p>然而，对于程序员而言，输出内容、流程控制等原本有着更直接和通用的描述方式： 编写代码。比如Java程序员自然用Java编写代码，Ruby的则自然用Ruby。
如果这些重新发明的标签，具有比语言更好的表达和组织能力，那么显然大家应该放弃语言本身，比如不使用java，而在MVC的各个部分都
使用标签。但既然这个没有发生，说明标签在大部分时候并不合适。</p>

<h3>新的变化-EL表达式的出现</h3>

<p>好在随着EL表达式的推出，情况逐步有所改观。比如同样是上面的输出，EL的写法可以是 <code>${r.department}</code>，调用数组也可以是<code>${list[0].name}</code> 。不过EL目前还没有支持逻辑控制，所以逻辑控制还是要用jstl的标签。</p>

<p>但至少在老三样之外提供了新的一种方式，并且使得使用<strong>Helper</strong>模式可以不需要必须用Scriptlet。</p>

<h2>EL中使用Helper</h2>

<p>说的简单点，其实就是在jsp页面中，通过EL表达式可以调用Java实现的方法。获得类似<code>${helper.getflow(userInfo.bendiAndNationFlux[2][0])}</code> 。 其中，getflow是一个用Java写的静态方法。</p>

<p>而使用Scriptlet配合helper，则会出现下面的代码：</p>

<p>```java
&lt;%
UserInfo userInfo = (UserInfo) request.getAttribute("userInfo");
long flow = (long[] )(userInfo.getBendiAndNationFlux().get(2))[0];
SheetAttendAction helper = (com.sanss.richtone.web.action.request.SheetAttendAction )request.getAttribute("helper");
%></p>

<p>&lt;%=  helper.cpSelectHelper(requestSheetForm.getManager(), spInfo.getCpCode(), spInfo.getCpName()) %>
```</p>

<p>光写出来的代码方面，不使用EL时已经要长很多了，明明只是一个调用取值显示的操作，却要先声明一系列的东西。同时，这些类型还要在jsp
的头上import进来。而IDE对jsp的import Class支持的并不好。所以确实相当麻烦。</p>

<p>对比一下可以发现，EL能够调用方法的话，可以带来多大的方便。使用Helper方法时，无论是Scriptlet还是EL表达式，在Controller层面，做
的事情都是类似的。</p>

<p>```java
//在controller里定义方法
  public static String getflow(long flow) {</p>

<pre><code>DecimalFormat format = new DecimalFormat("###0.0");
long tmpFlow = flow / 1024;
double df = 0;
if (tmpFlow &lt; 1) {
  return flow + "K";
} else if (tmpFlow &lt; 1024.0) {
  df = flow / 1024.0;

  return format.format(df) + "M";
} else {
  df = flow / 1024.0 / 1024;
  return format.format(df) + "G";
}
</code></pre>

<p>  }</p>

<p>  //在action中，注入属性
  @RequestMapping(value = "myflow", method = RequestMethod.GET)
  public String myflow(Model model, @ModelAttribute("mdn") String mdn, @ModelAttribute("userInfo") UserInfo userInfo) {</p>

<pre><code>model.addAttribute("helper", this);
return "nubia/myflow";
</code></pre>

<p>  }
```</p>

<p>这样一来，定义自己的方法和使用这个方法就极为简便了。需要指出的是，EL表达式里面可以调用方法，即支持el里面带()调用，是<strong>直到
servlet3.0标</strong>准出现才成形的，只有在tomcat7使用，即便是<del>tomcat6也不支持</del>这种调用方式。从中，可以看出EL越来越强大趋势。
但也反过来可以证明过去方法之错误。</p>

<h2>EL难道就不是Scriptlet？</h2>

<p>如果使用过其他Web开发语言的话，可以发现EL表达式和在页面模板里写脚本语言很类似。比如 <code>${r.department}</code> 和 <code>&lt;%= r.department%&gt;</code>
除了把${}换成了&lt;%=%>实在没有其他区别， <code>${helper.getflow(userInfo.bendiAndNationFlux[2][0])}</code> 可能是写成了 <code>&lt;%= getflow(userInfo.bendiAndNationFlux[2][0])%&gt;</code> 。</p>

<p>实际上，目前的EL，除了没有逻辑判断的能力之外，已经具备了很多Scriptlet的特性。那么区别在哪里呢？</p>

<p>我觉得最关键的区别在于语言本身。所谓Scriptlet其实是Java Scriptlet，需要一系列的声明才能使用。强类型编译语言有很多的好处，但在页面
显示方面，并非其所长。所以，不得不发明一套新语言来走Scriptlet的路子。 而对于另外一些本身就是脚本的语言，重新发明一套EL就显得没有必要了。</p>

<p>EL的Scriptlet和Java的Scriptlet完全是两码事情，倒是和ruby的Scriptlet几乎没有区别。
EL的支持来的有点慢，但好歹还是来了！</p>

<h3>对EL未来的期盼</h3>

<p>作为一个开发者，十分期望未来的EL能够再走一步，增加对 <code>if</code> <code>for</code>的原生支持，而不再需要使用麻烦的标签。能否发生这样的变化，就只有
再看发展了。</p>

<h3>标签适用的情况</h3>

<p>标签其实也有其存在的价值，至少包括：</p>

<ol>
<li>分页等相对组件化的元素；</li>
<li>风格一致的表单。</li>
</ol>


<p>对于那些有组件化特征的东西，标签还是很适用的。</p>

<p>而在EL有了调用method的能力后，helper模式可以做的更多，很多页面逻辑可以放到helper中去完成，即把<code>if</code> <code>for</code>封装在helper里面。
这应该是目前最值得推崇的一种页面代码模式了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[士别三日 Jave Web非复昔日阿蒙]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2014/05/31/shi-bie-san-ri-jave-webfei-fu-xi-ri-a-meng/"/>
    <updated>2014-05-31T10:16:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2014/05/31/shi-bie-san-ri-jave-webfei-fu-xi-ri-a-meng</id>
    <content type="html"><![CDATA[<p>六七年来，小组的Java Web开发是用SSH（Struts2+Spring+Hibernate）的框架。
Struts2充当胶水层，完成request参数的封装、controller的映射以及视图和控制层之间的参数传递。
Spring在其中充当了注入的角色。Hibernate负责数据持久化。
这个架构稳定使用了五年以上。</p>

<p>之所以一直使用，一方面在于对Webwork(Struts2)的感情，
毕竟曾经这个东西在替换struts1时让人映像深刻。其次，
一个开发架构的迁移牵涉到整个小组，引入、推广和维护都有成本的，
一成不变固然不行，一直切换也难免开销过大。同时，SSH招收熟手也相对容易些。</p>

<p>然而，Struts2毕竟多年已经没什么发展，
同时它的安全漏洞始终没能很好地解决，加上老架构也确实使用的时间有点长了。
因此开始尝试新的方案。主要目标就是替换掉Struts2，也就是选用其他的Controller组件。
而考察的对象就是Spring，确切地说是Spring MVC。</p>

<p>而在了解的过程中，又仔细学习了一下Spring JPA。当MVC+JPA结合在一起后，
发现Java Web的进步已然很大。而Spring MVC可以说是Rails的山寨版，
或者可以称之为 Java on Rails with Java Style。Spring MVC的设计者
可以说从Rails中借鉴了很多东西，但又最终使用Java的方式实现了出来。</p>

<p>在初学Rails的时候，彼时的版本是1.2.6，一直有个疑问，就是Java能否也有一个
像Ruby on Rails那样好的Web开发框架？当时有的牛人给出的答案是不依赖Ruby，
DHH变不出那么多魔术。但是，如今的Spring MVC至少已经赶上了Rails 2的开发便利程度，
虽然还逊于最新的Rails版本。所以，确切地说，Java至少也可以拥有和Rails 2 <strong>一样方便</strong>的Web框架，
只是需要投入<strong>更多</strong>的人力，也需要等待长的多的时间。而最后出来的东西肯定还是充满Java味道的。
现在的Rails已经走的更远了，但Java Web提高的程度这几年却更加显著了。</p>

<p>看一下Controller：</p>

<p>```java</p>

<pre><code>@RequestMapping(value = "update/{id}", method = RequestMethod.GET)
public String updateForm(@PathVariable("id") Long id, Model model) {
    model.addAttribute("user", userService.getUser(id));
    model.addAttribute("action", "update");
    return "user/userForm";
}

@RequestMapping(value = "update/{id}", method = RequestMethod.POST)
public String update(@Valid @ModelAttribute("user") User user, RedirectAttributes redirectAttributes) {
    userService.updateUser(user, user.getNumber2(), user.getCurrentshownumber());
    redirectAttributes.addFlashAttribute("message", "更新任务成功");
    return "redirect:/simuser/";
}
</code></pre>

<p>```</p>

<p>Restful风格的Url，通过声明<code>@ModelAttribute</code>可以注入参数到模型中，
<code>@PathVariable</code>可以实现从url路径中获取参数，
<code>userService</code>是注入的服务组件，<code>model.addAttribute</code>则将controller的内容注入给页面模板。
整个风格已经十分简洁。如果需要其他组件，如<code>session</code>或者<code>request</code>，
只要在类或者方法的参数中声明即可。<code>return "user/userForm"</code>则通知渲染user目录下的userForm.jsp模板</p>

<p>Spring JPA则是最方便的Java ORM描述工具。寻找多年的Java版ActiveRecord终于有了着落。
需要定义两个文件：1：model本身，2：一个dao文件（reposity）</p>

<ul>
<li>model：</li>
</ul>


<p>```java</p>

<p>//JPA标识
@Entity
@Table(name = "users")
public class User extends IdEntity {</p>

<pre><code>private String login;
</code></pre>

<p>  ...</p>

<pre><code>private Set&lt;Phonenumber&gt; phonenumbers;
private List&lt;Useroperlog&gt; useroperlogs;

@NotBlank
public String getNumber1() {
    return number1;
}

public void setNumber1(String number1) {
    this.number1 = number1;
}

@Transient
public String getNumber2() {
    return number2;
}

public void setNumber2(String number2) {
    this.number2 = number2;
}

@Transient
public String getCurrentshownumber() {
    return currentshownumber;
}

public void setCurrentshownumber(String currentshownumber) {
    this.currentshownumber = currentshownumber;
}
// join column is in table for Phonenumber
@OneToMany(fetch=FetchType.LAZY,orphanRemoval=true,cascade=CascadeType.ALL)
@JoinColumn(name = "userid")
public Set&lt;Phonenumber&gt; getPhonenumbers() {
    return phonenumbers;
}

public void setPhonenumbers(Set&lt;Phonenumber&gt; phonenumbers) {
    this.phonenumbers = phonenumbers;
}

@OneToMany(fetch=FetchType.LAZY)
@JoinColumn(name = "userid")
public List&lt;Useroperlog&gt; getUseroperlogs() {
    return useroperlogs;
}

public void setUseroperlogs(List&lt;Useroperlog&gt; useroperlogs) {
    this.useroperlogs = useroperlogs;
}
@Override
public String toString() {
    return ToStringBuilder.reflectionToString(this);
}
</code></pre>

<p>}</p>

<p>```</p>

<p>啰嗦是还是有点啰嗦，这个毕竟是java。DAO相对代码少一些。</p>

<ul>
<li>DAO文件：</li>
</ul>


<p>```java
public interface UserDao extends PagingAndSortingRepository&lt;User, Long>, JpaSpecificationExecutor<User> {</p>

<pre><code>//Page&lt;User&gt; findByUserId(Long id, Pageable pageRequest);

User findByNumber1(String number1);
</code></pre>

<p>}
<code>``
这个dao提供了很多默认的方法，包括</code>findAll<code>,</code>findOne<code>,</code>save`，底层的
实现还有很多内容，但使用的话确实只需要声明这些就行了。</p>

<ul>
<li>在Service文件中可这样使用:</li>
</ul>


<p>```java</p>

<pre><code>public void updateUser(User entity, String number2, String showNumber) {
    loadNumber2(entity);
    resetCurrentshownumber(entity, showNumber);
    resetNumber2(entity, number2);
    userDao.save(entity);
}

public void deleteUser(Long id) {
    userDao.delete(id);
}
</code></pre>

<p>```</p>

<p>而在页面处理上，几年前的Servlet 2.5开始，EL表达式取得了首要被支持的地位。</p>

<p><code>java
${user.name}
</code>
对比ruby在erb里常用的</p>

<p><code>&lt;%=user.name%&gt;</code></p>

<p>EL表达式其实就是代码了。Java不具备动态语言的特性，所以需要另外造一套表达式。
ruby的话，直接使用scriptlet其实效果更好也更直白。个人其实认为，逻辑判断、
取值等都应该使用语言本身，而不是要借助标签。EL表达式是对Java语言的一种很好的补充。
对Java Web的开发状况改善许多。但在迭代、逻辑判断方面，
标签使用的机会还是满多的，这个只能再等发展的变化了。</p>

<p>以上是已经进步显著的几个方面。但在布局、分页以及整合上，Spring并没有提供
一步到位的东西。所以需要进一步参考<a href="https://github.com/springside/springside4">SpringSide</a>。
这是一个中国人主推的Java Web开发实践整合的开源项目。里面提供了整合的样例，
其实本身也可以当做一个开发模板来对待。</p>

<p>从<a href="https://github.com/springside/springside4">SpringSide</a>上也可以追踪
Java Web开发历史的变迁，看了几年前的版本也是主要基于SSH的，最近一两年切换到了Spring MVC。
同时它也是使用的JPA来做ORM的描述。在各方面都很贴合我的需求和口味。考虑到这个项目维护多年，
且始终保持着很不错的实践，在此推荐一下。</p>

<p>花费多年时间，Jave Web非复昔日阿蒙。开发中的痛苦状况已经得到了极大的改善。
值得刮目相待。Spring确实极大地改变了Java Web开发，而Rails则影响了十年来的Web开发。</p>
]]></content>
  </entry>
  
</feed>
