<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 技术 | Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/blog/categories/技术/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2013-02-26T16:34:12+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[patch and diff]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/02/05/patch-and-diff/"/>
    <updated>2013-02-05T10:52:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/02/05/patch-and-diff</id>
    <content type="html"><![CDATA[<p>patch和diff确实是个神奇的东西，用来对现有版本的升级是最好不过了。
好处在于一来不用停业务，二来可以明确到底改了多少东西。</p>

<h3>diff</h3>

<p>首先来说说diff，毕竟patch是从此处产生。</p>

<p>```
diff -ruNa src dest  > a.patch</p>

<p>-r 针对整个目录<br/>
-u 以合并的方式来显示文件内容的不同
-N 新文件做空白文件
-a 包含二进制内容，如jar包，class等
```</p>

<p>据说这个东西是perl的发明者创建的工具，主要用于比较源码，通常不带<code>-a</code>。</p>

<h3>patch</h3>

<p>patch就比较强大了。如果是更改一个目录下面，最常见的做法是进入该目录，然后执行</p>

<p><code>
patch -p1 &lt; ../a.patch
</code></p>

<p>随后，两个目录就会变得一模一样了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Every language will implement a lisp interpreter in itself]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/02/03/every-language-will-implement-a-lisp-interpreter-in-itself/"/>
    <updated>2013-02-03T12:48:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/02/03/every-language-will-implement-a-lisp-interpreter-in-itself</id>
    <content type="html"><![CDATA[<p>H&amp;P里面这句话起初还有点琢磨不过来，后来看了下jstl等东西，这不就是表达式在java中的一个实现么。</p>

<p>从头开始讲的话，需要从web开发讲起。Web中最耗开发时间的是页面的开发，因为在这个环节一切编程的好东西都是没有引入的。比如C的头文件有include检察，
而css依然一团乱；其他语言有的各类引用机制，到了页面全部木有。而在页面上的代码，主要有下面两种模式：</p>

<ul>
<li><code>&lt;% %&gt;</code> <code>&lt;%= %&gt;</code>这样的代码嵌入</li>
<li>代码标签及各类膜拜，如jstl标签，struts2标签，velocity模板等</li>
</ul>


<p>仔细观察，可以发现第二种代码标签和模板其实就是实现了一套语言解析器。往往Java的就用Java实现，有些语言就用自己的实现。
正好印证了Paul的话。为了应付实际的表达困难，表达力弱一些的语言不得不自建一套<strong>类Lisp的语言表达解释器</strong>。</p>

<p>所以，表达力越差（可以理解成
啰嗦、信息量低）的语言，其搭配的解释器可能越五花八门，因为<code>&lt;% %&gt;</code>是很难适应这类语言嵌入在Html中的需求的。而能力强的语言，则模板就要少许多，
因为语言本身的表达力强大，使得再造一套标签显得很没有必要，自然也就无人发明此类模板。</p>

<p>从表达力而言，Java确实较次些。按Paul的理论那就Ruby更接近Lisp。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《白帽子讲Web安全》]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/01/26/bai-mao-zi-web/"/>
    <updated>2013-01-26T22:59:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/01/26/bai-mao-zi-web</id>
    <content type="html"><![CDATA[<p>一天半的功夫，书已经读了一半了。从这半本的情况来看，书写的很一般。首先，交代的不够细致。有些地方是不太能贯通的，背景知识和其间的逻辑推论
都做的很不扎实。其次，重点难点不突出。有些关键的地方并没有点出来，只能靠读者自己去审阅。第三，代码贴的太多，而且也是毫无重点的代码，
篇幅很大，但真正值得读的代码却很少。</p>

<p>本书好的地方就是给出了大量的实例，这些例子就在我们身边，百度的、搜狐的、MySpace的。跟着这些案例仔细自己再做分析应该还是会有很多收获的。
至少让人明白，第一网络确实不安全，第二值得研究的工作还有许多。</p>

<p>但是，被很多人推荐就有点不可理解了。从技术书籍的角度考量，这本书真的很一般。就清晰度、深度、整洁度来讲，都很平平。卖的好，可能主要还是营销
的好。</p>

<p>花了2天半，这本书也就翻完了。还是过得去的一本书，但有些评价显然过高。Yahoo的算法很有用。几个案例至少也提供了继续跟踪研究的线索。</p>

<p>这本书的总体风格就是这个样子，提供了足够多的案例作为进一步研究的入门线索，但书本身拼凑痕迹严重，存在大量的不负责代码黏贴，也缺乏作为一本技术书籍
尤其是畅销书籍应该具备的细致入微的分析。不过这个主题的其他书籍也确实不多，作者也算这个领域的牛人了。还是值得推荐给做Web开发的人员读读的，至少可以
增加点广度的认识。</p>

<p><a href="https://gist.github.com/f801d7015715f6f10098">gist</a></p>

<p>作者：</p>

<p>吴翰清，西安交通大学少年班，84年生人。<br/>
2007年，成为P7（初级技术专家）；<br/>
2010年，成为P8（高级技术专家）。<br/>
2012年下半年，跳槽去了安全宝，创新工场下面的一个企业。我对开复不感冒，甚至是负分的哦。</p>

<p><strong>白帽子</strong> 主守， <strong>黑帽子</strong> 主攻。</p>

<p>防火墙及ACL的控制，是的任意攻击系统端口的情况不再可能。而Web端口不能封。加之Web技术的普及和流行，黑客攻击转向Web。</p>

<h3>安全三要素(CIA)</h3>

<ul>
<li>机密性(Confidentiality)</li>
<li>完整性(Integrity)</li>
<li>可用性(Availability)</li>
</ul>


<p>其他还有可审计性、不可抵赖性等</p>

<p>第一章很一般，全部都是空谈，讲一些人人都懂的道理。而且归纳的也很不好，基本就是一个列表，列表之间没有逻辑关系。</p>

<p>作者的文字功底和解释能力相当一般。</p>

<h2>XSS(跨站脚本）</h2>

<p>这章前半部分很无聊，作者罗列了一堆xss的案例，其中贴的js代码就差不多有十页。但没解释，没重点。XSS防御部分介绍的还行。
xss可以分为参数安全和劫持Cookie两种。可以试试<a href="http://www.fiddler2.com/fiddler2/">fiddler</a>工具。</p>

<h3>XSS防御</h3>

<ul>
<li>HttpOnly</li>
</ul>


<p>是设置cookie的属性，即只能Http请求时上传，而不能让JS操作。这样就可以避免cookie被劫持。</p>

<ul>
<li>输入检查</li>
</ul>


<p>黑白名单过滤器</p>

<ul>
<li>输出检查</li>
</ul>


<p>在html文本中用HtmlEncode，在javascript中用JavascriptEncode。</p>

<p>在css和url的输出则较为复杂。 Anti-Samy是一个很好的XSS Filter。</p>

<h2>CSRF(Cross Site Request Forgery) 跨站点请求伪造</h2>

<p>有些浏览器本地cookie不会被提交，session型cookie则肯定会被提交。</p>

<p>解决办法是 <strong>验证码</strong> 和 <strong>Anti CSRF Token</strong></p>

<p>就是在表单和session中，都放一个token来确保这个form是本地服务产生的。<br/>
Token可以是一个，也可以是多个。</p>

<p>点击劫持和HTML5都讲的比较烂。总是缺乏画龙点睛的那一笔。</p>

<h2>SQL 注入</h2>

<p>此章依然很一般。介绍的内容相当不到位。比如只说出了是利用sql拼接的漏洞，但没说具体是怎么应用的。
不过在 <a href="http://vdisk.weibo.com/s/oHDMV/1359208976">SQL注入攻击技术初探</a> 中，终于搞懂了以前困惑过我的问题：内容到底是怎么显示出去的。道理在于让第一句（自己写的语句）出错无记录，而后面跟随union则返回攻击程序写出来的sql，这样自然内容就回显了。而参数数量等都是通过order by 16等试错来取得的。</p>

<p>使用预编译语句的效果主要是确保SQL语句的结构不会因为输入的参数发生变化。即实现了数据和代码（字段及从句的分离。</p>

<h2>访问控制</h2>

<p>依然讲的不清楚，懂的人不需要读，不懂的人读了也白读。</p>

<ul>
<li>垂直权限管理 -- 针对URL的访问控制，RBAC</li>
<li>水平权限管理 -- 面对数据资源的</li>
<li>OAuth -- 和我们的重定向类似，只是更加标准，返回的不是用户数据，而是token</li>
</ul>


<h2>加密算法和随机数</h2>

<p>这章还算有点料，从使用者的角度讲解了加密解密算法的用法。</p>

<p>建议：</p>

<ul>
<li>使用CBC模式的AES256用于加密；</li>
<li>使用HMAC-SHA512用于完整性检查；</li>
<li>使用带salt的SHA-256或SHA-512用于Hashing.</li>
</ul>


<h2>DDOS</h2>

<p>亮点在于给了Yahoo的专利，确实是绝佳的主意。
<a href="http://patft.uspto.gov">Detecting system abuse</a></p>

<p>本书不是一本讲解性质的。其特点是列出各个大门，然后读者自己进去领取东西。对比师傅领进门的模式，它的模式是门户告诉你，然后靠自己。</p>

<p>OWASP的ESAPI安全模块</p>

<p>安全监控、入侵检测、Web应用防火墙(Apache的一个模块）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hackers &amp; Painters]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/01/20/hackers-and-painters/"/>
    <updated>2013-01-20T15:38:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/01/20/hackers-and-painters</id>
    <content type="html"><![CDATA[<p>Paul Graham 的这本书有15个章节。我有英文版和中文版两个版本，但读了英文版没几页之后，我就决定把这本书当做双语练习来对待。
是的，作者的文章很美，也很有深度和启发，值得对照、精读和背诵。15章我已经阅读了几章，第一章的Why Nerds Are Unpopular感觉最好。<br/>
<strong>第六章</strong>How to make wealth有人说看了大受启发，基本说明了财富和金钱的关系，但这个内容在我看来就比较平淡，因为中欧商学院推荐的
图书基本已经把这个道理说得很清楚了。所谓大公司测量难小公司测素质方便也是很早就是我自己产生的想法。不过高科技公司拥有的杠杆（放大）
效应此前并没有强烈的意识。其他的诸如形成产权概念、保护私人财产是西方发达的主要因素，这个xiaozixin早就讲过。只不过这下子更明确了
西方也不是一开始就这样的。产权或者说私权的明晰是一个逐步发展的过程，也是文艺复兴的一大成果。在西方的过去，统治者及其手下也是会想办法
把财富从创造者那里夺走。只是后来才逐步找到了平衡。</p>

<p><strong>第10章</strong>和<strong>第11章</strong>都是关于程序语言的。对我而言，这两章比较业余。当然，作者的视野很高，从机器语言到高层语言，从动态执行到静态编译，从强类型
到弱类型都介绍了一下，感觉这章是给外行看的科普文章。后面的100年语言如何就比较扯了，随便看看就行。</p>

<p>下面重点说说<strong>第一章</strong>。这篇文章很独特。作者从书呆子(nerds)为什么不受欢迎说起，指出是因为nerds对受欢迎不是真的最感兴趣；随后分析美国普通
初高中学校的分层情况，指出nerds所受的是“迫害”，因为一个梨型的架构下必须要有一些牺牲品成为受打击对象，这样最底层的“白人”才能好受些，才能享受被欢迎。
随后才引出文章的真正主题，学校为什么会存在？学校和监狱为什么又类似的地方，为什么二者的内部社会等级也很类似？其实文章是对现今流行的
学校教育制度的一种抨击。因为学校和监狱一样，他们的存在本身并不是为了创造什么财富，一大功能是把人给围起来避免影响工业化时代<strong>其他普通人</strong>的
工作。学校的存在使得一个人在22岁之前和现实世界是分离的。而且缺乏实践，相对于农业文明（藏人小孩8岁就可以放牧了）时能创造真正的财富
需要很长的时间和代价。<br/>
最后又回到主题，指出nerds之所以在学校不受欢迎本质上是他们看到了更现实世界的需求，他们是能促进世界进步的人。</p>

<p>一旦nerds进入现实世界，现实世界的需求需要他们去解决，此后他们就会被得到尊重。因为此时受不受欢迎在小团体中不再成为主要因素。而且世界范围的
扩大也使得nerds可以自己组群从而不再孤单。</p>

<p>结合自己的感受说说这一章。从nerd对现实世界有用来讲，这个世界上的人本来就是可以分为欢迎且有用、不欢迎但有用、欢迎但没用、不欢迎且没用。
一个无所事事的世界或环境里，欢迎是第一位的，有用是次要的，但一旦环境发生变化必须要有用时，那么欢迎反而是可以退居之后的。作者的文章
只是把nerd局限在学校，然后一下子推广到了大千世界。<br/>
现在看来，中国媒体日常所讲的“情商”其实是社交受欢迎的意思。严格地说，情商不单包括受欢迎，还包括承受压力、自信心、意志力等个人品质，我国
媒体强调的情商只是片面的受欢迎关联的几项。</p>

<p>孩子的世界确实存在着欺负。因为其秩序是团体内部临时组合而成，没有经历过历史的演变，层级和帮派往往会占据主流，看来无论是美国还是中国的中学
都存在秩序混乱的特色。只不过中国是以考试为荣的国度，书呆子只要成绩好，一般也没人会看不起，反而还是挺受尊重的。但任何群体里，都不太会欢迎
逆袭这样的举动，此时美帝和中国中学生的表现都差不多，即群起而攻之。这也是为了站队的需要，使得自己可以被其他团体接受。只要是梨型结构，可能就是这种特色。</p>

<p>关于教育，美帝的一套看来并不值得一学，他们的问题也不少。</p>

<p><strong>第二章</strong>是关于画家和hacker的。这个现在读来就没什么新东西了，因为这也是我这几年主要接触的素材，个人也是这么想的。
本质上，计算机是一种文科和理科结合的专业，而其中又可以派生出一类maker。计算机之所以能如此流行，渗透到生活的方方面面，主要就在于它具备这种
文学和理科、自由和严谨、艺术和工程的结合的性质。计算机系和软件学院的区别也可以从中窥到一斑。我去过意大利，去过佛罗伦萨，倒是那些画家的事迹
更有感触。原来那些画上的内容也是可以不同的人完成的，实际上一个画家不会全部都自己画完。每幅画其实也反复修改过多次（颜料的反复修补涂改等）。
这个和做软件真的挺类似。<br/>
而且，他也给抵制数学找出了理由。如果是计算机科学，那么必然要加入数学，而实际上这并不是必须的。计算机不是数学，是我一直以来有的观念，否则大家
还搞什么计算机，都去数学系不是更好。就是因为计算机有自己的关注点和特色，才从数学里面分离出来的么。<br/>
总之，很有意思的一章，但对我而言可能觉得都是顺理成章的。从大学时代的学习、到后面DHH的实例，都验证了我的想法。呵呵，可以正大光明地偷懒
不学算法导论了。</p>

<p><strong>第三章</strong>是关于独立思考和要不要讲出来的。这篇文章较难，英文的很多地方就不理解，转而看中文也如坠五里雾中。小结一下作者的意思是要自己独立思考、
怀疑要大但说出来的要小。步子迈大了叫离经叛道，走一点点就叫创新。思想要奇特，讲话要把握分寸。</p>

<p><strong>第四章</strong>从解释hacker和hack的含义开始，然后以hack的历史作为衔接引到了<strong>政府和有反抗精神人的关系</strong>上面。第一个hacker不是计算机
专家，而是一个在曼哈顿计划中破解保险箱密码的hacker。然后展开了为什么美国有强大的黑客文化，因为美国人的反抗精神本来就强大一些。
二战期间，德日英法都没这种现象。<br/>
原因当然很简单，能反抗政府的人自然也能解决其他棘手问题，在政府门前不声不响的自然在其他问题面前也无能为力。此外产权保护、防止
研究都是等于政府给hacker放了一把锁，对于hacker而言第一反应自然是要突破它。如果失去了这种精神，或者是失去了这种精神的人，那么国家
将变得衰弱。<br/>
另外，能够自由发言的国家最后容易变成很多东西采取最优方案的那一个。一个集权和权威的国家，则主要是听资助者（老大）的声音，
那方案是否最优就不一定了。再者，权威（集权）国家容易产生腐败，腐败容易导致贫穷，贫穷自然虚弱。这是大清的现实情况。</p>

<p>换个角度，中国的hacker比美国更有反抗政府或者说钻政府控制的精神。所以国家给了一定的生存空间后，财富就积累了起来。我国的
世界第二富不是吹的。</p>

<p><strong>第五章</strong>是关于如何在互联网上开发软件的。作者的文章写于2001年，相当的具有前瞻性，37signals可以说是实践了这套理论的典型。而且也进一步说明了
为什么互联网公司方面小公司可以打败大公司。</p>

<p>在人才和回报两方面，只有小型的互联网公司才能给予优秀人才第一流的回报，做特殊需要费力的事情。大公司只能雇佣优秀人才做普通的事情，或者雇佣普通人才
做很费力的事情，但很难让优秀人才做需要很大努力的事情。</p>

<p>作者对ipod、互联网软件的认识都极有深度，预言的也很准。对世界怎么运行的了解也很深。比如说“很大一部分是商家为了让大公司买下这个商品而付出的费用”，呵呵，
在美国这叫营销，在中国有时候叫做寻租。是的，商品不单有本身的价值，不单由供求关系、环境等决定它的价格，还必然有<strong>为了卖</strong>而付出的成本。</p>

<p><strong>第七章</strong>是关于财富分配的。作者的观点是财富分配差距拉大但社会总体更加富裕，富人和穷人的生活差距反而在缩小。除了收入差距、住房差距，其他差距是在缩小。</p>

<p><strong>平均</strong>和<strong>公平</strong>是两个不同的概念。当官在历史上各个国家都受欢迎，就是因为他们可以窃取财富。但作者这里没说多印钞票的问题。</p>

<p>技术无法使得<strong>品牌</strong>变得更便宜。</p>

<p><strong>第八章</strong> 讲了通过统计学的方法（贝叶斯公式）来解决垃圾邮件。其核心特征就是利用邮件的统计特征值，来实现一套可以自己成长并适应
变化的反垃圾邮件系统。在读过数学之美，了解google之后，这章的核心思想一看就明白了。</p>

<p><strong>第九章</strong> 讲了设计者的品味。实际上是指更好、更美、更简洁的解决方案或者设计。品味的提高源于对现实的不满，起初是模仿，
随后是提高和突破。</p>

<p>这方面中国人普遍不强大，本人和大部分人一样，都是得过且过的。所以，中国好的设计品味并不多。这可能也是没有办法的
事情。</p>

<p><strong>第十二</strong> 、 <strong>十三章</strong> 都是讲使用优秀语言的优势，以lisp为主。前一章以击败平庸公司为切入。各种语言的能力
其实是不一样的，经理的选择更出于平稳考虑，而优秀语言真正的用武之地是小型的竞争激烈的领域。
越通用的技术也意味着越平庸，但对大公司这样是合适的。优秀语言适合需要高收入低人数的企业。</p>

<p>后面的则进一步解释lisp的强大所在。ruby比perl python更接近lisp。lisp的风格用括号和缩进
是我喜欢的，考虑学习学习。</p>

<p>编程语言是技术和宗教的混合物。评估竞争对手可关注他们的招聘职位。书生气的开发者与层级官僚
经理之间总是发生冲突。lisp由数学演算诞生，约翰麦卡西，诞生之处就包含9种新思想，但没写闭包。</p>

<p><strong>第十四章</strong> 则是讲了作者心中的梦幻语言是什么样子的。当然，还是Lisp。</p>

<p><strong>第十五章</strong> 讲了设计和研究的区别于联系。简而言之，设计都是为了好，研究都是为了新。他们的方法不同，但目标都是又新又好。因为好的设计
必然需要带有突破性质的新东西。</p>

<p>为了自己使用的而设计的通常要比给别人使用的设计来的好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《走出软件作坊》读后感]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/01/14/out-the-firm/"/>
    <updated>2013-01-14T22:47:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/01/14/out-the-firm</id>
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/david_lv">阿朱</a>的这本走出作坊现身说法，很贴合实际，所以容易引起共鸣给人启发，也确实找到了很多问题过得去的解决办法。
尽管个人认为叫做走进 软件作坊更合适些。</p>

<p>首先说说阿朱的背景。从文章看的出来，阿朱走的是Windows的路线，他开发软件从C/S开始，也以C/S为主，现在也逐步有了一些B/S的东西。
由此背景，决定了他的很多开发观和实际操作的守则。他熟悉Windows的机制，熟悉SQL Server的内部情况，对UI那套比较熟，对MS的工具（Excel Word PPT)
很偏爱，但对console不熟，所以自动化操作方面不强大。然后他受微软的影响很深，所以管理团队喜欢把员工拆成螺丝钉，而不是独当一面的人才。
符合老外的发展思路。但又控制成本，因为能力弱的人成本自然低。从这点上来说，给他打工就不太值得。因为发展空间和薪水空间都有限。他自己也明言，
这样做主要就是为了控制成本。当然，以中国现实来讲这个策略也没什么不对。都像DHH那样，中国人能就业的就没多少人了。</p>

<p>他的背景的另一大特点就是他是卖软件的。这个模式也是微软的模式，而不是卖服务的。软件的销售主要靠售前和销售去打单，实施经理负责项目现场部署和培训，
(ps. 大辉同学原来就是做<strong>实施</strong>的，说白了就是装机的做集成的，所以熟悉OS和Oracle)
他的软件有大量的培训工作要做。研发则在家里支撑。这个模式里面研发和电话支持（call center）确实很像。因为卖软件和实施的关系，这就使得他很善于同不同的客户打交道，见过的
经历过的人足够多，所以他在交际、沟通方面的能力是要强于大部分技术人员的。</p>

<p>他的技术特点是精通数据库和精通操作系统及其应用。对网络等实际一般般。在技术上，我想自己可以做的比他更好。当然，我的数据库还有欠缺。但和他
相比，最欠缺的是和人混熟的能力。虽然他自己也说不喜应酬，他能迅速要到全部联系方式、能迅速与人沟通（吃饭），这些说明他绝不是一个不善于同人应酬的。
这方面，我做的就比较欠缺了。</p>

<p>文章是很贴近实战，也相当直面惨淡的IT人生，是值得一读的文章。上面谈完对作者的基本认识后，将继续写对书内容的感受。</p>

<p>其次，这本书最有价值的地方在于作者真实地描述了自己的研发与管理的状况。仅仅冲着这份勇气，这本书就值得一读。不是人人都乐于或敢于把自己的工作经历
示人的。毕竟现实往往琐碎，有些话有些事情做做可以，说出来就未必敢了。不过作者冲破了这个限制，展现了相当真实的微软系、卖软件、低成本、多营销的
CTO的生活。包括同老板的关系，同下属的关系，同客户的关系，如何提升研发部门的地位等等，这些都很实在也很具体，基本上很多都可以立马借鉴运用。<br/>
拿软考的标准，有些内容像需求管理等都是直接可以作为论文的范文的。</p>

<p>回到自己身上。在对比大辉时，我觉得自己落后这个同龄人3-4年，这个数字和我的整个职业生涯前面脱掉的4年时间大致相等。个人的目标也是再用3年时间，可以
达到他们的成绩，做出和他们类似的事情，拿和他们类似的待遇，并拥有类似的影响力。</p>

<p>而在看了《走出》之后，个人也想对自己的成长关键点作一下小结。</p>

<h3>学习期</h3>

<p>我对计算机真正的认识是在大四下才开始的。在我读书的年代，资料并不多，影印版的流行是大三以后的事情。<strong>《The C programming Language》</strong>第一次让我意识到
程序书可以写的如此简洁清晰而又例子丰富，看了之后才明白C语言应该用来干些什么。可以说，K&amp;R带我入了门，也使我开始习惯看原版技术书籍。
随后影响较深的是<strong>William Stalling是《操作系统原理》</strong>。这是我在即将赴公司报道前的半个暑假看完的。由此才对操作系统有了初步的认识，明白了操作系统发展
的来龙去脉。直到毕业，我的计算机知识才算入门。尽管我经历了我们国家位列前三的计算机系的4年培养，但真的入门的感觉是在毕业那年的7月份了。当然，
没有之前的基础和培养出来的毅力，这两本书不会带给我那么大的收益。而且在9年后的考研中，我进一步确信我的学校我的系确实不愧是中国前三。尽管也不那么完美，
但在比很多学校强大的多。</p>

<p>之后是作为程序员工作的2年。也还是以学习为主。期间用Power Builder写了点client的小东西，主要是用VC开发了一些采集程序之类的东西。跟了几个项目，学习了Java
的基础内容，但没有应用也没什么感觉。这段日子里，收益最大的就是看了Stevens的一系列图书，从<strong>《APUE》</strong>到<strong>《UNP》</strong>，再到TCP系列。除了TCP第二册，其他的
都消化吸收的不错。看UNP的感觉更好，但APUE给我补充的进程等知识让我基本搞明白了OS是怎么回事情，而UNP造就了我的技术口味。后来去做Web能迅速提升，
和这也有很大的关系。</p>

<p>严格的说，这两年不能算荒废，只能说没有经历很好的项目成长的有点慢且漫无目的，针对性不够强。但随后的两年时间则是基本和之后的发展方向脱离的。</p>

<h3>进入Web界</h3>

<p>直到毕业4年后，我的工作重心开始转向Web应用的开发。那时候公司整个的方向也往软件开发转移了。系统从技术上讲就是Java的简单企业应用。技术难度上和业务类型
上和阿朱的公司也差不多，只是路线不一样些。开发工具自然是Java，运行的服务器普遍是Linux或各变种的Unix，数据库则是MySQL和Oracle。起初我对前端
和页面一窍不通，主要负责用Java写后端。有APUE的底子，我的Java能力没用多少时间就已经走在公司的前面。做Java Web用公司惯用的框架Struts做了一年半，
期间项目很多，当然技术上都类似，不过我也逐步从只做后端开始后端到前端通吃，写页面时长让我感觉很痛苦。一年半后，部门组织调整，我也不愿再做IPTV，
于是撤出繁忙的IPTV任务组后，我稍微有了点空闲时间。而在那一年半中，通过读原始的帮助文档及孙卫琴的Tomcat书籍，我基本搞清了Java Web的原理。但是我对
Struts的框架带来的痛苦很不满意。<br/>
07年开始，终于又有了一个跨越和突破，那就是开始学习并引入了Webwork。在读<strong>《Webwork in Action》</strong>的过程中，技术能力得到了提高，而且很多时候都会产生
我也是这么想的感觉，而且认为webwork所做的和我设想的类似，这样一步一步树立起来了对自己技术感觉的信心。随后的项目中，就引入了Webwork框架，确实提高了效率
减轻了不少工作量。从此之后的项目就再也没有回到struts。直到webwork更名为struts2，就更验证了自己的品味和技术感觉还是很出色的。</p>

<h3>高速发展</h3>

<p>而在应用webwork之后，也在07年，开始接触了<strong>Rails</strong>。而这使我的技术能力及解决办法坐上了高速火车。通过应用和熟悉这个框架，逐步熟悉了
Web/HTTP的方方面面，也进一步熟悉了Linux。开始接触了Nginx、Mysql、Ruby、Git/Github、Heroku、Redis、MongoDB、Node.js。Rails直接作为项目使用的主体工具并不多，
至今也只有六七个项目使用了Rails做框架来实现Web界面。出于成本和用人的考虑，部门领导最终还是决定走Java路线。但之后的工作就主要变成了架构师，
所以应用什么语言并非影响很大。反而是架构、设计间共通的东西可以带来更大的影响。在Rails熟悉的过程中，所掌握的设计方法及Web的关键元素，使得我
在应用Java技术时可以更加游刃有余，很多时候有种以高看远的感觉。后来写Rails的评测论文，使得自己对操作系统、性能响应的认识又更进了一步。<br/>
而从Rails引申出来的项目管理、Nginx等种种神器，对个人也有很大的进步，而且很多可以直接运用。也由此，我对自己的定位是技术管理人才。
以统管全体的技术为目的，解难题和立规则，从而提高集体的竞争能力。这个活应该说是最适合我干的。</p>

<h3>转战云计算</h3>

<p>考虑到公司提供的平台和我个人的喜好，希望可以在云计算方面有一番作为。我的硕士毕业论文也是写的这方面的相关内容。而<strong>Node.js</strong>的出现，也给云计算
的发展提供了进一步的条件。前路漫漫，事情多多，到底怎么样也只有继续努力下去。</p>
]]></content>
  </entry>
  
</feed>
