<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 时评 | Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/blog/categories/时评/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2013-04-05T11:52:36+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Oracle的价格]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/03/28/the-price-of-oracle/"/>
    <updated>2013-03-28T14:57:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/03/28/the-price-of-oracle</id>
    <content type="html"><![CDATA[<p>不少人应该对Oracle的报价是好奇的，研究了一番之后，发现Oracle的报价无论在商务上还是使用策略上都可以称之为出奇的<strong>成功</strong>.</p>

<h3>Oracle的数据库种类</h3>

<p>Oracle的数据库讲穿了只有一套，但又分成ee、se等几个版本。而这些都可以提供免费试用。
通过免费可以培养用户群，降低工程师的雇佣成本。通过划分版本，又可以执行价格策略，抢占不同的市场。</p>

<h3>Oracle的单价种类</h3>

<p>Oracle的单价基本可以分为按User和按CPU卖。User的话是一个自然人或者设备。CPU就是按装机卖了。</p>

<p>下面是一些价格举例，单位都是美刀
按用户： {企业版： 950，se: 350, seo: 180}
按cpu: {企业版：47500， se：17500，seo：5800}</p>

<h3>Oracle的起步license概念</h3>

<p>显然，按user大部分情况下应该比较便宜。所以，邪恶的oracle又有了最小license数量的概念。比如，企业版最低的user数就是25，se则是5，以此来保证oracle的收入。</p>

<h3>折扣</h3>

<p>以上只是目录价，一般通过代理买，获得一半的折扣是没有多少问题的。如果是大客户的话，还可以更加优惠。</p>

<p>最后，说一下关于DataGuard的事情。有说是免费的，也有说是付费的。在10g的ee版本中，这个确实已经包含了。</p>

<blockquote><p>Data Guard supports both physical standby and logical standby sites. Oracle Corporation makes Data Guard available only as a bundled feature included within its "Enterprise Edition" of the Oracle RDBMS.</p></blockquote>

<p>所以，10g ee里面的ODG肯定是免费的，因为已经买过单了。</p>

<blockquote><p>The "Oracle Active Data Guard" option, an extra-cost facility,[4] extends Oracle Data Guard physical standby functionality in Oracle 11g configurations. It allows read-only access on the standby node at the same time as applying archived transactions from the primary node.[5]</p></blockquote>

<p>然后，在11g里面，又推出了Active Data Guard，二者在技术上有什么区别还没研究过，但在付费上这是一个可选包。目录价200/user.</p>

<p>参考资料：</p>

<ol>
<li><p><a href="http://www.oracle.com/us/corporate/pricing/technology-price-list-070617.pdf">oracle price list</a></p></li>
<li><p><a href="http://en.wikipedia.org/wiki/Oracle_Data_Guard">oracle data guard wiki</a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Should we try to pursue a master degree]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2013/02/03/should-we-try-to-pursue-a-master-degree/"/>
    <updated>2013-02-03T15:23:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2013/02/03/should-we-try-to-pursue-a-master-degree</id>
    <content type="html"><![CDATA[<p>当我还在高中时，是否需要读一个硕士学位根本不是一个问题。因为我当时很明确地不想。以当时的认知水平，如果进一个名牌大学的热门专业，基本可以解决
毕业后的生计问题。彼时的大学生也根本不怎么考虑找工作或者市场需求的事情。因为总人数也就是如今本科生的七分之一，比如今的研究生总数也多不出多少。
在这样的轻压下，就业不愁，很多人也是没有攻读硕士文凭的想法的。</p>

<p>但是，在我读本科至毕业期间，又是研究生和本科生的待遇差别最大的那几年。那应该是考研竞争最激烈的几年，于是动过考研的念头。然而，在我了解了实验室师兄们的研究生生活后，
我又打消了考研的念头。为什么？</p>

<p>第一，是给导师打工的感觉并不好。被压榨的比较厉害。这一点和现在是有区别的，现在因为研究生大量扩招，很多老师其实也不需要那么多学生干活，或者说
人多了每个人能做的事情和出的力气只能降低。而在那时候，一个研究生的工作压力还是很大的。而同样的压力下，自然是公司给的钱更多。出于经济的考虑，自然
应当选择工作。第二，在专业能力方面，如果是无所事事只是读书，那么进步很慢，个人也只会感觉到自己啥都不会。虽然就业时一般把自己卖的还不错，但自己
的本事自己最清楚。当然，公司老板不是傻瓜，卖的好也有卖的好的道理。如果是干老板的打工的活，那和自己直接去公司中接触现实项目没区别。研究生所带来的
起点高，是以损失两三年时间等换来的。之所以自己感觉研究生的待遇比本科生好许多，一大因素是当时没把年纪和时间的因素权衡好。总之，读研在此时显得
意义不大。</p>

<p>但是，在内心深处，自己又是想拥有研究生的文凭的。毕竟对一个书呆子而言，有没有这样一个东西绝非毫无意义的事情。如前所说，大学几年读完，意志品质
增强，但个人并没有什么创造财富的技能。虽然行情不错，自己知道自己实际上并没有为公司、为社会创造财富的能力，做不出什么社会上需要的东西。中国的
知识分子往往不在意现实世界的问题，更多的是关心自己这个圈子和世界里的问题，自己在这个相对封闭的环境中所取得的成绩和title等。</p>

<p>而到如今，择业的机会也更多了，光凭一个研究生文凭能不能找到好的工作也变得两说。当然，优秀学校的研究生还是很热门的，毕竟这部分资源是难得的。这
也是过去的名牌大学本科生即使啥都不会，但还是很有行情的根本原因-----优秀的智力资源当然哪里都是需要的，世界上总有现实的问题需要聪明人才能解决。而
一个好大学的研究生往往还是具备这种能力，毕竟国家替公司先选择过一回了。</p>

<p>所以，读了研究生的同学，其竞争力和未来所能取得的成绩和生活水平应该还是会高于本科生的平均水平。尤其对于想进入体制内的企业的年轻人而言。可能对于
互联网小型公司有没有硕士文凭真的不重要，对体制内的单位，包括银行、石油、电力等，从事这些单位的IT工作，攻读出来的研究生学位还是很有用的。
这些单位的待遇也不错，我国又是公有经济为主的国度，去这些巨头研究生的文凭将很有用处。比如本系的研究生1/4左右会去银行，但本系的本科生去银行的比例
要低得多了，银行又是目前的优势行业，如果定位自己想去做金融业的IT，那么研究生文凭会派上很大的用场。<br/>
即使有些人对体制内的企业不感兴趣，那么只要你是去大公司，是去巨头，那么研究生文凭都将是有用处的。哪怕是淘宝、腾讯和百度，研究生的机会和起点都
仍然比本科生好许多。当然，需要你有一个不错的学校，好学校的招牌也很重要。</p>

<p>前面已经说了，如今的时代也是机会多多的时代。很多需要处理实际问题的地方，对学历确实是无所谓的，如果你有特殊技能或者能力真的特别强。这部分能力当然也不是学校能教会的，
这些能力来自自己的业余项目以及自己的实践。如果有如此能力，又想赚到大钱的话，完全可以本科毕业就找一个认得准的公司开干。如何认准呢？这个就看你积累的
能力了。如果你也认不准，那么就只能碰运气了。抱定这个想法的话，也是可以过得不错的。现实中已经有大量的IT技术小杰是其他专业转过来的，他们的背景和
资质不少也没有特殊之处，但也可以取得很不错的成绩。这就是现实给他们的机会造就了他们。</p>

<p>而对于又想和体制打交道，又想不给导师打很多工就拿到硕士文凭的，那么还是学我吧。</p>

<p>总之，如今的社会还是一个相对开明的，机会也不是没有，除了住房，大部分需求都还能够通过自己的努力获得。没有硕士文凭也可以做出正经事情。虽然硕士文凭
是有用的，但干活和工作也是很正经的事情，而且是来自现实世界的正经事情。硕士文凭在去体制内和大公司的时候特别有用，而且越大就越有用。如果想去大公司
那么可以读的还是去读一个吧。如果想靠自己闯的，那么建议大二大三稍稍有空闲时间即可实际接触现实世界的项目和技术。真的做到的话，竞争力会强于大部分
研究生，当然，现实是大部分本科生是做不到的，所以他们大部分也比不上硕士研究生。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不列颠网站]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2012/03/05/ukgov-notes/"/>
    <updated>2012-03-05T14:37:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2012/03/05/ukgov-notes</id>
    <content type="html"><![CDATA[<p>一个曾经让我们的国家蒙羞的日不落帝国，即便早已今非昔比，但实际上已经进展到相当现代化的阶段。这从他们最近公布的一组政府网站的制造方式和制造工具上可见一端。</p>

<p>首先，整个网站倡导的是 government as a platform，高度融合了政府为人民服务，政府其实就是一种云。</p>

<p>其次，整个网站不单使用大量的开源工具和软件来构造，网站本身的代码也是开源的，就托管在GitHub上。而被问及为何考虑开源自己的代码时，他们的政府负责人回答是既然是政府平台，
那么它就是大家的，既然是大家的我们希望可以在开发中贡献和分享给每一个人。</p>

<p>整个项目的预算则是1.7百万英镑。这个价格确实不高。我们的孔子学院门户就要3kw人民币，而英国政府的网站造价仅有中国一个官办学院的一半。那是相当之便宜。</p>

<p>以上是整个网站的构造思想，它是开源的、开放的，价格合理的，全民参与和分享的。而在技术实现上也更进一步体现了这种平民化的政府网站哲学。</p>

<p>英国政府并没有买大量的服务器，也没有以国家安全为由自己组建机房。而是选择了Amazon EC2作为存放的主机，存储也是采用的A的S3.这在我们看来是难以想象的。简直有损国家的尊严。身为
一个历史悠久的帝国，怎能连自己的服务器和机房都不具备？实际上，大英帝国政府连email服务器也是租用的。很可能他们用的Gmail和Amazon的mail服务还是免费的。</p>

<p>而在语言和框架方面，也尽显开源和先进的本色。</p>

<pre><code>Javascript uses jQuery, jQuery UI, Chosen, and a variety of other plugins
Most of the application code is written in Ruby, running on a mixture of Rails and Sinatra
router用Scala编写
</code></pre>

<p>数据库当然也是开源的，MongDB起NoSQL的部分，MySQL作为传统的关系型数据库，MaPit做地图数据库。</p>

<p>一个优雅、合理的新时代的网站架构。一句话形容，这才tmd真是先进国家的先进政府网站。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创新是什么]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2012/01/29/chuang-xin-shi-shi-yao/"/>
    <updated>2012-01-29T16:20:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2012/01/29/chuang-xin-shi-shi-yao</id>
    <content type="html"><![CDATA[<p>创新是目前提到的很热门的词汇。在我看来，创新可以理解成一种突破。<br/>
不管这种产品是渐进地到达的，还是通过结构性调整获得的，当然也有颠覆现有模式的。<br/>
渐进的创新犹如水滴石穿，量变到质变。其中的道路、方向等都已被开辟，人们只是随着这个道路继续前进，逐步的优化提高。日积月累，自然获益良多。汽车业是这方面的典型代表。<br/>
结构性调整的代表可以提一下Rails。横空出世的Rails，实际上是在一系列东西基础上，最后经DHH独创产生。但是，DHH的独创离不开Ruby的MRI，而database的接口也是其他人已写好多年，erb的引擎也是在DHH动手之前就有。而DHH把这些东西重新组织起来用于开发Web应用，就有了突破性的开发框架Rails。<br/>
颠覆现有模式的典型，非数码照相机莫属。实际上互联网的产生，使得很多领域都出现了颠覆性创新的可能。试问，一旦没有互联网，dc还能那么流行吗？</p>

<p>所以，创新者，配合发展的环境同时发展的事物耳。如果环境不发展，则自然也没有创新的机遇。中国人创新能力差，盖因环境变化少。与时俱进乃创新之真正配套内涵。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RoR捧红的东西]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2011/12/08/ror-penghong/"/>
    <updated>2011-12-08T17:03:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2011/12/08/ror-penghong</id>
    <content type="html"><![CDATA[<p>看见一篇抱怨ruby在国内社区越来越小的帖子。仔细想想，ruby或者说rails在国内的状况始终是不愠不火，她的社区可能在中国的环境下就是不会大。但是如果说到rails社区，似乎捧红了不少软件开发业的亮点。</p>

<p>第一个，自然就是ruby。原本只有日本人知道的脚本语言一年内就完成了全球化，即使六七年过去了，说起ruby的杀手级应用依然是rails.很多人学python是因为google支持python，这方面ruby的支撑巨头显然少的多。</p>

<p>第二个，应该算nginx。原本只有懂俄语的人才会去架设的web服务器，因为反向代理在rails的部署方面的表现，变得为人熟知。尽管这是nginx的实力是她本身的性能优势实在出众。但不可否认，rails也是nginx引导向全球的主要突破者。</p>

<p>第三个，git和github。git是系出名门。为人所知则是从Rails自svn迁移到git起始。随后就出现一轮狂飙，众多主流开源软件纷纷开始往git，实际上是github进行迁移。git和github今日的成就已有目共睹，说是傍上rails才火的那么有爆发性并不为过。当然关键还是看自身的底子，比较起来，当时同时一起迁移的票据系统lighthouse则黯淡的多。</p>

<p>第四个，heroku。如果说其他几个是不论rails在与不在，他们全都存在。但是heroku则是没有rails就不会有她的。时至今日，heroku已经是一个多语言环境的PaaS，但头两三年确实一直只支持ruby系的web框架，完全以此起家。</p>

<p>下一个会是什么？coffee.js或者其他什么东西。这个还真的难以预料。因为以上这些全是rails发展过程中的副产品，捧谁不捧谁只有天知道，捧得起捧不起只有看被捧的东西。Rails自己关心的始终是web开发的创新。</p>

<p>从中我们也可以发现，国外的软件生态圈更多的是n样独立的东西共赢发展，每样独立的东西本身规模都比较小。这和我们这个民族所向往的求最大、求一体化完全是两码事情。</p>
]]></content>
  </entry>
  
</feed>
