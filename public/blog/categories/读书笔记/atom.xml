<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类: 读书笔记 | Hegel2011的博客]]></title>
  <link href="http://octopresszhangyu.herokuapp.com/blog/categories/读书笔记/atom.xml" rel="self"/>
  <link href="http://octopresszhangyu.herokuapp.com/"/>
  <updated>2012-12-25T23:21:53+08:00</updated>
  <id>http://octopresszhangyu.herokuapp.com/</id>
  <author>
    <name><![CDATA[Hegel 2011]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ziyang]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2012/12/25/ziyang/"/>
    <updated>2012-12-25T22:42:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2012/12/25/ziyang</id>
    <content type="html"><![CDATA[<p>全书比较浪费时间，最有价值的是最后的一篇历史专家的序，基本把主要内容概括出来了。</p>

<p>作为实际操作改革开放的设计师，Z肯定有过人之处，但同时也可以看出2B的地方也不少，可见人总有弱点，也不必追求尽善尽美。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浪潮之巅]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2012/12/25/lang-chao-zhi-dian/"/>
    <updated>2012-12-25T22:42:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2012/12/25/lang-chao-zhi-dian</id>
    <content type="html"><![CDATA[<p>读完浪潮之巅，确实算本好书。作者能记录那么多小故事小掌故可见平时的积累很深。财经股市融资讲的也很生动。
当然，不见得所有分析都对。比如solaris他就没意识到是被ibm支撑的linux打败的，windows至今在桌面上和linux井水不犯河水。当然，盖茨的担忧不是没道理。
pc上linux毫无机会，但是移动终端就变天了。</p>

<p>另外，给我的启示是别说老师不知道我们今后能干什么，实在是没人能料到发展状况的，以前指望老师指条明路的想法太不切实际。
这个产业的高速发展和不确定性完全不是能被预知的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《天葬》读后感及Kindle的体验]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2012/12/15/tianzang/"/>
    <updated>2012-12-15T21:09:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2012/12/15/tianzang</id>
    <content type="html"><![CDATA[<p>Kindle到手后，一周读了一本半书。两本书的作者都是同一个人wang li xiong。</p>

<p>TianZang(T)这本书是写的逻辑很清晰的。从介绍西藏历史上和中国之间的关系入手，高低起伏、左转右转的关系相当引人入胜，条理极其清晰，也就很容易
记忆住了。</p>

<h3>关系简史</h3>

<p>西藏原来叫做吐蕃，唐朝时候和大唐争斗不息，互有胜负。大唐吃了不少苦头，也嫁了几个公主给他们。彼时的吐蕃人有400万之众，也未皈依佛教，
战斗力极强。藏人本是游牧民族，骑马骑牦牛，从坡上下来打唐军可以占尽便宜。到宋代，自然无力针对他们，于是让出很远一片，基本就和藏人不接壤了。吐蕃人
此时也开始信佛，没有扩张性了，人口实际上从那时开始直到后来也就只有400万的1/4-1/2。</p>

<p>元朝的番僧，是蒙古人统治的精神支柱。彼时吐蕃人就变成了<strong>国师</strong>，和蒙古人一样属于统治阶级。蒙藏那时本是一家，联合统治了华南华北。蒙藏的关系一直
很密切，其后一直到明朝之后还是如此。而在明朝，藏人开始押宝大明，毕竟大明赶走了蒙古人。他们也会向明皇帝朝贡，但也仅仅是朝贡，实际上大明
还要回赠的更多。但形式上，确实向大明称臣。到了清代，情况发生了变化。</p>

<p>在清代对葛尔丹和青海蒙古族进行了镇压和屠杀后，蒙古人的势力在西域和西藏开始衰弱，至今新疆境内仍然有蒙古自治州县就是衰弱后的残余。蒙古人的空间逐步被维吾尔
和藏人占据。清代逐步设立了青海办事大臣和驻藏办事大臣，西藏在清代被称作<strong>唐古忒</strong>。不过实际权力还在喇嘛手中，大臣被戏称为“熬茶大臣”，即只负责
施舍粮食的大臣。</p>

<p>随后英国人荣赫鹏对西藏的入侵，导致清朝开始重视西藏的主权。因为这个是很耗精力的，藏人又不好管，无人进藏的困难从未真正有解决方案，清王朝之前
的统治以名义为主，实际操作中少花钱少办事是主旋律。而且藏人也极其闭塞、愚昧不好打交道。以至于大臣见到荣赫鹏时顿有知音之感，因为他们在藏人
面前的经历类似。可见他在藏人那又多郁闷。“藏人实以极端顽固之民族”。</p>

<p>清末加强主权开始，一张一赵成为清廷处理西藏问题文武经略。他们的控制应该说还是很成功的。只是清王朝彼时已行将就木，所以他们最后是败给了自己人，起义及起哄的汉人。
民国开始，自然无力顾及西藏，基本就这样子。一段插曲是，藏人认为中国军队进驻西藏一年半以后，清朝就遭到了报应，因为它虐待了宗教领袖，还让领袖
给西太后与皇帝行跪拜之礼。当然，五十年代的报应至今还没看出端倪。</p>

<p>从辛亥革命之后到51年之前，西藏基本处于实际独立的状况，因为中国实在没空管。但是为了<strong>川滇秦陇</strong>的防卫，显然不可能长期不管。于是在51年西南西北野战军
就开始进藏。藏人的战略战术都不行，也没有打游击战，被解放军在川藏线上包了饺子。于是同中共和谈，最后算是和平解放。但藏人的统治还是寺庙宗教
在执行，中共当时是联合的西藏贵族和喇嘛，农奴制其实没有多少变化。但是，把农奴制的统治地区限制在了西藏自治区。而青海、四川甚至甘肃云南都有
一部分的藏区，这部分藏区不再实行农奴制，开始打当地的藏人贵族和寺庙。因为藏人的传统统治基本单位就是寺庙和贵族。</p>

<p>虽然行政上分在几个行政单位中，实际上藏族之间的关系千丝万缕。于是在川藏青藏吃了亏的人退进了自治区退到了拉萨，自治区反而变成了他们的根据地。
从此，自治区里面的冲突开始逐步升级，最后只能通过战争解决。自然谁胜谁败不难评判，达赖从此出逃去了印度的达兰萨拉。在得罪了高层之后，党就开始走下层路线，用阶级斗争来解决民族冲突。
伟大领袖从此也成为了藏人的领袖和心中的红太阳。这段时间到文革，基本左的很厉害，党也建立了在西藏实际有效的统治组织。藏民中的下等人逆袭成为了主要的帮手。
而且彼时国家对国人有绝对的支配权，无人进藏的问题暂时不成困难。此时的政府确实完全具备了对西藏的主权，西方的概念。</p>

<p>文革结束，党对藏人执行了宽松的政策。以藏人治理藏人。同港人治港不同，港人治港一直依靠香港有钱人上等人。藏则经过了依靠穷人又变为富人翻身，
以前的西藏贵族在取消阶级斗争后，又迅速地富了起来，社会地位等超过了穷藏人。宗教作为藏文化的核心内容，和尚和寺庙都变成了上宾。而且实际上影响着
藏人。宽松的政策容易导致四不像，反而易出问题。好比国民党想军队国际化，撤出了党代表，最后军队搞的一盘散沙。西藏在80年代则也有类似的现象。
所以部分人把这称为胡乱邦。87年之后，形式越来越紧张，藏人日益放肆，而老一代的西藏汉族干部都年纪大了。所以出现了冲突。这时候又是西藏分裂势力
开始抬头。随后，中央政府及时调整了政策，在90年底起，重新加强了对边疆的建设和防备。局面始终在党的控制之下，但摩擦始终存在。</p>

<p>而达赖在去了达兰萨拉后，和西方接触日多，又是转世灵通的底子，逐步成为了西方很喜欢的西藏代表。变成了西方牵制中国中共的一张王牌。</p>

<p>纵观简史，西藏的问题确实很复杂，地域、空间、民族、气候的特点，使得它其实是不太适用于源于欧洲的那套国家体系。而目前国际通行的标准和规则
又就是那一套，因此引经据典注定到头来总是看以谁的角度来看待问题。因为这个约等于完全处于主观判断中。</p>

<h3>未来的遐想</h3>

<p>杨度有一句名言，若我中华国国亡，除非湖南人尽死。对于西藏问题，可以借用改造一下得出：若我中华失去西藏，除非中国人尽死。<br/>
这并非危言耸听，以如今之形式及生存空间的要求而言，中国人是很难放弃西藏这块地区的。别说青、藏、川，哪怕只是一个自治区要想完全脱离汉人的怀抱
也是不可能的。即便是民主及各地拥有高度自主权的中国，也是会让西藏纳入在版图之内。在这方面，中国政府的后退空间确实不多。从当前的情况看来，只有这样继续僵持了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Mongodb (3) 部署和管理]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2012/04/17/deployment-and-administration-for-mongod/"/>
    <updated>2012-04-17T11:07:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2012/04/17/deployment-and-administration-for-mongod</id>
    <content type="html"><![CDATA[<p>系列链接：</p>

<ol>
<li><a href="/blog/2012/03/29/learning-mongodb-1/">mongodb基础</a></li>
<li><a href="/blog/2012/03/30/learning-mongodb-2/">尝试分布式及复制  （sharding and replication)</a></li>
<li><a href="/blog/2012/04/17/deployment-and-administration-for-mongod/">部署和管理</a></li>
</ol>


<h3>部署环境要求</h3>

<ul>
<li><p>架构</p>

<ul>
<li><strong>64-bit</strong> , mongo会把所有的文件都map成虚拟地址空间，32位至多只能利用2GB内存空间</li>
<li>little-endian , 不适合SPARC, PowerPC, PA-RISC，客户端（驱动）无所谓运行环境</li>
</ul>
</li>
<li><p>CPU</p>

<ul>
<li>非cpu密集型应用</li>
<li>I/O瓶颈远比CPU瓶颈出现的可能性多</li>
<li>多客户端同时读时，多核会被利用</li>
<li>写操作还是单核</li>
</ul>
</li>
<li><p>RAM</p>

<ul>
<li>越多越好</li>
<li>working set， index size， ram总数</li>
</ul>
</li>
<li><p>Disk</p>

<ul>
<li>IOPS 优先</li>
<li><em>background flush</em> 60s sync到磁盘一次</li>
<li>ssd可以优化速度（solid state drive）</li>
<li>RAID 10 组成 LVM</li>
</ul>
</li>
<li><p>文件系统</p>

<ul>
<li>ext4 或者 xfs，快速、连续的磁盘分配</li>
<li>禁用access time(atime)更新</li>
</ul>
</li>
</ul>


<p>```sh</p>

<h1>禁用 atime更新</h1>

<p>sudo mv /etc/fstab /etc/fstab.bak
sudo vim /etc/fstab</p>

<h1>file-system mount type options dump pass</h1>

<p>UUID=8309beda-bf62-43 /ssd ext4 noatime 0 2</p>

<p>改完文件后，可以不用重启
```</p>

<ul>
<li>文件描述符(FD)

<ul>
<li>默认的1024不够用  <code>lsof | grep mongo | wc -l</code> 可以查看当前mongod打开了多少个文件和连接</li>
<li>调大 <code>ulimit -Hn</code> 可以查看</li>
</ul>
</li>
</ul>


<p><code>sh
vi /etc/security/limits.conf
mongodb hard nofile 10240
下次登录后生效
</code></p>

<ul>
<li><p>时钟</p>

<ul>
<li>ntp协议，在跑shard和replication时候必须启用的东西</li>
</ul>
</li>
<li><p>ec2上使用mongodb</p>

<ul>
<li>ec2易用、地理范围广、价格有竞争力</li>
<li>68GB RAM的限制</li>
<li>使用  EBS 存储， 吞吐性能一般化</li>
</ul>
</li>
</ul>


<h3>服务器配置</h3>

<ul>
<li><p>选择拓扑</p>

<ul>
<li>是否需要shard， 是否需要replica</li>
<li>建议多机</li>
</ul>
</li>
<li><p>打开journal标志</p></li>
</ul>


<h3>安全保障</h3>

<ul>
<li><p>环境安全</p>

<ul>
<li>防火墙</li>
<li>数据的传输是不加密的</li>
</ul>
</li>
<li><p>授权</p>

<ul>
<li>给admin区增加用户<code>use admin; db.addUser("boss", "supersecret")</code></li>
<li>启动时带上选项 <code>mongod --auth</code></li>
<li>使用admin然后再授权 <code>use admin; db.auth("boss", "supersecret")</code></li>
<li>给其他库，如stock，创建用户 <code>use stocks; db.addUser("trader", "moneyfornuthin")</code></li>
<li>查找用户 <code>db.system.users.find()</code></li>
</ul>
</li>
<li><p>keyFile</p>

<ul>
<li>cluster 和 sharding 的时候需要制定keyFile，mongos实例也要具备这个密钥文件</li>
</ul>
</li>
<li><p>日志记录</p>

<ul>
<li>运行时--logpath指定</li>
</ul>
</li>
</ul>


<h3>监控工具</h3>

<ul>
<li><p>serverStatus<br/>
<code>use admin; db.runCommand({serverStatus: 1})</code><br/>
<strong>globalLock</strong> 表示等待写锁的时间。ratio过高意味着需要优化调整<br/>
<strong>mem</strong> 段的单位是MB</p></li>
<li><p>mongostat</p>

<ul>
<li>类似 iostat 运行的效果</li>
</ul>
</li>
<li><p>web console</p>

<ul>
<li>--rest 标志打开的话，可以从web处得到更多的运行信息</li>
</ul>
</li>
</ul>


<h3>备份与压缩</h3>

<p>mongodump 和 mongorestroe两个组合，也可以直接拷贝文件。不过后者要求lock数据库，即要求mongod停止往磁盘同步。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PM培训课程小结]]></title>
    <link href="http://octopresszhangyu.herokuapp.com/blog/2012/04/15/lessons-from-a-training-on-pm/"/>
    <updated>2012-04-15T13:42:00+08:00</updated>
    <id>http://octopresszhangyu.herokuapp.com/blog/2012/04/15/lessons-from-a-training-on-pm</id>
    <content type="html"><![CDATA[<p>趁着这个集成项目经理培训的五天培训，把辅导材料基本过了一遍。结合一些自己的经验，以及看<a href="http://xdite-smalltalk.tumblr.com/post/18034694291">别人</a>的一些文章，谈谈
自己的想法。</p>

<p>整本培训洋洋洒洒地讲了很多东西，客观的说能全面解析出这样一套体系的人相当的不简单。但是，这套体系应该说还是基于瀑布模型的，只不过
把大瀑布分拆成了n个小瀑布。实际上对软件开发并不太适用。不过因为整套体系认为<strong>光有集成</strong>是没有自己的竞争力的，要求有<strong>30%</strong>的软件开发内容，
于是又把软件开发放在里面。这也让我终于明白了工作的第一个部门成立的<strong>指导思想来源</strong>。因为我曾经相当一段时间纳闷为什么非要把系统集成
和研发凑合成一个部门。而且整个软件组还受集成一侧领导。这样能做出什么好东西来。但现在终于了解了这样组织的来源，而且以集成为主导也是因为这里面
要求软件比例不低于30%。</p>

<p>读了这本材料，终于明白公司是抄自国家认证考试的体系。也可能是其他人这么建议的，而也受了这个认证体系理论的影响。</p>

<p>软件开发有其自身的特点和重点。集成体系用其无所不包、范围够广的方式（9大范围）强行把软件包裹了进去。尽管看上去纳入了，但重点很不突出。
毕竟即使有软件工程也和系统工程是两码事情。所以，这次培训最大的结果是了解集成到底是什么思路，然后就通过这个考试，剩下的也只有自己继续摸索。</p>

<p>先说说集成这套体系。</p>

<p>首先，体系强调章程和计划。章程只有一个，而计划各个领域可以有很多。实际上，<strong>计划也是章程</strong>。只不过灵活度比章程强，可以按照需要进行
变更、更新，而章程定下了就不怎么更新了。计划或者章程规定了要做哪些事情，什么时候做，相关人员是什么，什么情况下需要变更。
随后就是一堆输入输出的交付物。</p>

<p>接下去的东西就好理解了，反正整个东西追求的结果都是文档。当然，文档确实有很多种，有些方法对保证系统也确实有帮助。
比如需求管理中的use case，每个case其实还是要用文字说明的，case图可以让需求方和系统分析师把东西交流清楚。但本质上就是
一个list，只是说明参与对象是什么。WBS分解，可以用于进一步细化和确认需求，分写出要做的工作。这些都是和软件开发业密切相关的，
但是在此之外，其他的东西实质上和软件的关联就不怎么大了。</p>

<p>最后，就是强调一切东西都要有确认，变更等都要走流程。这些东西如果乙方有能力实施，当然是很好的。</p>

<p>此外，还有一些东西就是骗来骗去的了。比如进度估计、成本估计，实际上即使传统的工程，能准确估算出来的都是很少的。</p>

<p>经典的启动、计划、执行、监控和收尾，又叫做PDCA（Plan Doing Check Action), 典型的普遍模型，自上而下。只是又可以分解成n个小瀑布。
但是，这个真的是软件开发里面最重要的事情嘛？</p>

<p>恐怕不是。</p>

<p>就我看来，软件或者互联网应用更多的强调对自身功能和模块的拆分，启动时往往很难明确细化东西。即使建筑工程本身，也就是这套体系产生的原型，
也有众多管理失败的案例，巴拿马运河等，那么软件对这套系统的适应性恐怕更难。而且这套体系显然没考虑很多项目管理工具的使用，如redmine、如版本控制系统，
而不同的工具或进步的工具是可以颠覆整个开发行为的。条条框框和优秀的软件结合起来会完全改变制造方式。与此相比，管理体系本身就显得僵化。当然，值得吸取的部分还是有的。
比如我们需要一个章程，需要需求的确认。</p>

<p>最最重要的，就是list要做的事情，给出最终时间。WBS后，确认细节，排好顺序，随后和用户确认。</p>

<p>而在这中间，系统的调整能力和团队和用户沟通的软实力才是起决定作用的东西。</p>

<p>Update(2012-05-15): 读了<a href="http://blog.xdite.net/posts/2012/05/13/the-startup-owners-manual-02/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+xxddite+%28Blog.XDite.net%29">New product Introduction Model的九宗罪</a>
进一步明确了PM这套东西不适合的原因。确实，这套东西适合的是“在有確定用戶，確定市場，確定 bussiness model 的情況下才能使用。也只有在這樣的情況下才有機會成功。”
“這很大程度了解釋了為什麼：個人、大公司要『新創』一個事業很容易失敗。而一些『大公司』要『山寨』一個服務也有機會取得成功。” <br/>
那么反过来，对于不够明确的、大家都还没谱的、都需要摸索的项目就不合适。<br/>
所谓<strong>执行</strong>是针对有成熟套路的东西，考察的是系统的熟练程度和配合程度。而创新、新业务是需要<strong>试错的</strong>，其中的核心能力是<strong>学习</strong>、<strong>摸索</strong>、<strong>观察</strong>和<strong>勇气</strong>。</p>
]]></content>
  </entry>
  
</feed>
